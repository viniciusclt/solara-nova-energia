#!/usr/bin/env node

/**
 * Script para executar o diagn√≥stico SQL no Supabase self-hosted
 * Corrige erros de 'Usu√°rio ou empresa n√£o encontrados'
 * Usa conex√£o direta PostgreSQL
 */

import pg from 'pg';
import dotenv from 'dotenv';
import { URL } from 'url';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do banco
const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;

if (!supabaseUrl) {
  console.error('‚ùå Erro: Configure SUPABASE_URL no arquivo .env');
  process.exit(1);
}

// Extrair configura√ß√£o de conex√£o da URL do Supabase
const url = new URL(supabaseUrl);
const host = url.hostname;
const port = 5432; // Porta padr√£o PostgreSQL para Supabase self-hosted

// Configura√ß√µes de conex√£o PostgreSQL
const dbConfig = {
  host: host,
  port: port,
  database: 'postgres',
  user: 'postgres',
  password: 'postgres', // Senha padr√£o para Supabase self-hosted
  ssl: false // Self-hosted geralmente n√£o usa SSL
};

console.log('üöÄ Iniciando diagn√≥stico do dashboard...');
console.log(`üîó Host: ${host}:${port}`);
console.log(`üóÑÔ∏è Database: ${dbConfig.database}`);

// Fun√ß√£o para executar SQL
async function executeSql(client, sql, description) {
  try {
    console.log(`\nüîÑ Executando: ${description}`);
    const result = await client.query(sql);
    
    console.log(`‚úÖ Sucesso: ${description}`);
    if (result.rows && result.rows.length > 0) {
      console.log('üìä Resultado:');
      console.table(result.rows);
    } else if (result.rowCount !== undefined) {
      console.log(`üìä Linhas afetadas: ${result.rowCount}`);
    }
    return true;
  } catch (err) {
    console.error(`‚ùå Erro em ${description}:`, err.message);
    return false;
  }
}

// Fun√ß√£o principal
async function executeDiagnostic() {
  const client = new pg.Client(dbConfig);
  
  try {
    // Conectar ao banco
    console.log('üîå Conectando ao banco de dados...');
    await client.connect();
    console.log('‚úÖ Conectado com sucesso!');
    
    // 1. Verificar estrutura das tabelas
    console.log('\nüìã ETAPA 1: Verificando estrutura das tabelas');
    await executeSql(client, `
      SELECT 
        schemaname,
        tablename
      FROM pg_tables 
      WHERE schemaname = 'public' 
        AND tablename IN ('profiles', 'companies')
      ORDER BY tablename;
    `, 'Verificar tabelas existentes');

    // 2. Contar usu√°rios com e sem company_id
    console.log('\nüìä ETAPA 2: Analisando usu√°rios sem company_id');
    await executeSql(client, `
      SELECT 
        'Usu√°rios com company_id' as categoria,
        COUNT(*) as total
      FROM profiles 
      WHERE company_id IS NOT NULL
      
      UNION ALL
      
      SELECT 
        'Usu√°rios sem company_id' as categoria,
        COUNT(*) as total
      FROM profiles 
      WHERE company_id IS NULL;
    `, 'Contar usu√°rios por categoria');

    // 3. Listar usu√°rios sem company_id
    await executeSql(client, `
      SELECT 
        p.id,
        p.email,
        p.full_name,
        p.role,
        p.created_at,
        p.company_id
      FROM profiles p
      WHERE p.company_id IS NULL
      ORDER BY p.created_at DESC
      LIMIT 10;
    `, 'Listar usu√°rios √≥rf√£os');

    // 4. Verificar se existe empresa padr√£o
    console.log('\nüè¢ ETAPA 3: Verificando empresa padr√£o');
    await executeSql(client, `
      SELECT 
        id,
        name,
        slug,
        created_at
      FROM companies 
      WHERE slug = 'empresa-padrao' OR name ILIKE '%padr√£o%' OR name ILIKE '%default%'
      LIMIT 5;
    `, 'Verificar empresa padr√£o');

    // 5. Criar empresa padr√£o se n√£o existir
    console.log('\nüîß ETAPA 4: Criando empresa padr√£o');
    await executeSql(client, `
      INSERT INTO companies (
        id,
        name,
        slug,
        description,
        status,
        created_at,
        updated_at
      )
      SELECT 
        gen_random_uuid(),
        'Empresa Padr√£o',
        'empresa-padrao',
        'Empresa padr√£o para usu√°rios sem empresa definida',
        'active',
        NOW(),
        NOW()
      WHERE NOT EXISTS (
        SELECT 1 FROM companies WHERE slug = 'empresa-padrao'
      );
    `, 'Criar empresa padr√£o');

    // 6. Atualizar usu√°rios √≥rf√£os
    console.log('\nüë• ETAPA 5: Corrigindo usu√°rios √≥rf√£os');
    await executeSql(client, `
      UPDATE profiles 
      SET 
        company_id = (
          SELECT id FROM companies WHERE slug = 'empresa-padrao' LIMIT 1
        ),
        updated_at = NOW()
      WHERE company_id IS NULL;
    `, 'Atualizar usu√°rios √≥rf√£os');

    // 7. Verifica√ß√£o final
    console.log('\n‚úÖ ETAPA 6: Verifica√ß√£o final');
    await executeSql(client, `
      SELECT 
        COUNT(*) as usuarios_sem_empresa
      FROM profiles 
      WHERE company_id IS NULL;
    `, 'Verificar usu√°rios √≥rf√£os restantes');

    await executeSql(client, `
      SELECT 
        c.name as empresa,
        COUNT(p.id) as total_usuarios
      FROM companies c
      LEFT JOIN profiles p ON p.company_id = c.id
      GROUP BY c.id, c.name
      ORDER BY total_usuarios DESC;
    `, 'Estat√≠sticas finais');

    console.log('\nüéâ Diagn√≥stico conclu√≠do com sucesso!');
    console.log('üìù Pr√≥ximos passos:');
    console.log('   1. Verificar se o DashboardService funciona sem erros');
    console.log('   2. Testar o carregamento do dashboard');
    console.log('   3. Verificar logs de erro no console');
    
  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error.message);
    
    // Tentar configura√ß√µes alternativas
    console.log('\nüîÑ Tentando configura√ß√µes alternativas...');
    
    const altConfigs = [
      { ...dbConfig, password: 'your-super-secret-jwt-token-with-at-least-32-characters-long' },
      { ...dbConfig, password: 'supabase' },
      { ...dbConfig, user: 'supabase', password: 'supabase' }
    ];
    
    for (const config of altConfigs) {
      try {
        console.log(`\nüîÑ Tentando com usu√°rio: ${config.user}`);
        const altClient = new pg.Client(config);
        await altClient.connect();
        console.log('‚úÖ Conex√£o alternativa bem-sucedida!');
        await altClient.end();
        
        console.log('üí° Use esta configura√ß√£o:');
        console.log(`   Host: ${config.host}`);
        console.log(`   Port: ${config.port}`);
        console.log(`   User: ${config.user}`);
        console.log(`   Database: ${config.database}`);
        break;
      } catch (altError) {
        console.log(`‚ùå Falhou com ${config.user}: ${altError.message}`);
      }
    }
    
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Executar diagn√≥stico
executeDiagnostic();