[{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\AuditLogViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\BackupManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ConsumptionCalculator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DatasheetAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DemoDataIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\DragDropContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\DragDropExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\DragDropItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\DragDropProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":95,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":95,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'snapPosition'. Either include it or remove the dependency array. Outer scope values like 'snapToGridPosition' aren't valid dependencies because mutating them doesn't re-render the component.","line":398,"column":6,"nodeType":"ArrayExpression","endLine":398,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [containers, updateItem, snapPosition]","fix":{"range":[12840,12884],"text":"[containers, updateItem, snapPosition]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'findItem' and 'snapToGridPosition'. Either exclude them or remove the dependency array. Outer scope values like 'findItem' aren't valid dependencies because mutating them doesn't re-render the component.","line":475,"column":6,"nodeType":"ArrayExpression","endLine":475,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [updateItem]","fix":{"range":[15341,15383],"text":"[updateItem]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'findItem'. Either exclude it or remove the dependency array. Outer scope values like 'findItem' aren't valid dependencies because mutating them doesn't re-render the component.","line":552,"column":6,"nodeType":"ArrayExpression","endLine":552,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [selectedItems, selectItem]","fix":{"range":[17494,17531],"text":"[selectedItems, selectItem]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'findContainer'. Either exclude it or remove the dependency array. Outer scope values like 'findContainer' aren't valid dependencies because mutating them doesn't re-render the component.","line":591,"column":6,"nodeType":"ArrayExpression","endLine":591,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [containers, moveItem, updateContainer]","fix":{"range":[18782,18836],"text":"[containers, moveItem, updateContainer]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback, useRef } from 'react';\nimport { generateId, snapToGridPosition, validateItemMove, findContainer, findItem } from './dragDropUtils';\nimport {\n  DndContext,\n  DragEndEvent,\n  DragStartEvent,\n  DragOverEvent,\n  DragOverlay,\n  PointerSensor,\n  KeyboardSensor,\n  useSensor,\n  useSensors,\n  closestCenter,\n  rectIntersection,\n  getFirstCollision,\n  pointerWithin\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  verticalListSortingStrategy,\n  horizontalListSortingStrategy,\n  rectSortingStrategy\n} from '@dnd-kit/sortable';\nimport { restrictToWindowEdges, restrictToParentElement } from '@dnd-kit/modifiers';\nimport { toast } from 'sonner';\n\ninterface DragDropItem {\n  id: string;\n  type: string;\n  data: unknown;\n  position?: { x: number; y: number };\n  size?: { width: number; height: number };\n  locked?: boolean;\n  grouped?: boolean;\n  groupId?: string;\n}\n\ninterface DragDropContainer {\n  id: string;\n  type: string;\n  items: DragDropItem[];\n  maxItems?: number;\n  acceptedTypes?: string[];\n  layout?: 'vertical' | 'horizontal' | 'grid' | 'free';\n  snapToGrid?: boolean;\n  gridSize?: number;\n}\n\ninterface DragDropContextType {\n  // State\n  containers: DragDropContainer[];\n  activeItem: DragDropItem | null;\n  selectedItems: string[];\n  draggedItem: DragDropItem | null;\n  isMultiSelectMode: boolean;\n  snapToGrid: boolean;\n  gridSize: number;\n  showGrid: boolean;\n  \n  // Actions\n  addContainer: (container: Omit<DragDropContainer, 'items'>) => void;\n  removeContainer: (containerId: string) => void;\n  updateContainer: (containerId: string, updates: Partial<DragDropContainer>) => void;\n  \n  addItem: (containerId: string, item: Omit<DragDropItem, 'id'>) => void;\n  removeItem: (itemId: string) => void;\n  updateItem: (itemId: string, updates: Partial<DragDropItem>) => void;\n  moveItem: (itemId: string, fromContainer: string, toContainer: string, index?: number) => void;\n  \n  selectItem: (itemId: string, multiSelect?: boolean) => void;\n  selectMultiple: (itemIds: string[]) => void;\n  clearSelection: () => void;\n  \n  duplicateItems: (itemIds: string[]) => void;\n  deleteItems: (itemIds: string[]) => void;\n  groupItems: (itemIds: string[]) => void;\n  ungroupItems: (groupId: string) => void;\n  \n  distributeItems: (containerId: string, distribution: 'horizontal' | 'vertical' | 'grid') => void;\n  alignItems: (itemIds: string[], alignment: 'left' | 'center' | 'right' | 'top' | 'middle' | 'bottom') => void;\n  \n  toggleSnapToGrid: () => void;\n  setGridSize: (size: number) => void;\n  toggleGrid: () => void;\n  toggleMultiSelect: () => void;\n  \n  exportData: () => { containers: DragDropContainer[]; settings: { snapToGrid: boolean; gridSize: number; showGrid: boolean }; timestamp: string };\n  importData: (data: { containers?: DragDropContainer[]; settings?: { snapToGrid?: boolean; gridSize?: number; showGrid?: boolean } }) => void;\n  resetAll: () => void;\n}\n\nconst DragDropContext = createContext<DragDropContextType | null>(null);\n\nexport const useDragDrop = () => {\n  const context = useContext(DragDropContext);\n  if (!context) {\n    throw new Error('useDragDrop must be used within a DragDropProvider');\n  }\n  return context;\n};\n\ninterface DragDropProviderProps {\n  children: React.ReactNode;\n  onItemMove?: (item: DragDropItem, fromContainer: string, toContainer: string) => void;\n  onSelectionChange?: (selectedItems: string[]) => void;\n  onError?: (error: string) => void;\n}\n\nexport const DragDropProvider: React.FC<DragDropProviderProps> = ({\n  children,\n  onItemMove,\n  onSelectionChange,\n  onError\n}) => {\n  const [containers, setContainers] = useState<DragDropContainer[]>([]);\n  const [activeItem, setActiveItem] = useState<DragDropItem | null>(null);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [draggedItem, setDraggedItem] = useState<DragDropItem | null>(null);\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\n  const [snapToGrid, setSnapToGrid] = useState(true);\n  const [gridSize, setGridSizeState] = useState(20);\n  const [showGrid, setShowGrid] = useState(true);\n  \n  const lastOverContainer = useRef<string | null>(null);\n  \n  // Sensors for different input methods\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor)\n  );\n\n  // Utility functions\n  const snapPosition = useCallback((position: { x: number; y: number }) => {\n    return snapToGridPosition(position, snapToGrid, gridSize);\n  }, [snapToGrid, gridSize]);\n\n  const findContainerById = useCallback((itemId: string) => {\n    return findContainer(containers, itemId);\n  }, [containers]);\n\n  const findItemById = useCallback((itemId: string) => {\n    return findItem(containers, itemId);\n  }, [containers]);\n\n  // Container management\n  const addContainer = useCallback((containerData: Omit<DragDropContainer, 'items'>) => {\n    const newContainer: DragDropContainer = {\n      ...containerData,\n      items: []\n    };\n    setContainers(prev => [...prev, newContainer]);\n  }, []);\n\n  const removeContainer = useCallback((containerId: string) => {\n    setContainers(prev => prev.filter(container => container.id !== containerId));\n  }, []);\n\n  const updateContainer = useCallback((containerId: string, updates: Partial<DragDropContainer>) => {\n    setContainers(prev => prev.map(container => \n      container.id === containerId ? { ...container, ...updates } : container\n    ));\n  }, []);\n\n  // Item management\n  const addItem = useCallback((containerId: string, itemData: Omit<DragDropItem, 'id'>) => {\n    const container = containers.find(c => c.id === containerId);\n    if (!container) {\n      onError?.('Container not found');\n      return;\n    }\n\n    if (container.maxItems && container.items.length >= container.maxItems) {\n      onError?.('Container is full');\n      toast.error('Container já está cheio');\n      return;\n    }\n\n    if (container.acceptedTypes && !container.acceptedTypes.includes(itemData.type)) {\n      onError?.('Item type not accepted');\n      toast.error('Tipo de item não aceito neste container');\n      return;\n    }\n\n    const validation = validateItemMove(container, itemData.type);\n    if (!validation.isValid) {\n      onError?.(validation.error || 'Invalid move');\n      toast.error(validation.error || 'Movimento inválido');\n      return;\n    }\n\n    const newItem: DragDropItem = {\n      ...itemData,\n      id: generateId(),\n      position: itemData.position ? snapPosition(itemData.position) : undefined\n    };\n\n    setContainers(prev => prev.map(container => \n      container.id === containerId \n        ? { ...container, items: [...container.items, newItem] }\n        : container\n    ));\n  }, [containers, snapPosition, onError]);\n\n  const removeItem = useCallback((itemId: string) => {\n    setContainers(prev => prev.map(container => ({\n      ...container,\n      items: container.items.filter(item => item.id !== itemId)\n    })));\n    setSelectedItems(prev => prev.filter(id => id !== itemId));\n  }, []);\n\n  const updateItem = useCallback((itemId: string, updates: Partial<DragDropItem>) => {\n    setContainers(prev => prev.map(container => ({\n      ...container,\n      items: container.items.map(item => \n        item.id === itemId \n          ? { \n              ...item, \n              ...updates,\n              position: updates.position ? snapPosition(updates.position) : item.position\n            }\n          : item\n      )\n    })));\n  }, [snapPosition]);\n\n  const moveItem = useCallback((itemId: string, fromContainer: string, toContainer: string, index?: number) => {\n    const item = findItemById(itemId);\n    if (!item) return;\n\n    const targetContainer = containers.find(c => c.id === toContainer);\n    if (!targetContainer) return;\n\n    // Check constraints\n    const validation = validateItemMove(targetContainer, item.type);\n    if (!validation.isValid) {\n      toast.error(validation.error || 'Movimento inválido');\n      return;\n    }\n\n    setContainers(prev => {\n      const newContainers = prev.map(container => {\n        if (container.id === fromContainer) {\n          return {\n            ...container,\n            items: container.items.filter(i => i.id !== itemId)\n          };\n        }\n        if (container.id === toContainer) {\n          const newItems = [...container.items];\n          if (index !== undefined) {\n            newItems.splice(index, 0, item);\n          } else {\n            newItems.push(item);\n          }\n          return {\n            ...container,\n            items: newItems\n          };\n        }\n        return container;\n      });\n      \n      onItemMove?.(item, fromContainer, toContainer);\n      return newContainers;\n    });\n  }, [containers, findItemById, onItemMove]);\n\n  // Selection management\n  const selectItem = useCallback((itemId: string, multiSelect = false) => {\n    if (multiSelect || isMultiSelectMode) {\n      setSelectedItems(prev => {\n        const newSelection = prev.includes(itemId)\n          ? prev.filter(id => id !== itemId)\n          : [...prev, itemId];\n        onSelectionChange?.(newSelection);\n        return newSelection;\n      });\n    } else {\n      const newSelection = [itemId];\n      setSelectedItems(newSelection);\n      onSelectionChange?.(newSelection);\n    }\n  }, [isMultiSelectMode, onSelectionChange]);\n\n  const selectMultiple = useCallback((itemIds: string[]) => {\n    setSelectedItems(itemIds);\n    onSelectionChange?.(itemIds);\n  }, [onSelectionChange]);\n\n  const clearSelection = useCallback(() => {\n    setSelectedItems([]);\n    onSelectionChange?.([]);\n  }, [onSelectionChange]);\n\n  // Advanced operations\n  const duplicateItems = useCallback((itemIds: string[]) => {\n    itemIds.forEach(itemId => {\n      const item = findItemById(itemId);\n      const container = findContainerById(itemId);\n      if (item && container) {\n        const duplicatedItem = {\n          ...item,\n          position: item.position ? {\n            x: item.position.x + 20,\n            y: item.position.y + 20\n          } : undefined\n        };\n        addItem(container.id, duplicatedItem);\n      }\n    });\n    toast.success(`${itemIds.length} item(s) duplicado(s)`);\n  }, [findItemById, findContainerById, addItem]);\n\n  const deleteItems = useCallback((itemIds: string[]) => {\n    itemIds.forEach(removeItem);\n    toast.success(`${itemIds.length} item(s) removido(s)`);\n  }, [removeItem]);\n\n  const groupItems = useCallback((itemIds: string[]) => {\n    if (itemIds.length < 2) return;\n    \n    const groupId = generateId();\n    itemIds.forEach(itemId => {\n      updateItem(itemId, { grouped: true, groupId });\n    });\n    toast.success(`${itemIds.length} itens agrupados`);\n  }, [updateItem]);\n\n  const ungroupItems = useCallback((groupId: string) => {\n    containers.forEach(container => {\n      container.items.forEach(item => {\n        if (item.groupId === groupId) {\n          updateItem(item.id, { grouped: false, groupId: undefined });\n        }\n      });\n    });\n    toast.success('Itens desagrupados');\n  }, [containers, updateItem]);\n\n  const distributeItems = useCallback((containerId: string, distribution: 'horizontal' | 'vertical' | 'grid') => {\n    const container = containers.find(c => c.id === containerId);\n    if (!container || container.items.length < 2) return;\n\n    const items = [...container.items];\n    const containerBounds = { width: 800, height: 600 }; // Default bounds\n\n    switch (distribution) {\n      case 'horizontal': {\n        const spacing = containerBounds.width / (items.length + 1);\n        items.forEach((item, index) => {\n          updateItem(item.id, {\n            position: snapPosition({\n              x: spacing * (index + 1),\n              y: item.position?.y || 100\n            })\n          });\n        });\n        break;\n      }\n      case 'vertical': {\n        const spacing = containerBounds.height / (items.length + 1);\n        items.forEach((item, index) => {\n          updateItem(item.id, {\n            position: snapToGridPosition({\n              x: item.position?.x || 100,\n              y: spacing * (index + 1)\n            })\n          });\n        });\n        break;\n      }\n      case 'grid': {\n        const cols = Math.ceil(Math.sqrt(items.length));\n        const cellWidth = containerBounds.width / cols;\n        const cellHeight = containerBounds.height / Math.ceil(items.length / cols);\n        \n        items.forEach((item, index) => {\n          const row = Math.floor(index / cols);\n          const col = index % cols;\n          updateItem(item.id, {\n            position: snapToGridPosition({\n              x: col * cellWidth + cellWidth / 2,\n              y: row * cellHeight + cellHeight / 2\n            })\n          });\n        });\n        break;\n      }\n    }\n    \n    toast.success('Itens distribuídos automaticamente');\n  }, [containers, updateItem, snapToGridPosition]);\n\n  const alignItems = useCallback((itemIds: string[], alignment: 'left' | 'center' | 'right' | 'top' | 'middle' | 'bottom') => {\n    if (itemIds.length < 2) return;\n\n    const items = itemIds.map(findItem).filter(Boolean) as DragDropItem[];\n    if (items.length < 2) return;\n\n    const positions = items.map(item => item.position).filter(Boolean) as { x: number; y: number }[];\n    if (positions.length < 2) return;\n\n    let targetValue: number;\n\n    switch (alignment) {\n      case 'left':\n        targetValue = Math.min(...positions.map(p => p.x));\n        items.forEach(item => {\n          if (item.position) {\n            updateItem(item.id, {\n              position: snapToGridPosition({ ...item.position, x: targetValue })\n            });\n          }\n        });\n        break;\n      case 'right':\n        targetValue = Math.max(...positions.map(p => p.x));\n        items.forEach(item => {\n          if (item.position) {\n            updateItem(item.id, {\n              position: snapToGridPosition({ ...item.position, x: targetValue })\n            });\n          }\n        });\n        break;\n      case 'center':\n        targetValue = positions.reduce((sum, p) => sum + p.x, 0) / positions.length;\n        items.forEach(item => {\n          if (item.position) {\n            updateItem(item.id, {\n              position: snapToGridPosition({ ...item.position, x: targetValue })\n            });\n          }\n        });\n        break;\n      case 'top':\n        targetValue = Math.min(...positions.map(p => p.y));\n        items.forEach(item => {\n          if (item.position) {\n            updateItem(item.id, {\n              position: snapToGridPosition({ ...item.position, y: targetValue })\n            });\n          }\n        });\n        break;\n      case 'bottom':\n        targetValue = Math.max(...positions.map(p => p.y));\n        items.forEach(item => {\n          if (item.position) {\n            updateItem(item.id, {\n              position: snapToGridPosition({ ...item.position, y: targetValue })\n            });\n          }\n        });\n        break;\n      case 'middle':\n        targetValue = positions.reduce((sum, p) => sum + p.y, 0) / positions.length;\n        items.forEach(item => {\n          if (item.position) {\n            updateItem(item.id, {\n              position: snapToGridPosition({ ...item.position, y: targetValue })\n            });\n          }\n        });\n        break;\n    }\n    \n    toast.success('Itens alinhados');\n  }, [findItem, updateItem, snapToGridPosition]);\n\n  // Settings\n  const toggleSnapToGrid = useCallback(() => {\n    setSnapToGrid(prev => !prev);\n  }, []);\n\n  const setGridSize = useCallback((size: number) => {\n    setGridSizeState(Math.max(5, Math.min(50, size)));\n  }, []);\n\n  const toggleGrid = useCallback(() => {\n    setShowGrid(prev => !prev);\n  }, []);\n\n  const toggleMultiSelect = useCallback(() => {\n    setIsMultiSelectMode(prev => !prev);\n    if (isMultiSelectMode) {\n      clearSelection();\n    }\n  }, [isMultiSelectMode, clearSelection]);\n\n  // Data management\n  const exportData = useCallback(() => {\n    return {\n      containers,\n      settings: {\n        snapToGrid,\n        gridSize,\n        showGrid\n      },\n      timestamp: new Date().toISOString()\n    };\n  }, [containers, snapToGrid, gridSize, showGrid]);\n\n  const importData = useCallback((data: { containers?: DragDropContainer[]; settings?: { snapToGrid?: boolean; gridSize?: number; showGrid?: boolean } }) => {\n    try {\n      if (data.containers) {\n        setContainers(data.containers);\n      }\n      if (data.settings) {\n        setSnapToGrid(data.settings.snapToGrid ?? true);\n        setGridSizeState(data.settings.gridSize ?? 20);\n        setShowGrid(data.settings.showGrid ?? true);\n      }\n      clearSelection();\n      toast.success('Dados importados com sucesso');\n    } catch (error) {\n      onError?.('Erro ao importar dados');\n      toast.error('Erro ao importar dados');\n    }\n  }, [clearSelection, onError]);\n\n  const resetAll = useCallback(() => {\n    setContainers([]);\n    clearSelection();\n    setSnapToGrid(true);\n    setGridSizeState(20);\n    setShowGrid(true);\n    setIsMultiSelectMode(false);\n    toast.success('Tudo resetado');\n  }, [clearSelection]);\n\n  // Drag and drop handlers\n  const handleDragStart = useCallback((event: DragStartEvent) => {\n    const { active } = event;\n    const item = findItem(active.id as string);\n    \n    if (item) {\n      setActiveItem(item);\n      setDraggedItem(item);\n      \n      // If dragging a non-selected item, select it\n      if (!selectedItems.includes(item.id)) {\n        selectItem(item.id);\n      }\n    }\n  }, [findItem, selectedItems, selectItem]);\n\n  const handleDragOver = useCallback((event: DragOverEvent) => {\n    const { over } = event;\n    const overId = over?.id;\n    \n    if (overId) {\n      lastOverContainer.current = overId as string;\n    }\n  }, []);\n\n  const handleDragEnd = useCallback((event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    setActiveItem(null);\n    setDraggedItem(null);\n    \n    if (!over) return;\n    \n    const activeId = active.id as string;\n    const overId = over.id as string;\n    \n    const activeContainer = findContainer(activeId);\n    const overContainer = containers.find(c => c.id === overId) || findContainer(overId);\n    \n    if (!activeContainer || !overContainer) return;\n    \n    if (activeContainer.id !== overContainer.id) {\n      moveItem(activeId, activeContainer.id, overContainer.id);\n    } else {\n      // Reorder within same container\n      const activeIndex = activeContainer.items.findIndex(item => item.id === activeId);\n      const overIndex = activeContainer.items.findIndex(item => item.id === overId);\n      \n      if (activeIndex !== overIndex) {\n        const newItems = arrayMove(activeContainer.items, activeIndex, overIndex);\n        updateContainer(activeContainer.id, { items: newItems });\n      }\n    }\n  }, [containers, findContainer, moveItem, updateContainer]);\n\n  const contextValue: DragDropContextType = {\n    // State\n    containers,\n    activeItem,\n    selectedItems,\n    draggedItem,\n    isMultiSelectMode,\n    snapToGrid,\n    gridSize,\n    showGrid,\n    \n    // Actions\n    addContainer,\n    removeContainer,\n    updateContainer,\n    \n    addItem,\n    removeItem,\n    updateItem,\n    moveItem,\n    \n    selectItem,\n    selectMultiple,\n    clearSelection,\n    \n    duplicateItems,\n    deleteItems,\n    groupItems,\n    ungroupItems,\n    \n    distributeItems,\n    alignItems,\n    \n    toggleSnapToGrid,\n    setGridSize,\n    toggleGrid,\n    toggleMultiSelect,\n    \n    exportData,\n    importData,\n    resetAll\n  };\n\n  return (\n    <DragDropContext.Provider value={contextValue}>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragStart={handleDragStart}\n        onDragOver={handleDragOver}\n        onDragEnd={handleDragEnd}\n        modifiers={[restrictToWindowEdges]}\n      >\n        {children}\n        <DragOverlay>\n          {draggedItem && (\n            <div className=\"bg-blue-100 border-2 border-blue-300 rounded-lg p-3 shadow-lg opacity-90\">\n              <div className=\"text-sm font-medium text-blue-800\">\n                {draggedItem.type}\n              </div>\n              {selectedItems.length > 1 && (\n                <div className=\"text-xs text-blue-600 mt-1\">\n                  +{selectedItems.length - 1} outros itens\n                </div>\n              )}\n            </div>\n          )}\n        </DragOverlay>\n      </DndContext>\n    </DragDropContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\DragDropToolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\dragDropUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\DragDropAdvanced\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\EquipmentManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\EquipmentManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ExcelImporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ExcelImporterV2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ExcelImporterV3.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ExcelImporterV4.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'debouncedValidateData'. Either include it or remove the dependency array.","line":313,"column":6,"nodeType":"ArrayExpression","endLine":313,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [batchSize, debouncedValidateData, toast]","fix":{"range":[10534,10566],"text":"[batchSize, debouncedValidateData, toast]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'debouncedValidateData'. Either include it or remove the dependency array.","line":355,"column":6,"nodeType":"ArrayExpression","endLine":355,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [debouncedValidateData, history, historyIndex]","fix":{"range":[11891,11928],"text":"[debouncedValidateData, history, historyIndex]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { createClient } from '@/utils/supabase/client';\nimport { useDropzone } from 'react-dropzone';\nimport * as XLSX from 'xlsx';\nimport { z } from 'zod';\nimport {\n  Upload,\n  FileSpreadsheet,\n  CheckCircle2,\n  AlertCircle,\n  Download,\n  Plus,\n  Trash2,\n  Copy,\n  Undo,\n  Redo,\n  Filter,\n  Search,\n  Settings,\n  Eye,\n  EyeOff,\n  RotateCcw,\n  Save\n} from 'lucide-react';\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getSortedRowModel,\n  getFilteredRowModel,\n  flexRender,\n  createColumnHelper,\n  SortingState,\n  ColumnFiltersState\n} from '@tanstack/react-table';\nimport { debounce } from 'lodash';\n\n// Schemas de validação otimizados\nconst FinancialKitSchema = z.object({\n  name: z.string().min(1, 'Nome é obrigatório').max(100, 'Nome muito longo'),\n  email: z.string().email('Email inválido').optional().or(z.literal('')),\n  phone: z.string().min(10, 'Telefone deve ter pelo menos 10 dígitos').optional().or(z.literal('')),\n  cpfCnpj: z.string().min(11, 'CPF/CNPJ inválido').optional().or(z.literal('')),\n  address: z.string().max(200, 'Endereço muito longo').optional().or(z.literal('')),\n  consumoMedio: z.number().min(0, 'Consumo deve ser positivo').max(10000, 'Consumo muito alto'),\n  concessionaria: z.string().max(50, 'Nome da concessionária muito longo').optional().or(z.literal('')),\n  tipoFornecimento: z.enum(['monofasico', 'bifasico', 'trifasico']).optional(),\n  grupo: z.enum(['B1', 'B2', 'B3', 'B4']).optional()\n});\n\nconst SolarModuleSchema = z.object({\n  name: z.string().min(1, 'Nome é obrigatório').max(100, 'Nome muito longo'),\n  manufacturer: z.string().min(1, 'Fabricante é obrigatório').max(50, 'Nome do fabricante muito longo'),\n  power: z.number().min(1, 'Potência deve ser positiva').max(1000, 'Potência muito alta'),\n  efficiency: z.number().min(0.1, 'Eficiência muito baixa').max(0.3, 'Eficiência muito alta'),\n  voltage: z.number().min(1, 'Voltagem deve ser positiva').max(100, 'Voltagem muito alta'),\n  current: z.number().min(0.1, 'Corrente deve ser positiva').max(20, 'Corrente muito alta'),\n  price: z.number().min(0, 'Preço deve ser positivo').max(10000, 'Preço muito alto')\n});\n\ntype DataTemplate = 'financial_kits' | 'solar_modules' | 'custom';\n\ninterface ValidationError {\n  row: number;\n  column: string;\n  message: string;\n  severity: 'error' | 'warning';\n  value?: unknown;\n}\n\ninterface GridData {\n  id: string;\n  [key: string]: unknown;\n}\n\ninterface ExcelImporterV4Props {\n  onDataImported: (data: unknown[]) => void;\n  template?: DataTemplate;\n  maxFileSize?: number;\n  allowedFileTypes?: string[];\n  batchSize?: number;\n}\n\nconst ExcelImporterV4: React.FC<ExcelImporterV4Props> = ({\n  onDataImported,\n  template = 'financial_kits',\n  maxFileSize = 10 * 1024 * 1024, // 10MB\n  allowedFileTypes = ['.xlsx', '.xls', '.csv'],\n  batchSize = 1000\n}) => {\n  const { toast } = useToast();\n  const supabase = createClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // Estados principais\n  const [currentTab, setCurrentTab] = useState('upload');\n  const [isLoading, setIsLoading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [selectedTemplate, setSelectedTemplate] = useState<DataTemplate>(template);\n  \n  // Estados do grid com otimização de performance\n  const [gridData, setGridData] = useState<GridData[]>([]);\n  const [originalData, setOriginalData] = useState<GridData[]>([]);\n  const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);\n  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set());\n  \n  // Estados de filtro e busca\n  const [globalFilter, setGlobalFilter] = useState('');\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  const [sorting, setSorting] = useState<SortingState>([]);\n  const [hiddenColumns, setHiddenColumns] = useState<Set<string>>(new Set());\n  \n  // Estados de histórico (undo/redo)\n  const [history, setHistory] = useState<GridData[][]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  \n  // Memoização do schema de validação\n  const validationSchema = useMemo(() => {\n    switch (selectedTemplate) {\n      case 'financial_kits':\n        return FinancialKitSchema;\n      case 'solar_modules':\n        return SolarModuleSchema;\n      default:\n        return z.object({}).passthrough();\n    }\n  }, [selectedTemplate]);\n  \n  // Templates de dados\n  const dataTemplates = useMemo(() => ({\n    financial_kits: {\n      name: 'Kits Financeiros',\n      description: 'Dados de clientes e consumo energético',\n      columns: ['name', 'email', 'phone', 'cpfCnpj', 'address', 'consumoMedio', 'concessionaria', 'tipoFornecimento', 'grupo'],\n      sampleData: {\n        name: 'João Silva',\n        email: 'joao@email.com',\n        phone: '11999999999',\n        cpfCnpj: '12345678901',\n        address: 'Rua das Flores, 123',\n        consumoMedio: 350,\n        concessionaria: 'CPFL',\n        tipoFornecimento: 'bifasico',\n        grupo: 'B1'\n      }\n    },\n    solar_modules: {\n      name: 'Módulos Solares',\n      description: 'Especificações técnicas de módulos fotovoltaicos',\n      columns: ['name', 'manufacturer', 'power', 'efficiency', 'voltage', 'current', 'price'],\n      sampleData: {\n        name: 'Módulo 550W',\n        manufacturer: 'Canadian Solar',\n        power: 550,\n        efficiency: 0.21,\n        voltage: 41.2,\n        current: 13.35,\n        price: 850\n      }\n    },\n    custom: {\n      name: 'Personalizado',\n      description: 'Template customizável para qualquer tipo de dado',\n      columns: [],\n      sampleData: {}\n    }\n  }), []);\n  \n  // Função de validação otimizada com debounce\n  const validateData = useCallback((data: GridData[]) => {\n    const errors: ValidationError[] = [];\n    \n    data.forEach((row, index) => {\n      try {\n        validationSchema.parse(row);\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          error.errors.forEach(err => {\n            errors.push({\n              row: index + 1,\n              column: err.path.join('.'),\n              message: err.message,\n              severity: 'error',\n              value: err.path.reduce((obj, key) => obj?.[key], row)\n            });\n          });\n        }\n      }\n      \n      // Validações customizadas\n      if (selectedTemplate === 'financial_kits') {\n        if (row.email && !row.email.includes('@')) {\n          errors.push({\n            row: index + 1,\n            column: 'email',\n            message: 'Email deve conter @',\n            severity: 'warning',\n            value: row.email\n          });\n        }\n      }\n    });\n    \n    setValidationErrors(errors);\n  }, [validationSchema, selectedTemplate]);\n  \n  // Versão com debounce da função de validação\n  const debouncedValidateData = useMemo(\n    () => debounce(validateData, 300),\n    [validateData]\n  );\n  \n  // Função para processar arquivo com otimização de performance\n  const processFile = useCallback(async (file: File) => {\n    setIsLoading(true);\n    setUploadProgress(0);\n    \n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      setUploadProgress(30);\n      \n      let data: unknown[][];\n      \n      if (file.name.endsWith('.csv')) {\n        const text = new TextDecoder().decode(arrayBuffer);\n        const lines = text.split('\\n').filter(line => line.trim());\n        data = lines.map(line => line.split(',').map(cell => cell.trim().replace(/^\"|\"$/g, '')));\n      } else {\n        const workbook = XLSX.read(arrayBuffer, { type: 'array' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' });\n      }\n      \n      setUploadProgress(60);\n      \n      if (data.length === 0) {\n        throw new Error('Arquivo vazio ou formato inválido');\n      }\n      \n      // Processar dados em lotes para melhor performance\n      const headers = data[0] as string[];\n      const rows = data.slice(1);\n      \n      const processedData: GridData[] = [];\n      const batchCount = Math.ceil(rows.length / batchSize);\n      \n      for (let i = 0; i < batchCount; i++) {\n        const batchStart = i * batchSize;\n        const batchEnd = Math.min(batchStart + batchSize, rows.length);\n        const batch = rows.slice(batchStart, batchEnd);\n        \n        const batchProcessed = batch.map((row, index) => {\n          const rowData: GridData = {\n            id: `row-${batchStart + index + 1}`,\n          };\n          \n          headers.forEach((header, colIndex) => {\n            const value = row[colIndex];\n            rowData[header] = value;\n          });\n          \n          return rowData;\n        });\n        \n        processedData.push(...batchProcessed);\n        setUploadProgress(60 + (i + 1) / batchCount * 30);\n        \n        // Permitir que a UI atualize entre lotes\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n      \n      setGridData(processedData);\n      setOriginalData([...processedData]);\n      \n      // Adicionar ao histórico\n      setHistory([processedData]);\n      setHistoryIndex(0);\n      \n      setUploadProgress(100);\n      setCurrentTab('edit');\n      \n      // Validar dados após processamento\n      debouncedValidateData(processedData);\n      \n      toast({\n        title: 'Arquivo processado com sucesso',\n        description: `${processedData.length} registros carregados`,\n      });\n      \n    } catch (error) {\n      console.error('Erro ao processar arquivo:', error);\n      toast({\n        title: 'Erro ao processar arquivo',\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n      setUploadProgress(0);\n    }\n  }, [batchSize, validateData, toast]);\n  \n  // Configuração do dropzone\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (acceptedFiles) => {\n      if (acceptedFiles.length > 0) {\n        processFile(acceptedFiles[0]);\n      }\n    },\n    accept: {\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\n      'application/vnd.ms-excel': ['.xls'],\n      'text/csv': ['.csv']\n    },\n    maxSize: maxFileSize,\n    multiple: false\n  });\n  \n  // Funções de manipulação do histórico\n  const saveToHistory = useCallback((newData: GridData[]) => {\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push([...newData]);\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }, [history, historyIndex]);\n  \n  const undo = useCallback(() => {\n    if (historyIndex > 0) {\n      const previousData = history[historyIndex - 1];\n      setGridData([...previousData]);\n      setHistoryIndex(historyIndex - 1);\n      debouncedValidateData(previousData);\n    }\n  }, [history, historyIndex, debouncedValidateData]);\n  \n  const redo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      const nextData = history[historyIndex + 1];\n      setGridData([...nextData]);\n      setHistoryIndex(historyIndex + 1);\n      debouncedValidateData(nextData);\n    }\n  }, [history, historyIndex, validateData]);\n  \n  // Funções de manipulação de dados\n  const updateCellValue = useCallback((rowId: string, columnId: string, value: unknown) => {\n    const newData = gridData.map(row => \n      row.id === rowId ? { ...row, [columnId]: value } : row\n    );\n    setGridData(newData);\n    saveToHistory(newData);\n    debouncedValidateData(newData);\n  }, [gridData, saveToHistory, debouncedValidateData]);\n  \n  const addNewRow = useCallback(() => {\n    const newRow: GridData = {\n      id: `row-${Date.now()}`,\n      ...dataTemplates[selectedTemplate].sampleData\n    };\n    const newData = [...gridData, newRow];\n    setGridData(newData);\n    saveToHistory(newData);\n  }, [gridData, selectedTemplate, dataTemplates, saveToHistory]);\n  \n  const removeSelectedRows = useCallback(() => {\n    const newData = gridData.filter(row => !selectedRows.has(row.id));\n    setGridData(newData);\n    setSelectedRows(new Set());\n    saveToHistory(newData);\n    validateData(newData);\n  }, [gridData, selectedRows, saveToHistory, validateData]);\n  \n  const duplicateSelectedRows = useCallback(() => {\n    const rowsToDuplicate = gridData.filter(row => selectedRows.has(row.id));\n    const duplicatedRows = rowsToDuplicate.map(row => ({\n      ...row,\n      id: `row-${Date.now()}-${Math.random()}`\n    }));\n    const newData = [...gridData, ...duplicatedRows];\n    setGridData(newData);\n    setSelectedRows(new Set());\n    saveToHistory(newData);\n  }, [gridData, selectedRows, saveToHistory]);\n  \n  // Função de exportação\n  const exportData = useCallback((format: 'csv' | 'xlsx') => {\n    const dataToExport = gridData.map(row => {\n      const { id, ...data } = row;\n      return data;\n    });\n    \n    if (format === 'csv') {\n      const headers = Object.keys(dataToExport[0] || {});\n      const csvContent = [\n        headers.join(','),\n        ...dataToExport.map(row => headers.map(header => `\"${row[header] || ''}\"`).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `export-${Date.now()}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n    } else {\n      const ws = XLSX.utils.json_to_sheet(dataToExport);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Dados');\n      XLSX.writeFile(wb, `export-${Date.now()}.xlsx`);\n    }\n  }, [gridData]);\n  \n  // Função de finalização\n  const finalizeImport = useCallback(async () => {\n    const errorCount = validationErrors.filter(e => e.severity === 'error').length;\n    if (errorCount > 0) {\n      toast({\n        title: 'Existem erros de validação',\n        description: `Corrija os ${errorCount} erro(s) antes de importar`,\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    try {\n      const dataToImport = gridData.map(row => {\n        const { id, ...data } = row;\n        return data;\n      });\n      \n      await onDataImported(dataToImport);\n      \n      toast({\n        title: 'Dados importados com sucesso',\n        description: `${dataToImport.length} registros foram importados`,\n      });\n      \n      // Reset do componente\n      setGridData([]);\n      setOriginalData([]);\n      setValidationErrors([]);\n      setSelectedRows(new Set());\n      setHistory([]);\n      setHistoryIndex(-1);\n      setCurrentTab('upload');\n      \n    } catch (error) {\n      console.error('Erro ao importar dados:', error);\n      toast({\n        title: 'Erro ao importar dados',\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [gridData, validationErrors, onDataImported, toast]);\n  \n  // Configuração das colunas da tabela\n  const columns = useMemo(() => {\n    if (gridData.length === 0) return [];\n    \n    const columnHelper = createColumnHelper<GridData>();\n    const dataKeys = Object.keys(gridData[0]).filter(key => key !== 'id');\n    \n    return dataKeys.map(key => \n      columnHelper.accessor(key, {\n        header: key,\n        cell: ({ getValue, row, column }) => {\n          const value = getValue();\n          return (\n            <Input\n              value={value || ''}\n              onChange={(e) => updateCellValue(row.original.id, column.id, e.target.value)}\n              className=\"border-0 p-1 h-8 text-sm\"\n            />\n          );\n        },\n      })\n    );\n  }, [gridData, updateCellValue]);\n  \n  // Configuração da tabela\n  const table = useReactTable({\n    data: gridData,\n    columns,\n    state: {\n      sorting,\n      columnFilters,\n      globalFilter,\n    },\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onGlobalFilterChange: setGlobalFilter,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n  });\n  \n  return (\n    <Card className=\"w-full max-w-6xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileSpreadsheet className=\"h-5 w-5\" />\n          Importador Excel V4 - Otimizado\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={currentTab} onValueChange={setCurrentTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"upload\">Upload</TabsTrigger>\n            <TabsTrigger value=\"edit\" disabled={gridData.length === 0}>Editar</TabsTrigger>\n            <TabsTrigger value=\"validate\" disabled={gridData.length === 0}>Validar</TabsTrigger>\n            <TabsTrigger value=\"import\" disabled={gridData.length === 0}>Importar</TabsTrigger>\n          </TabsList>\n          \n          {/* Tab de Upload */}\n          <TabsContent value=\"upload\" className=\"space-y-4\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Template de Dados</Label>\n                <Select value={selectedTemplate} onValueChange={(value: DataTemplate) => setSelectedTemplate(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(dataTemplates).map(([key, template]) => (\n                      <SelectItem key={key} value={key}>\n                        {template.name} - {template.description}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div\n                {...getRootProps()}\n                className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n                  isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'\n                }`}\n              >\n                <input {...getInputProps()} ref={fileInputRef} />\n                <Upload className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                <p className=\"text-lg font-medium mb-2\">\n                  {isDragActive ? 'Solte o arquivo aqui' : 'Arraste um arquivo ou clique para selecionar'}\n                </p>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Formatos suportados: {allowedFileTypes.join(', ')} (máx. {Math.round(maxFileSize / 1024 / 1024)}MB)\n                </p>\n                \n                {isLoading && (\n                  <div className=\"space-y-2\">\n                    <Progress value={uploadProgress} className=\"w-full\" />\n                    <p className=\"text-sm text-gray-600\">Processando arquivo... {uploadProgress}%</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n          \n          {/* Tab de Edição */}\n          <TabsContent value=\"edit\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={undo}\n                  disabled={historyIndex <= 0}\n                >\n                  <Undo className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={redo}\n                  disabled={historyIndex >= history.length - 1}\n                >\n                  <Redo className=\"h-4 w-4\" />\n                </Button>\n                <Separator orientation=\"vertical\" className=\"h-6\" />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addNewRow}\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Adicionar\n                </Button>\n                {selectedRows.size > 0 && (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={duplicateSelectedRows}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                      Duplicar ({selectedRows.size})\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={removeSelectedRows}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                      Remover ({selectedRows.size})\n                    </Button>\n                  </>\n                )}\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Search className=\"h-4 w-4\" />\n                  <Input\n                    placeholder=\"Buscar...\"\n                    value={globalFilter}\n                    onChange={(e) => setGlobalFilter(e.target.value)}\n                    className=\"w-48\"\n                  />\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => exportData('csv')}\n                >\n                  <Download className=\"h-4 w-4\" />\n                  CSV\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => exportData('xlsx')}\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Excel\n                </Button>\n              </div>\n            </div>\n            \n            {gridData.length > 0 && (\n              <div className=\"border rounded-lg overflow-auto max-h-96\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50 sticky top-0\">\n                    {table.getHeaderGroups().map(headerGroup => (\n                      <tr key={headerGroup.id}>\n                        <th className=\"p-2 text-left w-12\">\n                          <Checkbox\n                            checked={selectedRows.size === gridData.length && gridData.length > 0}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setSelectedRows(new Set(gridData.map(row => row.id)));\n                              } else {\n                                setSelectedRows(new Set());\n                              }\n                            }}\n                          />\n                        </th>\n                        {headerGroup.headers.map(header => (\n                          <th key={header.id} className=\"p-2 text-left min-w-32\">\n                            <div\n                              className=\"flex items-center gap-1 cursor-pointer select-none\"\n                              onClick={header.column.getToggleSortingHandler()}\n                            >\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                              <div className=\"ml-auto\">\n                                {{\n                                  asc: '↑',\n                                  desc: '↓'\n                                }[header.column.getIsSorted() as string] ?? '↕'}\n                              </div>\n                            </div>\n                          </th>\n                        ))}\n                      </tr>\n                    ))}\n                  </thead>\n                  <tbody>\n                    {table.getRowModel().rows.map(row => (\n                      <tr key={row.id} className=\"border-t hover:bg-gray-50\">\n                        <td className=\"p-2\">\n                          <Checkbox\n                            checked={selectedRows.has(row.original.id)}\n                            onCheckedChange={(checked) => {\n                              const newSelected = new Set(selectedRows);\n                              if (checked) {\n                                newSelected.add(row.original.id);\n                              } else {\n                                newSelected.delete(row.original.id);\n                              }\n                              setSelectedRows(newSelected);\n                            }}\n                          />\n                        </td>\n                        {row.getVisibleCells().map(cell => (\n                          <td key={cell.id} className=\"p-1\">\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          </td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n            \n            <div className=\"text-sm text-gray-500\">\n              {gridData.length} registro(s) | {selectedRows.size} selecionado(s)\n            </div>\n          </TabsContent>\n          \n          {/* Tab de Validação */}\n          <TabsContent value=\"validate\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Validação de Dados</h3>\n              <Button onClick={() => validateData(gridData)} variant=\"outline\">\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Revalidar\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {gridData.length - validationErrors.filter(e => e.severity === 'error').length}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Registros válidos</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {validationErrors.filter(e => e.severity === 'error').length}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Erros críticos</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {validationErrors.filter(e => e.severity === 'warning').length}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Avisos</div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {validationErrors.length === 0 ? (\n              <Alert>\n                <CheckCircle2 className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Todos os dados estão válidos e prontos para importação.\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <div className=\"space-y-2\">\n                <div className=\"max-h-64 overflow-auto border rounded-lg\">\n                  {validationErrors.map((error, index) => (\n                    <div key={index} className=\"p-3 border-b last:border-b-0 hover:bg-gray-50\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={error.severity === 'error' ? 'destructive' : 'secondary'}>\n                            {error.severity === 'error' ? 'Erro' : 'Aviso'}\n                          </Badge>\n                          <span className=\"text-sm font-medium\">\n                            Linha {error.row}, Coluna {error.column}\n                          </span>\n                        </div>\n                        {error.value && (\n                          <code className=\"text-xs bg-gray-100 px-2 py-1 rounded\">\n                            {String(error.value)}\n                          </code>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600 mt-1\">{error.message}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </TabsContent>\n          \n          {/* Tab de Importação */}\n          <TabsContent value=\"import\" className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Finalizar Importação</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold\">{gridData.length}</div>\n                  <div className=\"text-sm text-gray-500\">Registros para importar</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-red-500\">\n                    {validationErrors.filter(e => e.severity === 'error').length}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Erros críticos</div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {validationErrors.filter(e => e.severity === 'error').length > 0 && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Existem erros críticos que devem ser corrigidos antes da importação.\n                  Volte para a aba \"Validar\" para ver os detalhes.\n                </AlertDescription>\n              </Alert>\n            )}\n            \n            <Button\n              onClick={finalizeImport}\n              disabled={isLoading || validationErrors.filter(e => e.severity === 'error').length > 0}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Importando...\n                </>\n              ) : (\n                <>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Finalizar Importação\n                </>\n              )}\n            </Button>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ExcelImporterV4;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\FinancialAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\FinancialCalculator.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInstitutions'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [user, profile, loadInstitutions]","fix":{"range":[2696,2711],"text":"[user, profile, loadInstitutions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Calculator, DollarSign, TrendingUp, Calendar, Building2, Star, Info, Download, FileText } from 'lucide-react';\nimport { FinancialInstitution } from './InstitutionManager';\n\ninterface FinancingCalculation {\n  institution: FinancialInstitution;\n  principal: number;\n  interestRate: number;\n  termMonths: number;\n  monthlyPayment: number;\n  totalPayment: number;\n  totalInterest: number;\n  paymentSchedule: PaymentScheduleItem[];\n}\n\ninterface PaymentScheduleItem {\n  month: number;\n  payment: number;\n  principal: number;\n  interest: number;\n  balance: number;\n}\n\ninterface CalculatorInputs {\n  projectValue: number;\n  downPayment: number;\n  termMonths: number;\n  selectedInstitutions: string[];\n}\n\nconst FinancialCalculator: React.FC = () => {\n  const { user, profile } = useAuth();\n  const { toast } = useToast();\n  const [institutions, setInstitutions] = useState<FinancialInstitution[]>([]);\n  const [calculations, setCalculations] = useState<FinancingCalculation[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [inputs, setInputs] = useState<CalculatorInputs>({\n    projectValue: 0,\n    downPayment: 0,\n    termMonths: 120,\n    selectedInstitutions: []\n  });\n\n  // Load institutions\n  const loadInstitutions = async () => {\n    if (!user || !profile?.empresa_id) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('instituicoes_financeiras')\n        .select('*')\n        .eq('empresa_id', profile.empresa_id)\n        .eq('ativo', true)\n        .order('favorito', { ascending: false })\n        .order('nome');\n\n      if (error) throw error;\n\n      setInstitutions(data || []);\n    } catch (error: unknown) {\n      toast({\n        title: 'Erro ao carregar instituições',\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadInstitutions();\n  }, [user, profile]);\n\n  // Calculate PMT (monthly payment)\n  const calculatePMT = (principal: number, rate: number, nper: number): number => {\n    if (rate === 0) return principal / nper;\n    const monthlyRate = rate / 100 / 12;\n    return principal * (monthlyRate * Math.pow(1 + monthlyRate, nper)) / (Math.pow(1 + monthlyRate, nper) - 1);\n  };\n\n  // Generate payment schedule\n  const generatePaymentSchedule = (principal: number, rate: number, nper: number): PaymentScheduleItem[] => {\n    const monthlyRate = rate / 100 / 12;\n    const monthlyPayment = calculatePMT(principal, rate, nper);\n    const schedule: PaymentScheduleItem[] = [];\n    let balance = principal;\n\n    for (let month = 1; month <= nper; month++) {\n      const interestPayment = balance * monthlyRate;\n      const principalPayment = monthlyPayment - interestPayment;\n      balance -= principalPayment;\n\n      schedule.push({\n        month,\n        payment: monthlyPayment,\n        principal: principalPayment,\n        interest: interestPayment,\n        balance: Math.max(0, balance)\n      });\n    }\n\n    return schedule;\n  };\n\n  // Calculate financing options\n  const calculateFinancing = () => {\n    if (!inputs.projectValue || inputs.projectValue <= 0) {\n      toast({\n        title: 'Valor do projeto obrigatório',\n        description: 'Informe o valor total do projeto.',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    if (inputs.selectedInstitutions.length === 0) {\n      toast({\n        title: 'Selecione instituições',\n        description: 'Selecione pelo menos uma instituição para calcular.',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const financingAmount = inputs.projectValue - inputs.downPayment;\n      const newCalculations: FinancingCalculation[] = [];\n\n      inputs.selectedInstitutions.forEach(institutionId => {\n        const institution = institutions.find(inst => inst.id === institutionId);\n        if (!institution) return;\n\n        // Check if financing amount is within institution limits\n        if (institution.valor_min_financiamento && financingAmount < institution.valor_min_financiamento) {\n          return;\n        }\n        if (institution.valor_max_financiamento && financingAmount > institution.valor_max_financiamento) {\n          return;\n        }\n\n        // Check if term is within institution limits\n        if (institution.prazo_min_meses && inputs.termMonths < institution.prazo_min_meses) {\n          return;\n        }\n        if (institution.prazo_max_meses && inputs.termMonths > institution.prazo_max_meses) {\n          return;\n        }\n\n        // Calculate with minimum and maximum rates\n        const rates = [];\n        if (institution.taxa_juros_min) rates.push(institution.taxa_juros_min);\n        if (institution.taxa_juros_max && institution.taxa_juros_max !== institution.taxa_juros_min) {\n          rates.push(institution.taxa_juros_max);\n        }\n        if (rates.length === 0) rates.push(2.5); // Default rate\n\n        rates.forEach(rate => {\n          const monthlyPayment = calculatePMT(financingAmount, rate, inputs.termMonths);\n          const totalPayment = monthlyPayment * inputs.termMonths;\n          const totalInterest = totalPayment - financingAmount;\n          const paymentSchedule = generatePaymentSchedule(financingAmount, rate, inputs.termMonths);\n\n          newCalculations.push({\n            institution,\n            principal: financingAmount,\n            interestRate: rate,\n            termMonths: inputs.termMonths,\n            monthlyPayment,\n            totalPayment,\n            totalInterest,\n            paymentSchedule\n          });\n        });\n      });\n\n      // Sort by monthly payment\n      newCalculations.sort((a, b) => a.monthlyPayment - b.monthlyPayment);\n      setCalculations(newCalculations);\n\n      if (newCalculations.length === 0) {\n        toast({\n          title: 'Nenhuma opção disponível',\n          description: 'Nenhuma instituição atende aos critérios informados.',\n          variant: 'destructive'\n        });\n      }\n    } catch (error: unknown) {\n      toast({\n        title: 'Erro no cálculo',\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Export calculation to PDF\n  const exportToPDF = (calculation: FinancingCalculation) => {\n    // Implementation for PDF export\n    toast({\n      title: 'Exportação em desenvolvimento',\n      description: 'A funcionalidade de exportação será implementada em breve.',\n    });\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const getInstitutionBadgeColor = (type: string) => {\n    const colors = {\n      banco: 'bg-blue-100 text-blue-800',\n      financeira: 'bg-green-100 text-green-800',\n      cooperativa: 'bg-purple-100 text-purple-800',\n      fintech: 'bg-orange-100 text-orange-800'\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight flex items-center gap-2\">\n            <Calculator className=\"h-6 w-6\" />\n            Calculadora Financeira\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Simule financiamentos com diferentes instituições financeiras\n          </p>\n        </div>\n      </div>\n\n      {/* Input Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            Dados do Financiamento\n          </CardTitle>\n          <CardDescription>\n            Informe os dados do projeto para calcular as opções de financiamento\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectValue\">Valor Total do Projeto (R$)</Label>\n              <Input\n                id=\"projectValue\"\n                type=\"number\"\n                step=\"0.01\"\n                value={inputs.projectValue}\n                onChange={(e) => setInputs(prev => ({ ...prev, projectValue: parseFloat(e.target.value) || 0 }))}\n                placeholder=\"150000.00\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"downPayment\">Entrada (R$)</Label>\n              <Input\n                id=\"downPayment\"\n                type=\"number\"\n                step=\"0.01\"\n                value={inputs.downPayment}\n                onChange={(e) => setInputs(prev => ({ ...prev, downPayment: parseFloat(e.target.value) || 0 }))}\n                placeholder=\"30000.00\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"termMonths\">Prazo (meses)</Label>\n              <Input\n                id=\"termMonths\"\n                type=\"number\"\n                value={inputs.termMonths}\n                onChange={(e) => setInputs(prev => ({ ...prev, termMonths: parseInt(e.target.value) || 120 }))}\n                placeholder=\"120\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Instituições para Comparar</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\n              {institutions.map(institution => (\n                <div key={institution.id} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id={`inst-${institution.id}`}\n                    checked={inputs.selectedInstitutions.includes(institution.id)}\n                    onChange={(e) => {\n                      if (e.target.checked) {\n                        setInputs(prev => ({\n                          ...prev,\n                          selectedInstitutions: [...prev.selectedInstitutions, institution.id]\n                        }));\n                      } else {\n                        setInputs(prev => ({\n                          ...prev,\n                          selectedInstitutions: prev.selectedInstitutions.filter(id => id !== institution.id)\n                        }));\n                      }\n                    }}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <label htmlFor={`inst-${institution.id}`} className=\"flex items-center gap-2 text-sm\">\n                    {institution.nome}\n                    {institution.favorito && <Star className=\"h-3 w-3 text-yellow-500 fill-current\" />}\n                    <Badge className={getInstitutionBadgeColor(institution.tipo)} variant=\"secondary\">\n                      {institution.tipo}\n                    </Badge>\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center pt-4\">\n            <div className=\"text-sm text-muted-foreground\">\n              Valor a Financiar: <strong>{formatCurrency(inputs.projectValue - inputs.downPayment)}</strong>\n            </div>\n            <Button onClick={calculateFinancing} disabled={isLoading}>\n              {isLoading ? 'Calculando...' : 'Calcular Financiamento'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      {calculations.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Opções de Financiamento ({calculations.length})\n            </CardTitle>\n            <CardDescription>\n              Comparação das melhores opções disponíveis\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"comparison\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"comparison\">Comparação</TabsTrigger>\n                <TabsTrigger value=\"details\">Detalhes</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"comparison\" className=\"space-y-4\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Instituição</TableHead>\n                        <TableHead>Taxa (%)</TableHead>\n                        <TableHead>Parcela Mensal</TableHead>\n                        <TableHead>Total a Pagar</TableHead>\n                        <TableHead>Total de Juros</TableHead>\n                        <TableHead>Aprovação</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {calculations.map((calc, index) => (\n                        <TableRow key={`${calc.institution.id}-${calc.interestRate}`}>\n                          <TableCell>\n                            <div className=\"flex items-center gap-2\">\n                              <div>\n                                <div className=\"font-medium flex items-center gap-2\">\n                                  {calc.institution.nome}\n                                  {calc.institution.favorito && (\n                                    <Star className=\"h-3 w-3 text-yellow-500 fill-current\" />\n                                  )}\n                                </div>\n                                <Badge className={getInstitutionBadgeColor(calc.institution.tipo)} variant=\"secondary\">\n                                  {calc.institution.tipo}\n                                </Badge>\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">{calc.interestRate.toFixed(2)}%</div>\n                            <div className=\"text-xs text-muted-foreground\">ao ano</div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium text-green-600\">\n                              {formatCurrency(calc.monthlyPayment)}\n                            </div>\n                            {index === 0 && (\n                              <Badge variant=\"default\" className=\"text-xs mt-1\">\n                                Melhor opção\n                              </Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">{formatCurrency(calc.totalPayment)}</div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium text-red-600\">\n                              {formatCurrency(calc.totalInterest)}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {((calc.totalInterest / calc.principal) * 100).toFixed(1)}% do principal\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {calc.institution.tempo_aprovacao_dias && (\n                              <div className=\"flex items-center gap-1 text-sm\">\n                                <Calendar className=\"h-3 w-3\" />\n                                {calc.institution.tempo_aprovacao_dias} dias\n                              </div>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-1\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => exportToPDF(calc)}\n                              >\n                                <Download className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  // Show detailed info\n                                  toast({\n                                    title: calc.institution.nome,\n                                    description: `Contato: ${calc.institution.contato_principal || 'N/A'}`,\n                                  });\n                                }}\n                              >\n                                <Info className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"details\" className=\"space-y-4\">\n                {calculations.map((calc, index) => (\n                  <Card key={`${calc.institution.id}-${calc.interestRate}`}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Building2 className=\"h-5 w-5\" />\n                          {calc.institution.nome}\n                          {calc.institution.favorito && (\n                            <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                          )}\n                          <Badge className={getInstitutionBadgeColor(calc.institution.tipo)}>\n                            {calc.institution.tipo}\n                          </Badge>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-bold text-green-600\">\n                            {formatCurrency(calc.monthlyPayment)}/mês\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Taxa: {calc.interestRate.toFixed(2)}% a.a.\n                          </div>\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Valor Financiado</div>\n                          <div className=\"font-medium\">{formatCurrency(calc.principal)}</div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Total a Pagar</div>\n                          <div className=\"font-medium\">{formatCurrency(calc.totalPayment)}</div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Total de Juros</div>\n                          <div className=\"font-medium text-red-600\">{formatCurrency(calc.totalInterest)}</div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Prazo</div>\n                          <div className=\"font-medium\">{calc.termMonths} meses</div>\n                        </div>\n                      </div>\n\n                      {calc.institution.contato_principal && (\n                        <div className=\"border-t pt-4\">\n                          <div className=\"text-sm text-muted-foreground mb-2\">Informações de Contato</div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <strong>Contato:</strong> {calc.institution.contato_principal}\n                              {calc.institution.cargo_contato && (\n                                <div className=\"text-muted-foreground\">{calc.institution.cargo_contato}</div>\n                              )}\n                            </div>\n                            {calc.institution.telefone_contato && (\n                              <div>\n                                <strong>Telefone:</strong> {calc.institution.telefone_contato}\n                              </div>\n                            )}\n                            {calc.institution.email_contato && (\n                              <div>\n                                <strong>Email:</strong> {calc.institution.email_contato}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      {calc.institution.documentos_necessarios && calc.institution.documentos_necessarios.length > 0 && (\n                        <div className=\"border-t pt-4\">\n                          <div className=\"text-sm text-muted-foreground mb-2\">Documentos Necessários</div>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {calc.institution.documentos_necessarios.map((doc, docIndex) => (\n                              <Badge key={docIndex} variant=\"outline\">\n                                <FileText className=\"h-3 w-3 mr-1\" />\n                                {doc}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {calculations.length === 0 && !isLoading && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Calculator className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Nenhum cálculo realizado</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Preencha os dados do projeto e selecione as instituições para comparar opções de financiamento.\n            </p>\n            {institutions.length === 0 && (\n              <p className=\"text-sm text-muted-foreground\">\n                Você precisa cadastrar pelo menos uma instituição financeira primeiro.\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default FinancialCalculator;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\FinancialInstitutionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\FinancialInstitutionManagerV2.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInstitutions'. Either include it or remove the dependency array.","line":174,"column":6,"nodeType":"ArrayExpression","endLine":174,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadInstitutions]","fix":{"range":[5170,5172],"text":"[loadInstitutions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAndSortInstitutions'. Either include it or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":77,"suggestions":[{"desc":"Update the dependencies array to be: [institutions, searchTerm, filterType, filterStatus, sortBy, sortOrder, filterAndSortInstitutions]","fix":{"range":[5262,5333],"text":"[institutions, searchTerm, filterType, filterStatus, sortBy, sortOrder, filterAndSortInstitutions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateComparisonMetrics'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [calculateComparisonMetrics, filteredInstitutions]","fix":{"range":[5486,5508],"text":"[calculateComparisonMetrics, filteredInstitutions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { Progress } from '@/components/ui/progress';\nimport { useToast } from '@/hooks/use-toast';\nimport { createClient } from '@/utils/supabase/client';\nimport {\n  Building2,\n  Plus,\n  Search,\n  Filter,\n  Star,\n  StarOff,\n  Edit,\n  Trash2,\n  Phone,\n  Mail,\n  Globe,\n  MapPin,\n  Calculator,\n  TrendingUp,\n  TrendingDown,\n  BarChart3,\n  PieChart,\n  DollarSign,\n  Calendar,\n  CheckCircle2,\n  AlertCircle,\n  Info,\n  Download,\n  Upload,\n  RefreshCw,\n  Eye,\n  Compare,\n  Shuffle,\n  Loader2,\n  Star\n} from 'lucide-react';\n\ninterface FinancialInstitution {\n  id: string;\n  nome: string;\n  tipo: 'banco' | 'financeira' | 'cooperativa' | 'fintech';\n  cnpj?: string;\n  telefone?: string;\n  email?: string;\n  website?: string;\n  endereco?: string;\n  cidade?: string;\n  estado?: string;\n  cep?: string;\n  contato_principal?: string;\n  cargo_contato?: string;\n  telefone_contato?: string;\n  email_contato?: string;\n  observacoes?: string;\n  ativo: boolean;\n  favorito: boolean;\n  taxa_juros_min?: number;\n  taxa_juros_max?: number;\n  prazo_min_meses?: number;\n  prazo_max_meses?: number;\n  valor_min_financiamento?: number;\n  valor_max_financiamento?: number;\n  aceita_pessoa_fisica: boolean;\n  aceita_pessoa_juridica: boolean;\n  documentos_necessarios?: string;\n  tempo_aprovacao_dias?: number;\n  empresa_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface SimulationParams {\n  valorFinanciamento: number;\n  prazoMeses: number;\n  tipoCliente: 'pf' | 'pj';\n  valorEntrada?: number;\n  rendaMensal?: number;\n}\n\ninterface SimulationResult {\n  institutionId: string;\n  institutionName: string;\n  taxaJuros: number;\n  valorParcela: number;\n  valorTotal: number;\n  valorJuros: number;\n  aprovado: boolean;\n  observacoes: string[];\n  score: number;\n}\n\ninterface ComparisonMetrics {\n  melhorTaxa: FinancialInstitution;\n  menorParcela: FinancialInstitution;\n  maiorPrazo: FinancialInstitution;\n  menorTempo: FinancialInstitution;\n  mediaGeral: {\n    taxa: number;\n    prazo: number;\n    tempo: number;\n  };\n}\n\ninterface FinancialInstitutionManagerV2Props {\n  onInstitutionSelected?: (institution: FinancialInstitution) => void;\n  selectionMode?: boolean;\n}\n\nconst FinancialInstitutionManagerV2: React.FC<FinancialInstitutionManagerV2Props> = ({\n  onInstitutionSelected,\n  selectionMode = false\n}) => {\n  const { toast } = useToast();\n  const supabase = createClient();\n  \n  // Estados principais\n  const [institutions, setInstitutions] = useState<FinancialInstitution[]>([]);\n  const [filteredInstitutions, setFilteredInstitutions] = useState<FinancialInstitution[]>([]);\n  const [selectedInstitutions, setSelectedInstitutions] = useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentTab, setCurrentTab] = useState('list');\n  \n  // Estados de filtro e busca\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<string>('nome');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  \n  // Estados de simulação\n  const [simulationParams, setSimulationParams] = useState<SimulationParams>({\n    valorFinanciamento: 50000,\n    prazoMeses: 60,\n    tipoCliente: 'pf',\n    valorEntrada: 0,\n    rendaMensal: 5000\n  });\n  const [simulationResults, setSimulationResults] = useState<SimulationResult[]>([]);\n  const [isSimulating, setIsSimulating] = useState(false);\n  \n  // Estados de comparação\n  const [comparisonMetrics, setComparisonMetrics] = useState<ComparisonMetrics | null>(null);\n  \n  // Estados de distribuição automática\n  const [distributionResults, setDistributionResults] = useState<{\n    melhorTaxa: SimulationResult | null;\n    menorParcela: SimulationResult | null;\n    melhorScore: SimulationResult | null;\n  }>({ melhorTaxa: null, menorParcela: null, melhorScore: null });\n  \n  // Tipos de instituição\n  const tiposInstituicao = [\n    { value: 'banco', label: 'Banco', icon: Building2 },\n    { value: 'financeira', label: 'Financeira', icon: DollarSign },\n    { value: 'cooperativa', label: 'Cooperativa', icon: PieChart },\n    { value: 'fintech', label: 'Fintech', icon: TrendingUp }\n  ];\n  \n  // Carregar instituições\n  useEffect(() => {\n    loadInstitutions();\n  }, []);\n  \n  // Filtrar instituições\n  useEffect(() => {\n    filterAndSortInstitutions();\n  }, [institutions, searchTerm, filterType, filterStatus, sortBy, sortOrder]);\n  \n  // Calcular métricas de comparação\n  useEffect(() => {\n    if (filteredInstitutions.length > 0) {\n      calculateComparisonMetrics();\n    }\n  }, [filteredInstitutions]);\n  \n  const loadInstitutions = async () => {\n    try {\n      setIsLoading(true);\n      \n      const { data: { user }, error: userError } = await supabase.auth.getUser();\n      if (userError || !user) {\n        throw new Error('Usuário não autenticado');\n      }\n      \n      const { data: profile, error: profileError } = await supabase\n        .from('profiles')\n        .select('empresa_id')\n        .eq('id', user.id)\n        .single();\n      \n      if (profileError || !profile) {\n        throw new Error('Perfil do usuário não encontrado');\n      }\n      \n      const { data, error } = await supabase\n        .from('instituicoes_financeiras')\n        .select('*')\n        .eq('empresa_id', profile.empresa_id)\n        .order('favorito', { ascending: false })\n        .order('nome', { ascending: true });\n      \n      if (error) {\n        throw new Error(`Erro ao carregar instituições: ${error.message}`);\n      }\n      \n      setInstitutions(data || []);\n      \n    } catch (error: unknown) {\n      console.error('Erro ao carregar instituições:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao Carregar',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const filterAndSortInstitutions = useCallback(() => {\n    let filtered = [...institutions];\n    \n    // Filtro por termo de busca\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(inst => \n        inst.nome.toLowerCase().includes(term) ||\n        inst.cnpj?.toLowerCase().includes(term) ||\n        inst.cidade?.toLowerCase().includes(term) ||\n        inst.contato_principal?.toLowerCase().includes(term)\n      );\n    }\n    \n    // Filtro por tipo\n    if (filterType !== 'all') {\n      filtered = filtered.filter(inst => inst.tipo === filterType);\n    }\n    \n    // Filtro por status\n    if (filterStatus === 'ativo') {\n      filtered = filtered.filter(inst => inst.ativo);\n    } else if (filterStatus === 'inativo') {\n      filtered = filtered.filter(inst => !inst.ativo);\n    } else if (filterStatus === 'favorito') {\n      filtered = filtered.filter(inst => inst.favorito);\n    }\n    \n    // Ordenação\n    filtered.sort((a, b) => {\n      let aValue: string | number, bValue: string | number;\n      \n      switch (sortBy) {\n        case 'nome':\n          aValue = a.nome;\n          bValue = b.nome;\n          break;\n        case 'taxa':\n          aValue = a.taxa_juros_min || 999;\n          bValue = b.taxa_juros_min || 999;\n          break;\n        case 'prazo':\n          aValue = a.prazo_max_meses || 0;\n          bValue = b.prazo_max_meses || 0;\n          break;\n        case 'tempo':\n          aValue = a.tempo_aprovacao_dias || 999;\n          bValue = b.tempo_aprovacao_dias || 999;\n          break;\n        default:\n          aValue = a.nome;\n          bValue = b.nome;\n      }\n      \n      if (typeof aValue === 'string') {\n        return sortOrder === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      } else {\n        return sortOrder === 'asc' \n          ? aValue - bValue\n          : bValue - aValue;\n      }\n    });\n    \n    setFilteredInstitutions(filtered);\n  }, [institutions, searchTerm, filterType, filterStatus, sortBy, sortOrder]);\n  \n  const calculateComparisonMetrics = useCallback(() => {\n    const activeInstitutions = filteredInstitutions.filter(inst => inst.ativo);\n    \n    if (activeInstitutions.length === 0) {\n      setComparisonMetrics(null);\n      return;\n    }\n    \n    const melhorTaxa = activeInstitutions.reduce((prev, current) => \n      (current.taxa_juros_min || 999) < (prev.taxa_juros_min || 999) ? current : prev\n    );\n    \n    const menorParcela = activeInstitutions.reduce((prev, current) => {\n      const prevParcela = calcularParcela(simulationParams.valorFinanciamento, prev.taxa_juros_min || 0, simulationParams.prazoMeses);\n      const currentParcela = calcularParcela(simulationParams.valorFinanciamento, current.taxa_juros_min || 0, simulationParams.prazoMeses);\n      return currentParcela < prevParcela ? current : prev;\n    });\n    \n    const maiorPrazo = activeInstitutions.reduce((prev, current) => \n      (current.prazo_max_meses || 0) > (prev.prazo_max_meses || 0) ? current : prev\n    );\n    \n    const menorTempo = activeInstitutions.reduce((prev, current) => \n      (current.tempo_aprovacao_dias || 999) < (prev.tempo_aprovacao_dias || 999) ? current : prev\n    );\n    \n    const mediaGeral = {\n      taxa: activeInstitutions.reduce((sum, inst) => sum + (inst.taxa_juros_min || 0), 0) / activeInstitutions.length,\n      prazo: activeInstitutions.reduce((sum, inst) => sum + (inst.prazo_max_meses || 0), 0) / activeInstitutions.length,\n      tempo: activeInstitutions.reduce((sum, inst) => sum + (inst.tempo_aprovacao_dias || 0), 0) / activeInstitutions.length\n    };\n    \n    setComparisonMetrics({\n      melhorTaxa,\n      menorParcela,\n      maiorPrazo,\n      menorTempo,\n      mediaGeral\n    });\n  }, [filteredInstitutions, simulationParams]);\n  \n  const calcularParcela = (valor: number, taxa: number, prazo: number): number => {\n    if (taxa === 0) return valor / prazo;\n    const taxaMensal = taxa / 100 / 12;\n    return valor * (taxaMensal * Math.pow(1 + taxaMensal, prazo)) / (Math.pow(1 + taxaMensal, prazo) - 1);\n  };\n  \n  const runSimulation = async () => {\n    setIsSimulating(true);\n    \n    try {\n      const results: SimulationResult[] = [];\n      \n      for (const institution of filteredInstitutions.filter(inst => inst.ativo)) {\n        const observacoes: string[] = [];\n        let aprovado = true;\n        let score = 100;\n        \n        // Verificar se aceita o tipo de cliente\n        if (simulationParams.tipoCliente === 'pf' && !institution.aceita_pessoa_fisica) {\n          aprovado = false;\n          observacoes.push('Não aceita pessoa física');\n          score -= 50;\n        }\n        \n        if (simulationParams.tipoCliente === 'pj' && !institution.aceita_pessoa_juridica) {\n          aprovado = false;\n          observacoes.push('Não aceita pessoa jurídica');\n          score -= 50;\n        }\n        \n        // Verificar limites de valor\n        if (institution.valor_min_financiamento && simulationParams.valorFinanciamento < institution.valor_min_financiamento) {\n          aprovado = false;\n          observacoes.push(`Valor mínimo: R$ ${institution.valor_min_financiamento.toLocaleString()}`);\n          score -= 30;\n        }\n        \n        if (institution.valor_max_financiamento && simulationParams.valorFinanciamento > institution.valor_max_financiamento) {\n          aprovado = false;\n          observacoes.push(`Valor máximo: R$ ${institution.valor_max_financiamento.toLocaleString()}`);\n          score -= 30;\n        }\n        \n        // Verificar limites de prazo\n        if (institution.prazo_min_meses && simulationParams.prazoMeses < institution.prazo_min_meses) {\n          aprovado = false;\n          observacoes.push(`Prazo mínimo: ${institution.prazo_min_meses} meses`);\n          score -= 20;\n        }\n        \n        if (institution.prazo_max_meses && simulationParams.prazoMeses > institution.prazo_max_meses) {\n          aprovado = false;\n          observacoes.push(`Prazo máximo: ${institution.prazo_max_meses} meses`);\n          score -= 20;\n        }\n        \n        // Calcular taxa de juros (usar média entre min e max)\n        const taxaJuros = institution.taxa_juros_min && institution.taxa_juros_max \n          ? (institution.taxa_juros_min + institution.taxa_juros_max) / 2\n          : institution.taxa_juros_min || institution.taxa_juros_max || 2.5;\n        \n        const valorParcela = calcularParcela(simulationParams.valorFinanciamento, taxaJuros, simulationParams.prazoMeses);\n        const valorTotal = valorParcela * simulationParams.prazoMeses;\n        const valorJuros = valorTotal - simulationParams.valorFinanciamento;\n        \n        // Verificar capacidade de pagamento\n        if (simulationParams.rendaMensal && valorParcela > simulationParams.rendaMensal * 0.3) {\n          observacoes.push('Parcela excede 30% da renda');\n          score -= 15;\n        }\n        \n        // Bonificações\n        if (institution.favorito) score += 10;\n        if (institution.tempo_aprovacao_dias && institution.tempo_aprovacao_dias <= 7) score += 5;\n        \n        results.push({\n          institutionId: institution.id,\n          institutionName: institution.nome,\n          taxaJuros,\n          valorParcela,\n          valorTotal,\n          valorJuros,\n          aprovado,\n          observacoes,\n          score: Math.max(0, Math.min(100, score))\n        });\n      }\n      \n      // Ordenar por score\n      results.sort((a, b) => b.score - a.score);\n      setSimulationResults(results);\n      setCurrentTab('simulation');\n      \n    } catch (error) {\n      console.error('Erro na simulação:', error);\n      toast({\n        title: 'Erro na Simulação',\n        description: 'Erro ao executar simulação de financiamento',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsSimulating(false);\n    }\n  };\n  \n  const toggleFavorite = async (institutionId: string) => {\n    try {\n      const institution = institutions.find(inst => inst.id === institutionId);\n      if (!institution) return;\n      \n      const { error } = await supabase\n        .from('instituicoes_financeiras')\n        .update({ favorito: !institution.favorito })\n        .eq('id', institutionId);\n      \n      if (error) throw error;\n      \n      setInstitutions(prev => prev.map(inst => \n        inst.id === institutionId \n          ? { ...inst, favorito: !inst.favorito }\n          : inst\n      ));\n      \n      toast({\n        title: institution.favorito ? 'Removido dos favoritos' : 'Adicionado aos favoritos',\n        description: institution.nome\n      });\n      \n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    }\n  };\n  \n  const exportComparison = () => {\n    const data = filteredInstitutions.map(inst => ({\n      Nome: inst.nome,\n      Tipo: inst.tipo,\n      'Taxa Mín (%)': inst.taxa_juros_min,\n      'Taxa Máx (%)': inst.taxa_juros_max,\n      'Prazo Mín (meses)': inst.prazo_min_meses,\n      'Prazo Máx (meses)': inst.prazo_max_meses,\n      'Valor Mín': inst.valor_min_financiamento,\n      'Valor Máx': inst.valor_max_financiamento,\n      'Tempo Aprovação (dias)': inst.tempo_aprovacao_dias,\n      'Pessoa Física': inst.aceita_pessoa_fisica ? 'Sim' : 'Não',\n      'Pessoa Jurídica': inst.aceita_pessoa_juridica ? 'Sim' : 'Não',\n      Ativo: inst.ativo ? 'Sim' : 'Não',\n      Favorito: inst.favorito ? 'Sim' : 'Não'\n    }));\n    \n    const csv = [\n      Object.keys(data[0]).join(','),\n      ...data.map(row => Object.values(row).join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `comparacao-instituicoes-${Date.now()}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  \n  const autoDistributeOptions = () => {\n    if (simulationResults.length === 0) return;\n    \n    const approvedResults = simulationResults.filter(result => result.aprovado);\n    \n    if (approvedResults.length === 0) {\n      toast({\n        title: 'Nenhuma opção aprovada',\n        description: 'Não há resultados aprovados para distribuir',\n        variant: 'destructive'\n      });\n      return;\n    }\n    \n    // Encontrar melhor taxa\n    const melhorTaxa = approvedResults.reduce((prev, current) => \n      current.taxaJuros < prev.taxaJuros ? current : prev\n    );\n    \n    // Encontrar menor parcela\n    const menorParcela = approvedResults.reduce((prev, current) => \n      current.valorParcela < prev.valorParcela ? current : prev\n    );\n    \n    // Encontrar melhor score\n    const melhorScore = approvedResults.reduce((prev, current) => \n      current.score > prev.score ? current : prev\n    );\n    \n    setDistributionResults({\n      melhorTaxa,\n      menorParcela,\n      melhorScore\n    });\n    \n    toast({\n      title: 'Distribuição Automática Concluída',\n      description: 'As melhores opções foram selecionadas automaticamente'\n    });\n  };\n  \n  if (isLoading) {\n    return (\n      <Card className=\"w-full max-w-6xl mx-auto\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <RefreshCw className=\"h-4 w-4 animate-spin\" />\n            <span>Carregando instituições financeiras...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  return (\n    <Card className=\"w-full max-w-6xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Building2 className=\"h-5 w-5\" />\n            Gerenciador de Instituições Financeiras V2\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={exportComparison}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={loadInstitutions}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Atualizar\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={currentTab} onValueChange={setCurrentTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"list\">Lista</TabsTrigger>\n            <TabsTrigger value=\"comparison\">Comparação</TabsTrigger>\n            <TabsTrigger value=\"simulation\">Simulação</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Análise</TabsTrigger>\n          </TabsList>\n          \n          {/* Tab Lista */}\n          <TabsContent value=\"list\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Buscar instituições...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-8 w-64\"\n                  />\n                </div>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os tipos</SelectItem>\n                    {tiposInstituicao.map(tipo => (\n                      <SelectItem key={tipo.value} value={tipo.value}>\n                        {tipo.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos</SelectItem>\n                    <SelectItem value=\"ativo\">Ativos</SelectItem>\n                    <SelectItem value=\"inativo\">Inativos</SelectItem>\n                    <SelectItem value=\"favorito\">Favoritos</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"nome\">Nome</SelectItem>\n                    <SelectItem value=\"taxa\">Taxa</SelectItem>\n                    <SelectItem value=\"prazo\">Prazo</SelectItem>\n                    <SelectItem value=\"tempo\">Tempo</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                >\n                  {sortOrder === 'asc' ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredInstitutions.map(institution => {\n                const TipoIcon = tiposInstituicao.find(t => t.value === institution.tipo)?.icon || Building2;\n                \n                return (\n                  <Card key={institution.id} className={`relative ${!institution.ativo ? 'opacity-60' : ''}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <TipoIcon className=\"h-5 w-5\" />\n                          <div>\n                            <h3 className=\"font-semibold text-sm\">{institution.nome}</h3>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {tiposInstituicao.find(t => t.value === institution.tipo)?.label}\n                            </Badge>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => toggleFavorite(institution.id)}\n                        >\n                          {institution.favorito ? (\n                            <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                          ) : (\n                            <StarOff className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-0 space-y-2\">\n                      {institution.taxa_juros_min && (\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Taxa:</span>\n                          <span className=\"font-medium\">\n                            {institution.taxa_juros_min}%\n                            {institution.taxa_juros_max && institution.taxa_juros_max !== institution.taxa_juros_min \n                              ? ` - ${institution.taxa_juros_max}%` \n                              : ''}\n                          </span>\n                        </div>\n                      )}\n                      \n                      {institution.prazo_max_meses && (\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Prazo:</span>\n                          <span className=\"font-medium\">\n                            {institution.prazo_min_meses && institution.prazo_min_meses !== institution.prazo_max_meses\n                              ? `${institution.prazo_min_meses} - `\n                              : ''}\n                            {institution.prazo_max_meses} meses\n                          </span>\n                        </div>\n                      )}\n                      \n                      {institution.tempo_aprovacao_dias && (\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Aprovação:</span>\n                          <span className=\"font-medium\">{institution.tempo_aprovacao_dias} dias</span>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center gap-1 text-xs\">\n                        {institution.aceita_pessoa_fisica && (\n                          <Badge variant=\"outline\">PF</Badge>\n                        )}\n                        {institution.aceita_pessoa_juridica && (\n                          <Badge variant=\"outline\">PJ</Badge>\n                        )}\n                        {!institution.ativo && (\n                          <Badge variant=\"destructive\">Inativo</Badge>\n                        )}\n                      </div>\n                      \n                      {institution.contato_principal && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Contato: {institution.contato_principal}\n                        </div>\n                      )}\n                      \n                      {selectionMode && (\n                        <div className=\"pt-2\">\n                          <Checkbox\n                            checked={selectedInstitutions.has(institution.id)}\n                            onCheckedChange={(checked) => {\n                              const newSelected = new Set(selectedInstitutions);\n                              if (checked) {\n                                newSelected.add(institution.id);\n                              } else {\n                                newSelected.delete(institution.id);\n                              }\n                              setSelectedInstitutions(newSelected);\n                            }}\n                          />\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n            \n            {filteredInstitutions.length === 0 && (\n              <div className=\"text-center py-8\">\n                <Building2 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">Nenhuma instituição encontrada</p>\n              </div>\n            )}\n          </TabsContent>\n          \n          {/* Tab Comparação */}\n          <TabsContent value=\"comparison\" className=\"space-y-4\">\n            {comparisonMetrics && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingDown className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-sm font-medium\">Melhor Taxa</span>\n                    </div>\n                    <div className=\"text-lg font-bold\">{comparisonMetrics.melhorTaxa.nome}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {comparisonMetrics.melhorTaxa.taxa_juros_min}% a.m.\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <DollarSign className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium\">Menor Parcela</span>\n                    </div>\n                    <div className=\"text-lg font-bold\">{comparisonMetrics.menorParcela.nome}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      R$ {calcularParcela(\n                        simulationParams.valorFinanciamento,\n                        comparisonMetrics.menorParcela.taxa_juros_min || 0,\n                        simulationParams.prazoMeses\n                      ).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Calendar className=\"h-4 w-4 text-purple-600\" />\n                      <span className=\"text-sm font-medium\">Maior Prazo</span>\n                    </div>\n                    <div className=\"text-lg font-bold\">{comparisonMetrics.maiorPrazo.nome}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {comparisonMetrics.maiorPrazo.prazo_max_meses} meses\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CheckCircle2 className=\"h-4 w-4 text-orange-600\" />\n                      <span className=\"text-sm font-medium\">Mais Rápido</span>\n                    </div>\n                    <div className=\"text-lg font-bold\">{comparisonMetrics.menorTempo.nome}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {comparisonMetrics.menorTempo.tempo_aprovacao_dias} dias\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n            \n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Comparação Detalhada</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left p-2\">Instituição</th>\n                        <th className=\"text-left p-2\">Tipo</th>\n                        <th className=\"text-left p-2\">Taxa (%)</th>\n                        <th className=\"text-left p-2\">Prazo (meses)</th>\n                        <th className=\"text-left p-2\">Valor Mín</th>\n                        <th className=\"text-left p-2\">Valor Máx</th>\n                        <th className=\"text-left p-2\">Aprovação</th>\n                        <th className=\"text-left p-2\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredInstitutions.map(institution => (\n                        <tr key={institution.id} className=\"border-b hover:bg-muted/50\">\n                          <td className=\"p-2\">\n                            <div className=\"flex items-center gap-2\">\n                              {institution.favorito && <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />}\n                              {institution.nome}\n                            </div>\n                          </td>\n                          <td className=\"p-2\">\n                            <Badge variant=\"secondary\">\n                              {tiposInstituicao.find(t => t.value === institution.tipo)?.label}\n                            </Badge>\n                          </td>\n                          <td className=\"p-2\">\n                            {institution.taxa_juros_min}\n                            {institution.taxa_juros_max && institution.taxa_juros_max !== institution.taxa_juros_min \n                              ? ` - ${institution.taxa_juros_max}` \n                              : ''}\n                          </td>\n                          <td className=\"p-2\">\n                            {institution.prazo_min_meses && institution.prazo_min_meses !== institution.prazo_max_meses\n                              ? `${institution.prazo_min_meses} - `\n                              : ''}\n                            {institution.prazo_max_meses}\n                          </td>\n                          <td className=\"p-2\">\n                            {institution.valor_min_financiamento\n                              ? `R$ ${institution.valor_min_financiamento.toLocaleString()}`\n                              : '-'}\n                          </td>\n                          <td className=\"p-2\">\n                            {institution.valor_max_financiamento\n                              ? `R$ ${institution.valor_max_financiamento.toLocaleString()}`\n                              : '-'}\n                          </td>\n                          <td className=\"p-2\">\n                            {institution.tempo_aprovacao_dias ? `${institution.tempo_aprovacao_dias} dias` : '-'}\n                          </td>\n                          <td className=\"p-2\">\n                            <div className=\"flex items-center gap-1\">\n                              {institution.aceita_pessoa_fisica && <Badge variant=\"outline\" className=\"text-xs\">PF</Badge>}\n                              {institution.aceita_pessoa_juridica && <Badge variant=\"outline\" className=\"text-xs\">PJ</Badge>}\n                              {!institution.ativo && <Badge variant=\"destructive\" className=\"text-xs\">Inativo</Badge>}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          {/* Tab Simulação */}\n          <TabsContent value=\"simulation\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calculator className=\"h-5 w-5\" />\n                  Simulação de Financiamento\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Valor do Financiamento</Label>\n                    <Input\n                      type=\"number\"\n                      value={simulationParams.valorFinanciamento}\n                      onChange={(e) => setSimulationParams(prev => ({\n                        ...prev,\n                        valorFinanciamento: Number(e.target.value)\n                      }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Prazo (meses)</Label>\n                    <Input\n                      type=\"number\"\n                      value={simulationParams.prazoMeses}\n                      onChange={(e) => setSimulationParams(prev => ({\n                        ...prev,\n                        prazoMeses: Number(e.target.value)\n                      }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Tipo de Cliente</Label>\n                    <Select \n                      value={simulationParams.tipoCliente} \n                      onValueChange={(value: 'pf' | 'pj') => setSimulationParams(prev => ({\n                        ...prev,\n                        tipoCliente: value\n                      }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pf\">Pessoa Física</SelectItem>\n                        <SelectItem value=\"pj\">Pessoa Jurídica</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Valor de Entrada (opcional)</Label>\n                    <Input\n                      type=\"number\"\n                      value={simulationParams.valorEntrada || ''}\n                      onChange={(e) => setSimulationParams(prev => ({\n                        ...prev,\n                        valorEntrada: Number(e.target.value) || 0\n                      }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Renda Mensal (opcional)</Label>\n                    <Input\n                      type=\"number\"\n                      value={simulationParams.rendaMensal || ''}\n                      onChange={(e) => setSimulationParams(prev => ({\n                        ...prev,\n                        rendaMensal: Number(e.target.value) || 0\n                      }))}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-end gap-2\">\n                    <Button \n                      onClick={runSimulation} \n                      disabled={isSimulating}\n                      className=\"flex-1\"\n                    >\n                      {isSimulating ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Simulando...\n                        </>\n                      ) : (\n                        <>\n                          <Calculator className=\"h-4 w-4 mr-2\" />\n                          Simular\n                        </>\n                      )}\n                    </Button>\n                    \n                    {simulationResults.length > 0 && (\n                      <Button \n                        onClick={autoDistributeOptions}\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                      >\n                        <Shuffle className=\"h-4 w-4 mr-2\" />\n                        Distribuir Automaticamente\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {simulationResults.length > 0 && (\n              <>\n                {/* Distribuição Automática */}\n                {(distributionResults.melhorTaxa || distributionResults.menorParcela || distributionResults.melhorScore) && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Shuffle className=\"h-5 w-5\" />\n                        Distribuição Automática - Melhores Opções\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        {distributionResults.melhorTaxa && (\n                          <Card className=\"border-green-200 bg-green-50\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <TrendingDown className=\"h-4 w-4 text-green-600\" />\n                                <span className=\"font-medium text-green-800\">Melhor Taxa</span>\n                              </div>\n                              <div className=\"text-lg font-bold text-green-900\">\n                                {distributionResults.melhorTaxa.institutionName}\n                              </div>\n                              <div className=\"text-sm text-green-700\">\n                                {distributionResults.melhorTaxa.taxaJuros.toFixed(2)}% a.m.\n                              </div>\n                              <div className=\"text-sm text-green-600\">\n                                R$ {distributionResults.melhorTaxa.valorParcela.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}/mês\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                        \n                        {distributionResults.menorParcela && (\n                          <Card className=\"border-blue-200 bg-blue-50\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <DollarSign className=\"h-4 w-4 text-blue-600\" />\n                                <span className=\"font-medium text-blue-800\">Menor Parcela</span>\n                              </div>\n                              <div className=\"text-lg font-bold text-blue-900\">\n                                {distributionResults.menorParcela.institutionName}\n                              </div>\n                              <div className=\"text-sm text-blue-700\">\n                                R$ {distributionResults.menorParcela.valorParcela.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}/mês\n                              </div>\n                              <div className=\"text-sm text-blue-600\">\n                                {distributionResults.menorParcela.taxaJuros.toFixed(2)}% a.m.\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                        \n                        {distributionResults.melhorScore && (\n                          <Card className=\"border-purple-200 bg-purple-50\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Star className=\"h-4 w-4 text-purple-600\" />\n                                <span className=\"font-medium text-purple-800\">Melhor Score</span>\n                              </div>\n                              <div className=\"text-lg font-bold text-purple-900\">\n                                {distributionResults.melhorScore.institutionName}\n                              </div>\n                              <div className=\"text-sm text-purple-700\">\n                                Score: {distributionResults.melhorScore.score}%\n                              </div>\n                              <div className=\"text-sm text-purple-600\">\n                                R$ {distributionResults.melhorScore.valorParcela.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}/mês\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle>Resultados da Simulação</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                    {simulationResults.map(result => (\n                      <Card key={result.institutionId} className={`${!result.aprovado ? 'opacity-60' : ''}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <h3 className=\"font-semibold\">{result.institutionName}</h3>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Badge variant={result.aprovado ? 'default' : 'destructive'}>\n                                  {result.aprovado ? 'Aprovado' : 'Reprovado'}\n                                </Badge>\n                                <div className=\"flex items-center gap-1\">\n                                  <span className=\"text-sm text-muted-foreground\">Score:</span>\n                                  <Progress value={result.score} className=\"w-16 h-2\" />\n                                  <span className=\"text-sm font-medium\">{result.score}%</span>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-lg font-bold\">\n                                R$ {result.valorParcela.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">por mês</div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">Taxa:</span>\n                              <div className=\"font-medium\">{result.taxaJuros.toFixed(2)}% a.m.</div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Total:</span>\n                              <div className=\"font-medium\">\n                                R$ {result.valorTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">Juros:</span>\n                              <div className=\"font-medium\">\n                                R$ {result.valorJuros.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-muted-foreground\">% da Renda:</span>\n                              <div className=\"font-medium\">\n                                {simulationParams.rendaMensal \n                                  ? `${((result.valorParcela / simulationParams.rendaMensal) * 100).toFixed(1)}%`\n                                  : '-'}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {result.observacoes.length > 0 && (\n                            <div className=\"mt-3 pt-3 border-t\">\n                              <div className=\"text-sm text-muted-foreground mb-1\">Observações:</div>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {result.observacoes.map((obs, index) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {obs}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n              </>\n            )}\n          </TabsContent>\n          \n          {/* Tab Análise */}\n          <TabsContent value=\"analytics\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold\">{institutions.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total de Instituições</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {institutions.filter(inst => inst.ativo).length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Instituições Ativas</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {institutions.filter(inst => inst.favorito).length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Favoritas</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-2xl font-bold\">\n                    {comparisonMetrics ? comparisonMetrics.mediaGeral.taxa.toFixed(2) : '0'}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Taxa Média</div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Distribuição por Tipo</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {tiposInstituicao.map(tipo => {\n                      const count = institutions.filter(inst => inst.tipo === tipo.value).length;\n                      const percentage = institutions.length > 0 ? (count / institutions.length) * 100 : 0;\n                      \n                      return (\n                        <div key={tipo.value} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            {React.createElement(tipo.icon, { className: \"h-4 w-4\" })}\n                            <span className=\"text-sm\">{tipo.label}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={percentage} className=\"w-20 h-2\" />\n                            <span className=\"text-sm font-medium w-8\">{count}</span>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Faixas de Taxa de Juros</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {[\n                      { label: '0% - 1%', min: 0, max: 1 },\n                      { label: '1% - 2%', min: 1, max: 2 },\n                      { label: '2% - 3%', min: 2, max: 3 },\n                      { label: '3% - 4%', min: 3, max: 4 },\n                      { label: '4%+', min: 4, max: 999 }\n                    ].map(faixa => {\n                      const count = institutions.filter(inst => \n                        inst.taxa_juros_min && \n                        inst.taxa_juros_min >= faixa.min && \n                        inst.taxa_juros_min < faixa.max\n                      ).length;\n                      const percentage = institutions.length > 0 ? (count / institutions.length) * 100 : 0;\n                      \n                      return (\n                        <div key={faixa.label} className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">{faixa.label}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={percentage} className=\"w-20 h-2\" />\n                            <span className=\"text-sm font-medium w-8\">{count}</span>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FinancialInstitutionManagerV2;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\FinancialInstitutionSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\FinancialKitManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fetchKits' function makes the dependencies of useEffect Hook (at line 65) change on every render. To fix this, wrap the definition of 'fetchKits' in its own useCallback() Hook.","line":67,"column":9,"nodeType":"VariableDeclarator","endLine":117,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'fetchKits' in its own useCallback() Hook.","fix":{"range":[2458,4443],"text":"useCallback(async (retryCount = 0) => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Verificar autenticação antes de fazer a consulta\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado');\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('financial_kits')\r\n        .select('*')\r\n        .eq('ativo', true)\r\n        .order('potencia', { ascending: true });\r\n\r\n      if (error) {\r\n        // Tratamento específico para diferentes tipos de erro\r\n        if (error.code === 'PGRST116') {\r\n          throw new Error('Tabela de kits financeiros não encontrada. Verifique a configuração do banco de dados.');\r\n        } else if (error.code === '42501') {\r\n          throw new Error('Permissão negada para acessar os kits financeiros. Verifique suas credenciais.');\r\n        } else if (error.message?.includes('connection')) {\r\n          throw new Error('Erro de conexão com o banco de dados. Verifique sua conexão com a internet.');\r\n        }\r\n        throw error;\r\n      }\r\n      setKits(data || []);\r\n    } catch (error: unknown) {\r\n      console.error('Error fetching financial kits:', error);\r\n      \r\n      // Retry automático para erros de conexão (máximo 2 tentativas)\r\n      if (retryCount < 2 && (error instanceof Error && error.message?.includes('connection'))) {\r\n        console.log(`Tentando novamente carregar kits financeiros (tentativa ${retryCount + 1})...`);\r\n        setTimeout(() => fetchKits(retryCount + 1), 2000);\r\n        return;\r\n      }\r\n      \r\n      // Fallback: usar dados vazios em caso de erro persistente\r\n      setKits([]);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível carregar os kits financeiros';\r\n      toast({\r\n        title: \"Erro ao carregar kits financeiros\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\nimport { Plus, Edit, Trash2, FileSpreadsheet, DollarSign } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { ExcelImporter } from \"./ExcelImporter\";\r\n\r\ninterface FinancialKit {\r\n  id: string;\r\n  nome: string;\r\n  potencia: number;\r\n  preco: number;\r\n  preco_wp: number;\r\n  fabricante?: string;\r\n  categoria?: string;\r\n  descricao?: string;\r\n  ativo: boolean;\r\n}\r\n\r\ninterface KitData {\r\n  nome: string;\r\n  potencia: number;\r\n  preco: number;\r\n  precoWp: number;\r\n  fabricante?: string;\r\n  categoria?: string;\r\n  descricao?: string;\r\n}\r\n\r\ninterface FinancialKitManagerProps {\r\n  onKitsUpdated?: () => void;\r\n}\r\n\r\nexport function FinancialKitManager({ onKitsUpdated }: FinancialKitManagerProps = {}) {\r\n  const { toast } = useToast();\r\n  const [kits, setKits] = useState<FinancialKit[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isImporterOpen, setIsImporterOpen] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editingKit, setEditingKit] = useState<FinancialKit | null>(null);\r\n  \r\n  const [formData, setFormData] = useState({\r\n    nome: \"\",\r\n    potencia: \"\",\r\n    preco: \"\",\r\n    fabricante: \"\",\r\n    categoria: \"\",\r\n    descricao: \"\"\r\n  });\r\n\r\n  const categorias = [\"Residencial\", \"Comercial\", \"Industrial\", \"Rural\"];\r\n\r\n  useEffect(() => {\r\n    fetchKits();\r\n  }, [fetchKits]);\r\n\r\n  const fetchKits = async (retryCount = 0) => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Verificar autenticação antes de fazer a consulta\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado');\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('financial_kits')\r\n        .select('*')\r\n        .eq('ativo', true)\r\n        .order('potencia', { ascending: true });\r\n\r\n      if (error) {\r\n        // Tratamento específico para diferentes tipos de erro\r\n        if (error.code === 'PGRST116') {\r\n          throw new Error('Tabela de kits financeiros não encontrada. Verifique a configuração do banco de dados.');\r\n        } else if (error.code === '42501') {\r\n          throw new Error('Permissão negada para acessar os kits financeiros. Verifique suas credenciais.');\r\n        } else if (error.message?.includes('connection')) {\r\n          throw new Error('Erro de conexão com o banco de dados. Verifique sua conexão com a internet.');\r\n        }\r\n        throw error;\r\n      }\r\n      setKits(data || []);\r\n    } catch (error: unknown) {\r\n      console.error('Error fetching financial kits:', error);\r\n      \r\n      // Retry automático para erros de conexão (máximo 2 tentativas)\r\n      if (retryCount < 2 && (error instanceof Error && error.message?.includes('connection'))) {\r\n        console.log(`Tentando novamente carregar kits financeiros (tentativa ${retryCount + 1})...`);\r\n        setTimeout(() => fetchKits(retryCount + 1), 2000);\r\n        return;\r\n      }\r\n      \r\n      // Fallback: usar dados vazios em caso de erro persistente\r\n      setKits([]);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível carregar os kits financeiros';\r\n      toast({\r\n        title: \"Erro ao carregar kits financeiros\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      nome: \"\",\r\n      potencia: \"\",\r\n      preco: \"\",\r\n      fabricante: \"\",\r\n      categoria: \"\",\r\n      descricao: \"\"\r\n    });\r\n    setIsEditing(false);\r\n    setEditingKit(null);\r\n  };\r\n\r\n  const handleNewKit = () => {\r\n    resetForm();\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleEditKit = (kit: FinancialKit) => {\r\n    setFormData({\r\n      nome: kit.nome,\r\n      potencia: kit.potencia.toString(),\r\n      preco: kit.preco.toString(),\r\n      fabricante: kit.fabricante || \"\",\r\n      categoria: kit.categoria || \"\",\r\n      descricao: kit.descricao || \"\"\r\n    });\r\n    setEditingKit(kit);\r\n    setIsEditing(true);\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    const potencia = parseFloat(formData.potencia);\r\n    const preco = parseFloat(formData.preco);\r\n    \r\n    if (!formData.nome || potencia <= 0 || preco <= 0) {\r\n      toast({\r\n        title: \"Dados inválidos\",\r\n        description: \"Preencha todos os campos obrigatórios com valores válidos\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    const precoWp = preco / (potencia * 1000);\r\n    \r\n    try {\r\n      // Verificar autenticação\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado. Faça login novamente.');\r\n      }\r\n\r\n      if (isEditing && editingKit) {\r\n        const { error } = await supabase\r\n          .from('financial_kits')\r\n          .update({\r\n            nome: formData.nome,\r\n            potencia,\r\n            preco,\r\n            preco_wp: precoWp,\r\n            fabricante: formData.fabricante || null,\r\n            categoria: formData.categoria || null,\r\n            descricao: formData.descricao || null\r\n          })\r\n          .eq('id', editingKit.id);\r\n\r\n        if (error) {\r\n          if (error.code === '23505') {\r\n            throw new Error('Já existe um kit com este nome.');\r\n          } else if (error.code === '42501') {\r\n            throw new Error('Permissão negada para atualizar o kit.');\r\n          }\r\n          throw error;\r\n        }\r\n        \r\n        toast({\r\n          title: \"Kit atualizado\",\r\n          description: \"Kit financeiro atualizado com sucesso\"\r\n        });\r\n      } else {\r\n        const { error } = await supabase\r\n          .from('financial_kits')\r\n          .insert({\r\n            nome: formData.nome,\r\n            potencia,\r\n            preco,\r\n            preco_wp: precoWp,\r\n            fabricante: formData.fabricante || null,\r\n            categoria: formData.categoria || null,\r\n            descricao: formData.descricao || null\r\n          });\r\n\r\n        if (error) {\r\n          if (error.code === '23505') {\r\n            throw new Error('Já existe um kit com este nome.');\r\n          } else if (error.code === '42501') {\r\n            throw new Error('Permissão negada para criar o kit.');\r\n          }\r\n          throw error;\r\n        }\r\n        \r\n        toast({\r\n          title: \"Kit criado\",\r\n          description: \"Kit financeiro criado com sucesso\"\r\n        });\r\n      }\r\n\r\n      setIsDialogOpen(false);\r\n      resetForm();\r\n      fetchKits();\r\n      onKitsUpdated?.();\r\n    } catch (error: unknown) {\r\n      console.error('Error saving financial kit:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível salvar o kit';\r\n      toast({\r\n        title: \"Erro ao salvar kit financeiro\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteKit = async (kit: FinancialKit) => {\r\n    try {\r\n      // Verificar autenticação\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado. Faça login novamente.');\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('financial_kits')\r\n        .update({ ativo: false })\r\n        .eq('id', kit.id);\r\n\r\n      if (error) {\r\n        if (error.code === '42501') {\r\n          throw new Error('Permissão negada para remover o kit.');\r\n        } else if (error.code === '23503') {\r\n          throw new Error('Não é possível remover este kit pois ele está sendo usado em projetos.');\r\n        }\r\n        throw error;\r\n      }\r\n      \r\n      toast({\r\n        title: \"Kit removido\",\r\n        description: \"Kit financeiro removido com sucesso\"\r\n      });\r\n      \r\n      fetchKits();\r\n      onKitsUpdated?.();\r\n    } catch (error: unknown) {\r\n      console.error('Error deleting financial kit:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível remover o kit';\r\n      toast({\r\n        title: \"Erro ao remover kit financeiro\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleImportData = async (importedData: KitData[]) => {\r\n    try {\r\n      // Verificar autenticação\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado. Faça login novamente.');\r\n      }\r\n\r\n      // Validar dados importados\r\n      if (!importedData || importedData.length === 0) {\r\n        throw new Error('Nenhum dado válido encontrado para importação.');\r\n      }\r\n\r\n      const kitsToInsert = importedData.map(kit => ({\r\n        nome: kit.nome,\r\n        potencia: kit.potencia,\r\n        preco: kit.preco,\r\n        preco_wp: kit.precoWp,\r\n        fabricante: kit.fabricante || null,\r\n        categoria: kit.categoria || null,\r\n        descricao: kit.descricao || null\r\n      }));\r\n\r\n      const { error } = await supabase\r\n        .from('financial_kits')\r\n        .insert(kitsToInsert);\r\n\r\n      if (error) {\r\n        if (error.code === '23505') {\r\n          throw new Error('Alguns kits já existem no sistema. Verifique os nomes duplicados.');\r\n        } else if (error.code === '42501') {\r\n          throw new Error('Permissão negada para importar kits.');\r\n        }\r\n        throw error;\r\n      }\r\n      \r\n      setIsImporterOpen(false);\r\n      fetchKits();\r\n      onKitsUpdated?.();\r\n      \r\n      toast({\r\n        title: \"Kits importados\",\r\n        description: `${importedData.length} kits importados com sucesso`\r\n      });\r\n    } catch (error: unknown) {\r\n      console.error('Error importing financial kits:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível importar os kits';\r\n      toast({\r\n        title: \"Erro ao importar kits financeiros\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isImporterOpen) {\r\n    return (\r\n      <ExcelImporter \r\n        onDataImported={handleImportData}\r\n        onClose={() => setIsImporterOpen(false)}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <DollarSign className=\"h-5 w-5 text-primary\" />\r\n                Gerenciador de Kits Financeiros\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Gerencie os kits disponíveis para orçamentos\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button variant=\"outline\" onClick={() => setIsImporterOpen(true)}>\r\n                <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\r\n                Importar Excel\r\n              </Button>\r\n              <Button onClick={handleNewKit}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Novo Kit\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {isLoading ? (\r\n            <div className=\"text-center py-8\">Carregando kits...</div>\r\n          ) : kits.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              Nenhum kit encontrado. Clique em \"Novo Kit\" para começar.\r\n            </div>\r\n          ) : (\r\n            <div className=\"border rounded-lg overflow-hidden\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Nome</TableHead>\r\n                    <TableHead>Potência</TableHead>\r\n                    <TableHead>Preço</TableHead>\r\n                    <TableHead>R$/Wp</TableHead>\r\n                    <TableHead>Fabricante</TableHead>\r\n                    <TableHead>Categoria</TableHead>\r\n                    <TableHead className=\"text-right\">Ações</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {kits.map((kit) => (\r\n                    <TableRow key={kit.id}>\r\n                      <TableCell className=\"font-medium\">{kit.nome}</TableCell>\r\n                      <TableCell>{kit.potencia} kWp</TableCell>\r\n                      <TableCell>R$ {kit.preco.toLocaleString()}</TableCell>\r\n                      <TableCell>R$ {kit.preco_wp.toFixed(2)}</TableCell>\r\n                      <TableCell>{kit.fabricante}</TableCell>\r\n                      <TableCell>\r\n                        {kit.categoria && (\r\n                          <Badge variant=\"outline\">{kit.categoria}</Badge>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <div className=\"flex justify-end gap-2\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleEditKit(kit)}\r\n                          >\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <AlertDialog>\r\n                            <AlertDialogTrigger asChild>\r\n                              <Button variant=\"outline\" size=\"sm\">\r\n                                <Trash2 className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            </AlertDialogTrigger>\r\n                            <AlertDialogContent>\r\n                              <AlertDialogHeader>\r\n                                <AlertDialogTitle>Confirmar remoção</AlertDialogTitle>\r\n                                <AlertDialogDescription>\r\n                                  Tem certeza que deseja remover o kit \"{kit.nome}\"? Esta ação não pode ser desfeita.\r\n                                </AlertDialogDescription>\r\n                              </AlertDialogHeader>\r\n                              <AlertDialogFooter>\r\n                                <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n                                <AlertDialogAction onClick={() => handleDeleteKit(kit)}>\r\n                                  Remover\r\n                                </AlertDialogAction>\r\n                              </AlertDialogFooter>\r\n                            </AlertDialogContent>\r\n                          </AlertDialog>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>\r\n              {isEditing ? \"Editar Kit\" : \"Novo Kit Financeiro\"}\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              {isEditing ? \"Edite as informações do kit\" : \"Adicione um novo kit financeiro\"}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"nome\">Nome do Kit *</Label>\r\n              <Input\r\n                id=\"nome\"\r\n                value={formData.nome}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, nome: e.target.value }))}\r\n                placeholder=\"Ex: Kit 7.2kWp - Canadian\"\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"potencia\">Potência (kWp) *</Label>\r\n                <Input\r\n                  id=\"potencia\"\r\n                  type=\"number\"\r\n                  step=\"0.1\"\r\n                  min=\"0.1\"\r\n                  value={formData.potencia}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, potencia: e.target.value }))}\r\n                  placeholder=\"7.2\"\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"preco\">Preço (R$) *</Label>\r\n                <Input\r\n                  id=\"preco\"\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  min=\"0.01\"\r\n                  value={formData.preco}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, preco: e.target.value }))}\r\n                  placeholder=\"18500\"\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"fabricante\">Fabricante</Label>\r\n                <Input\r\n                  id=\"fabricante\"\r\n                  value={formData.fabricante}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, fabricante: e.target.value }))}\r\n                  placeholder=\"Canadian Solar\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"categoria\">Categoria</Label>\r\n                <Select \r\n                  value={formData.categoria} \r\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, categoria: value }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione...\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {categorias.map(categoria => (\r\n                      <SelectItem key={categoria} value={categoria}>\r\n                        {categoria}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"descricao\">Descrição</Label>\r\n              <Textarea\r\n                id=\"descricao\"\r\n                value={formData.descricao}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, descricao: e.target.value }))}\r\n                placeholder=\"Descrição do kit...\"\r\n                rows={3}\r\n              />\r\n            </div>\r\n\r\n            {formData.potencia && formData.preco && (\r\n              <div className=\"p-3 bg-muted rounded-lg\">\r\n                <div className=\"text-sm text-muted-foreground\">Preço por Wp:</div>\r\n                <div className=\"text-lg font-semibold text-primary\">\r\n                  R$ {(parseFloat(formData.preco) / (parseFloat(formData.potencia) * 1000)).toFixed(2)}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"flex justify-end gap-2 pt-4\">\r\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\r\n                Cancelar\r\n              </Button>\r\n              <Button type=\"submit\">\r\n                {isEditing ? \"Atualizar\" : \"Criar\"} Kit\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\HeatingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\InstitutionManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInstitutions'. Either include it or remove the dependency array.","line":163,"column":6,"nodeType":"ArrayExpression","endLine":163,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [user, profile, loadInstitutions]","fix":{"range":[5338,5353],"text":"[user, profile, loadInstitutions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Building2, Plus, Edit, Trash2, Star, StarOff, Phone, Mail, Globe, MapPin, User, Briefcase, Calendar, DollarSign, FileText, Filter, Search, Download, Upload } from 'lucide-react';\n\nexport interface FinancialInstitution {\n  id: string;\n  nome: string;\n  tipo: 'banco' | 'financeira' | 'cooperativa' | 'fintech';\n  cnpj?: string;\n  telefone?: string;\n  email?: string;\n  website?: string;\n  endereco?: string;\n  cidade?: string;\n  estado?: string;\n  cep?: string;\n  contato_principal?: string;\n  cargo_contato?: string;\n  telefone_contato?: string;\n  email_contato?: string;\n  observacoes?: string;\n  ativo: boolean;\n  favorito: boolean;\n  taxa_juros_min?: number;\n  taxa_juros_max?: number;\n  prazo_min_meses?: number;\n  prazo_max_meses?: number;\n  valor_min_financiamento?: number;\n  valor_max_financiamento?: number;\n  aceita_pessoa_fisica: boolean;\n  aceita_pessoa_juridica: boolean;\n  documentos_necessarios?: string[];\n  tempo_aprovacao_dias?: number;\n  empresa_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\nconst InstitutionManager: React.FC = () => {\n  const { user, profile } = useAuth();\n  const { toast } = useToast();\n  const [institutions, setInstitutions] = useState<FinancialInstitution[]>([]);\n  const [filteredInstitutions, setFilteredInstitutions] = useState<FinancialInstitution[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingInstitution, setEditingInstitution] = useState<FinancialInstitution | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [activeFilter, setActiveFilter] = useState<string>('all');\n  const [favoriteFilter, setFavoriteFilter] = useState<string>('all');\n\n  // Form state\n  const [formData, setFormData] = useState<Partial<FinancialInstitution>>({\n    nome: '',\n    tipo: 'banco',\n    cnpj: '',\n    telefone: '',\n    email: '',\n    website: '',\n    endereco: '',\n    cidade: '',\n    estado: '',\n    cep: '',\n    contato_principal: '',\n    cargo_contato: '',\n    telefone_contato: '',\n    email_contato: '',\n    observacoes: '',\n    ativo: true,\n    favorito: false,\n    taxa_juros_min: 0,\n    taxa_juros_max: 0,\n    prazo_min_meses: 12,\n    prazo_max_meses: 120,\n    valor_min_financiamento: 0,\n    valor_max_financiamento: 0,\n    aceita_pessoa_fisica: true,\n    aceita_pessoa_juridica: true,\n    documentos_necessarios: [],\n    tempo_aprovacao_dias: 30\n  });\n\n  const [documentInput, setDocumentInput] = useState('');\n\n  // Load institutions\n  const loadInstitutions = async () => {\n    if (!user || !profile?.empresa_id) return;\n\n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('instituicoes_financeiras')\n        .select('*')\n        .eq('empresa_id', profile.empresa_id)\n        .order('nome');\n\n      if (error) throw error;\n\n      setInstitutions(data || []);\n      setFilteredInstitutions(data || []);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao carregar instituições',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Filter institutions\n  useEffect(() => {\n    let filtered = institutions;\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(inst => \n        inst.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        inst.cnpj?.includes(searchTerm) ||\n        inst.contato_principal?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Type filter\n    if (typeFilter !== 'all') {\n      filtered = filtered.filter(inst => inst.tipo === typeFilter);\n    }\n\n    // Active filter\n    if (activeFilter !== 'all') {\n      filtered = filtered.filter(inst => \n        activeFilter === 'active' ? inst.ativo : !inst.ativo\n      );\n    }\n\n    // Favorite filter\n    if (favoriteFilter !== 'all') {\n      filtered = filtered.filter(inst => \n        favoriteFilter === 'favorite' ? inst.favorito : !inst.favorito\n      );\n    }\n\n    setFilteredInstitutions(filtered);\n  }, [institutions, searchTerm, typeFilter, activeFilter, favoriteFilter]);\n\n  useEffect(() => {\n    loadInstitutions();\n  }, [user, profile]);\n\n  // Save institution\n  const saveInstitution = async () => {\n    if (!user || !profile?.empresa_id) return;\n\n    if (!formData.nome?.trim()) {\n      toast({\n        title: 'Nome obrigatório',\n        description: 'O nome da instituição é obrigatório.',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const institutionData = {\n        ...formData,\n        empresa_id: profile.empresa_id,\n        documentos_necessarios: formData.documentos_necessarios || []\n      };\n\n      if (editingInstitution) {\n        const { error } = await supabase\n          .from('instituicoes_financeiras')\n          .update(institutionData)\n          .eq('id', editingInstitution.id);\n\n        if (error) throw error;\n\n        toast({\n          title: 'Instituição atualizada',\n          description: 'A instituição foi atualizada com sucesso.'\n        });\n      } else {\n        const { error } = await supabase\n          .from('instituicoes_financeiras')\n          .insert([institutionData]);\n\n        if (error) throw error;\n\n        toast({\n          title: 'Instituição criada',\n          description: 'A instituição foi criada com sucesso.'\n        });\n      }\n\n      resetForm();\n      setIsDialogOpen(false);\n      loadInstitutions();\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao salvar instituição',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Delete institution\n  const deleteInstitution = async (id: string) => {\n    if (!confirm('Tem certeza que deseja excluir esta instituição?')) return;\n\n    setIsLoading(true);\n    try {\n      const { error } = await supabase\n        .from('instituicoes_financeiras')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n\n      toast({\n        title: 'Instituição excluída',\n        description: 'A instituição foi excluída com sucesso.'\n      });\n\n      loadInstitutions();\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao excluir instituição',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Toggle favorite\n  const toggleFavorite = async (institution: FinancialInstitution) => {\n    setIsLoading(true);\n    try {\n      const { error } = await supabase\n        .from('instituicoes_financeiras')\n        .update({ favorito: !institution.favorito })\n        .eq('id', institution.id);\n\n      if (error) throw error;\n\n      loadInstitutions();\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao atualizar favorito',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setFormData({\n      nome: '',\n      tipo: 'banco',\n      cnpj: '',\n      telefone: '',\n      email: '',\n      website: '',\n      endereco: '',\n      cidade: '',\n      estado: '',\n      cep: '',\n      contato_principal: '',\n      cargo_contato: '',\n      telefone_contato: '',\n      email_contato: '',\n      observacoes: '',\n      ativo: true,\n      favorito: false,\n      taxa_juros_min: 0,\n      taxa_juros_max: 0,\n      prazo_min_meses: 12,\n      prazo_max_meses: 120,\n      valor_min_financiamento: 0,\n      valor_max_financiamento: 0,\n      aceita_pessoa_fisica: true,\n      aceita_pessoa_juridica: true,\n      documentos_necessarios: [],\n      tempo_aprovacao_dias: 30\n    });\n    setEditingInstitution(null);\n    setDocumentInput('');\n  };\n\n  // Edit institution\n  const editInstitution = (institution: FinancialInstitution) => {\n    setFormData(institution);\n    setEditingInstitution(institution);\n    setIsDialogOpen(true);\n  };\n\n  // Add document\n  const addDocument = () => {\n    if (documentInput.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        documentos_necessarios: [...(prev.documentos_necessarios || []), documentInput.trim()]\n      }));\n      setDocumentInput('');\n    }\n  };\n\n  // Remove document\n  const removeDocument = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      documentos_necessarios: prev.documentos_necessarios?.filter((_, i) => i !== index) || []\n    }));\n  };\n\n  const getTypeLabel = (type: string) => {\n    const types = {\n      banco: 'Banco',\n      financeira: 'Financeira',\n      cooperativa: 'Cooperativa',\n      fintech: 'Fintech'\n    };\n    return types[type as keyof typeof types] || type;\n  };\n\n  const getTypeBadgeColor = (type: string) => {\n    const colors = {\n      banco: 'bg-blue-100 text-blue-800',\n      financeira: 'bg-green-100 text-green-800',\n      cooperativa: 'bg-purple-100 text-purple-800',\n      fintech: 'bg-orange-100 text-orange-800'\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight flex items-center gap-2\">\n            <Building2 className=\"h-6 w-6\" />\n            Instituições Financeiras\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Gerencie as instituições financeiras para financiamento de projetos\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nova Instituição\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingInstitution ? 'Editar Instituição' : 'Nova Instituição'}\n              </DialogTitle>\n              <DialogDescription>\n                {editingInstitution \n                  ? 'Atualize as informações da instituição financeira'\n                  : 'Cadastre uma nova instituição financeira'\n                }\n              </DialogDescription>\n            </DialogHeader>\n\n            <Tabs defaultValue=\"basic\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"basic\">Básico</TabsTrigger>\n                <TabsTrigger value=\"contact\">Contato</TabsTrigger>\n                <TabsTrigger value=\"financial\">Financeiro</TabsTrigger>\n                <TabsTrigger value=\"documents\">Documentos</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nome\">Nome da Instituição *</Label>\n                    <Input\n                      id=\"nome\"\n                      value={formData.nome}\n                      onChange={(e) => setFormData(prev => ({ ...prev, nome: e.target.value }))}\n                      placeholder=\"Ex: Banco do Brasil\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"tipo\">Tipo</Label>\n                    <Select\n                      value={formData.tipo}\n                      onValueChange={(value: string) => setFormData(prev => ({ ...prev, tipo: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"banco\">Banco</SelectItem>\n                        <SelectItem value=\"financeira\">Financeira</SelectItem>\n                        <SelectItem value=\"cooperativa\">Cooperativa</SelectItem>\n                        <SelectItem value=\"fintech\">Fintech</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cnpj\">CNPJ</Label>\n                    <Input\n                      id=\"cnpj\"\n                      value={formData.cnpj}\n                      onChange={(e) => setFormData(prev => ({ ...prev, cnpj: e.target.value }))}\n                      placeholder=\"00.000.000/0001-00\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input\n                      id=\"website\"\n                      value={formData.website}\n                      onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n                      placeholder=\"https://www.exemplo.com.br\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"endereco\">Endereço</Label>\n                  <Input\n                    id=\"endereco\"\n                    value={formData.endereco}\n                    onChange={(e) => setFormData(prev => ({ ...prev, endereco: e.target.value }))}\n                    placeholder=\"Rua, número, bairro\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cidade\">Cidade</Label>\n                    <Input\n                      id=\"cidade\"\n                      value={formData.cidade}\n                      onChange={(e) => setFormData(prev => ({ ...prev, cidade: e.target.value }))}\n                      placeholder=\"São Paulo\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"estado\">Estado</Label>\n                    <Input\n                      id=\"estado\"\n                      value={formData.estado}\n                      onChange={(e) => setFormData(prev => ({ ...prev, estado: e.target.value }))}\n                      placeholder=\"SP\"\n                      maxLength={2}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cep\">CEP</Label>\n                    <Input\n                      id=\"cep\"\n                      value={formData.cep}\n                      onChange={(e) => setFormData(prev => ({ ...prev, cep: e.target.value }))}\n                      placeholder=\"00000-000\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"ativo\"\n                      checked={formData.ativo}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, ativo: checked }))}\n                    />\n                    <Label htmlFor=\"ativo\">Ativo</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"favorito\"\n                      checked={formData.favorito}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, favorito: checked }))}\n                    />\n                    <Label htmlFor=\"favorito\">Favorito</Label>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"contact\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"telefone\">Telefone Geral</Label>\n                    <Input\n                      id=\"telefone\"\n                      value={formData.telefone}\n                      onChange={(e) => setFormData(prev => ({ ...prev, telefone: e.target.value }))}\n                      placeholder=\"(11) 1234-5678\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Geral</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      placeholder=\"contato@instituicao.com.br\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contato_principal\">Contato Principal</Label>\n                    <Input\n                      id=\"contato_principal\"\n                      value={formData.contato_principal}\n                      onChange={(e) => setFormData(prev => ({ ...prev, contato_principal: e.target.value }))}\n                      placeholder=\"Nome do responsável\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cargo_contato\">Cargo</Label>\n                    <Input\n                      id=\"cargo_contato\"\n                      value={formData.cargo_contato}\n                      onChange={(e) => setFormData(prev => ({ ...prev, cargo_contato: e.target.value }))}\n                      placeholder=\"Gerente de Energia Renovável\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"telefone_contato\">Telefone do Contato</Label>\n                    <Input\n                      id=\"telefone_contato\"\n                      value={formData.telefone_contato}\n                      onChange={(e) => setFormData(prev => ({ ...prev, telefone_contato: e.target.value }))}\n                      placeholder=\"(11) 9999-8888\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email_contato\">Email do Contato</Label>\n                    <Input\n                      id=\"email_contato\"\n                      type=\"email\"\n                      value={formData.email_contato}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email_contato: e.target.value }))}\n                      placeholder=\"responsavel@instituicao.com.br\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"observacoes\">Observações</Label>\n                  <Textarea\n                    id=\"observacoes\"\n                    value={formData.observacoes}\n                    onChange={(e) => setFormData(prev => ({ ...prev, observacoes: e.target.value }))}\n                    placeholder=\"Informações adicionais sobre a instituição...\"\n                    rows={4}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"financial\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxa_juros_min\">Taxa de Juros Mínima (%)</Label>\n                    <Input\n                      id=\"taxa_juros_min\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.taxa_juros_min}\n                      onChange={(e) => setFormData(prev => ({ ...prev, taxa_juros_min: parseFloat(e.target.value) || 0 }))}\n                      placeholder=\"1.5\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxa_juros_max\">Taxa de Juros Máxima (%)</Label>\n                    <Input\n                      id=\"taxa_juros_max\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.taxa_juros_max}\n                      onChange={(e) => setFormData(prev => ({ ...prev, taxa_juros_max: parseFloat(e.target.value) || 0 }))}\n                      placeholder=\"3.5\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"prazo_min_meses\">Prazo Mínimo (meses)</Label>\n                    <Input\n                      id=\"prazo_min_meses\"\n                      type=\"number\"\n                      value={formData.prazo_min_meses}\n                      onChange={(e) => setFormData(prev => ({ ...prev, prazo_min_meses: parseInt(e.target.value) || 0 }))}\n                      placeholder=\"12\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"prazo_max_meses\">Prazo Máximo (meses)</Label>\n                    <Input\n                      id=\"prazo_max_meses\"\n                      type=\"number\"\n                      value={formData.prazo_max_meses}\n                      onChange={(e) => setFormData(prev => ({ ...prev, prazo_max_meses: parseInt(e.target.value) || 0 }))}\n                      placeholder=\"120\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"valor_min_financiamento\">Valor Mínimo (R$)</Label>\n                    <Input\n                      id=\"valor_min_financiamento\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.valor_min_financiamento}\n                      onChange={(e) => setFormData(prev => ({ ...prev, valor_min_financiamento: parseFloat(e.target.value) || 0 }))}\n                      placeholder=\"50000.00\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"valor_max_financiamento\">Valor Máximo (R$)</Label>\n                    <Input\n                      id=\"valor_max_financiamento\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.valor_max_financiamento}\n                      onChange={(e) => setFormData(prev => ({ ...prev, valor_max_financiamento: parseFloat(e.target.value) || 0 }))}\n                      placeholder=\"2000000.00\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tempo_aprovacao_dias\">Tempo de Aprovação (dias)</Label>\n                  <Input\n                    id=\"tempo_aprovacao_dias\"\n                    type=\"number\"\n                    value={formData.tempo_aprovacao_dias}\n                    onChange={(e) => setFormData(prev => ({ ...prev, tempo_aprovacao_dias: parseInt(e.target.value) || 0 }))}\n                    placeholder=\"30\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"aceita_pessoa_fisica\"\n                      checked={formData.aceita_pessoa_fisica}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, aceita_pessoa_fisica: checked }))}\n                    />\n                    <Label htmlFor=\"aceita_pessoa_fisica\">Aceita Pessoa Física</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"aceita_pessoa_juridica\"\n                      checked={formData.aceita_pessoa_juridica}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, aceita_pessoa_juridica: checked }))}\n                    />\n                    <Label htmlFor=\"aceita_pessoa_juridica\">Aceita Pessoa Jurídica</Label>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"documents\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Documentos Necessários</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      value={documentInput}\n                      onChange={(e) => setDocumentInput(e.target.value)}\n                      placeholder=\"Ex: CPF/CNPJ\"\n                      onKeyPress={(e) => e.key === 'Enter' && addDocument()}\n                    />\n                    <Button type=\"button\" onClick={addDocument}>\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {formData.documentos_necessarios?.map((doc, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                      <span>{doc}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeDocument(index)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={saveInstitution} disabled={isLoading}>\n                {isLoading ? 'Salvando...' : editingInstitution ? 'Atualizar' : 'Criar'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search\">Buscar</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Nome, CNPJ ou contato...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Tipo</Label>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"banco\">Banco</SelectItem>\n                  <SelectItem value=\"financeira\">Financeira</SelectItem>\n                  <SelectItem value=\"cooperativa\">Cooperativa</SelectItem>\n                  <SelectItem value=\"fintech\">Fintech</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Status</Label>\n              <Select value={activeFilter} onValueChange={setActiveFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"active\">Ativos</SelectItem>\n                  <SelectItem value=\"inactive\">Inativos</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Favoritos</Label>\n              <Select value={favoriteFilter} onValueChange={setFavoriteFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"favorite\">Favoritos</SelectItem>\n                  <SelectItem value=\"not-favorite\">Não Favoritos</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Ações</Label>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Upload className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Institutions Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Instituições Cadastradas ({filteredInstitutions.length})</CardTitle>\n          <CardDescription>\n            Lista de todas as instituições financeiras cadastradas\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Tipo</TableHead>\n                  <TableHead>Contato</TableHead>\n                  <TableHead>Taxa (%)</TableHead>\n                  <TableHead>Prazo</TableHead>\n                  <TableHead>Valor</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredInstitutions.map((institution) => (\n                  <TableRow key={institution.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div>\n                          <div className=\"font-medium\">{institution.nome}</div>\n                          {institution.cnpj && (\n                            <div className=\"text-sm text-muted-foreground\">{institution.cnpj}</div>\n                          )}\n                        </div>\n                        {institution.favorito && (\n                          <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getTypeBadgeColor(institution.tipo)}>\n                        {getTypeLabel(institution.tipo)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {institution.contato_principal && (\n                          <div className=\"flex items-center gap-1 text-sm\">\n                            <User className=\"h-3 w-3\" />\n                            {institution.contato_principal}\n                          </div>\n                        )}\n                        {institution.telefone_contato && (\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Phone className=\"h-3 w-3\" />\n                            {institution.telefone_contato}\n                          </div>\n                        )}\n                        {institution.email_contato && (\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Mail className=\"h-3 w-3\" />\n                            {institution.email_contato}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {institution.taxa_juros_min && institution.taxa_juros_max ? (\n                        <div className=\"text-sm\">\n                          {institution.taxa_juros_min}% - {institution.taxa_juros_max}%\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">-</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {institution.prazo_min_meses && institution.prazo_max_meses ? (\n                        <div className=\"text-sm\">\n                          {institution.prazo_min_meses} - {institution.prazo_max_meses} meses\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">-</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {institution.valor_min_financiamento && institution.valor_max_financiamento ? (\n                        <div className=\"text-sm\">\n                          R$ {institution.valor_min_financiamento.toLocaleString()} - \n                          R$ {institution.valor_max_financiamento.toLocaleString()}\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">-</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={institution.ativo ? 'default' : 'secondary'}>\n                          {institution.ativo ? 'Ativo' : 'Inativo'}\n                        </Badge>\n                        {institution.tempo_aprovacao_dias && (\n                          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {institution.tempo_aprovacao_dias}d\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => toggleFavorite(institution)}\n                        >\n                          {institution.favorito ? (\n                            <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                          ) : (\n                            <StarOff className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => editInstitution(institution)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteInstitution(institution.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n\n          {filteredInstitutions.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Building2 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">Nenhuma instituição encontrada</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || typeFilter !== 'all' || activeFilter !== 'all' || favoriteFilter !== 'all'\n                  ? 'Tente ajustar os filtros para encontrar instituições.'\n                  : 'Comece cadastrando sua primeira instituição financeira.'\n                }\n              </p>\n              {!searchTerm && typeFilter === 'all' && activeFilter === 'all' && favoriteFilter === 'all' && (\n                <Button onClick={() => setIsDialogOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Cadastrar Primeira Instituição\n                </Button>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default InstitutionManager;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\InverterManagerAdvanced.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fetchInverters' function makes the dependencies of useEffect Hook (at line 154) change on every render. To fix this, wrap the definition of 'fetchInverters' in its own useCallback() Hook.","line":93,"column":9,"nodeType":"VariableDeclarator","endLine":150,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'fetchInverters' in its own useCallback() Hook.","fix":{"range":[3580,5847],"text":"useCallback(async (retryCount = 0) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const demoDataService = DemoDataService.getInstance();\r\n      \r\n      if (demoDataService.shouldUseDemoData()) {\r\n        // Usar dados de demonstração em localhost\r\n        const demoInverters = demoDataService.getInverters();\r\n        setInverters(demoInverters);\r\n      } else {\r\n        // Verificar autenticação antes de fazer a consulta\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (!user) {\r\n          throw new Error('Usuário não autenticado');\r\n        }\r\n\r\n        // Usar dados do Supabase em produção\r\n        const { data, error } = await supabase\r\n          .from('inverters' as never)\r\n          .select('*')\r\n          .order('name');\r\n\r\n        if (error) {\r\n          // Tratamento específico para diferentes tipos de erro\r\n          if (error.code === 'PGRST116') {\r\n            throw new Error('Tabela de inversores não encontrada. Verifique a configuração do banco de dados.');\r\n          } else if (error.code === '42501') {\r\n            throw new Error('Permissão negada para acessar os inversores. Verifique suas credenciais.');\r\n          } else if (error.message?.includes('connection')) {\r\n            throw new Error('Erro de conexão com o banco de dados. Verifique sua conexão com a internet.');\r\n          }\r\n          throw error;\r\n        }\r\n        setInverters(data || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching inverters:', error);\r\n      \r\n      // Retry automático para erros de conexão (máximo 2 tentativas)\r\n      if (retryCount < 2 && (error as Error).message?.includes('connection')) {\r\n        console.log(`Tentando novamente carregar inversores (tentativa ${retryCount + 1})...`);\r\n        setTimeout(() => fetchInverters(retryCount + 1), 2000);\r\n        return;\r\n      }\r\n      \r\n      // Fallback: usar dados vazios em caso de erro persistente\r\n      setInverters([]);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível carregar os inversores';\r\n      toast({\r\n        title: \"Erro ao carregar inversores\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n// Remove unused Badge import\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Plus, Edit, Trash2, Save, FileText, Zap } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Inverter } from \"@/types\";\r\nimport { DemoDataService } from \"@/services/DemoDataService\";\r\nimport { FileUpload } from \"@/components/ui/file-upload\";\r\n\r\nexport function InverterManagerAdvanced() {\r\n  const { toast } = useToast();\r\n  const [inverters, setInverters] = useState<Inverter[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [selectedProtections, setSelectedProtections] = useState<string[]>([]);\r\n  const [selectedCertifications, setSelectedCertifications] = useState<string[]>([]);\r\n  const [selectedCommunicationInterfaces, setSelectedCommunicationInterfaces] = useState<string[]>([]);\r\n\r\n  const [currentInverter, setCurrentInverter] = useState<Inverter>({\r\n    name: \"\",\r\n    manufacturer: \"\",\r\n    model: \"\",\r\n    power: 0,\r\n    maxDcPower: 0,\r\n    maxDcVoltage: 0,\r\n    startupVoltage: 0,\r\n    nominalDcVoltage: 0,\r\n    maxDcCurrent: 0,\r\n    mpptChannels: 2,\r\n    maxInputsPerMppt: 1,\r\n    nominalAcPower: 0,\r\n    maxAcPower: 0,\r\n    nominalAcVoltage: 220,\r\n    acVoltageRange: \"180-264V\",\r\n    nominalFrequency: 60,\r\n    frequencyRange: \"59.3-60.5Hz\",\r\n    phases: 1,\r\n    maxAcCurrent: 0,\r\n    powerFactor: 0.99,\r\n    maxEfficiency: 97.5,\r\n    europeanEfficiency: 97.0,\r\n    mpptEfficiency: 99.9,\r\n    protections: [],\r\n    dimensions: {\r\n      length: 0,\r\n      width: 0,\r\n      height: 0\r\n    },\r\n    weight: 0,\r\n    operatingTemperature: \"-25°C a +60°C\",\r\n    storageTemperature: \"-40°C a +70°C\",\r\n    humidity: \"0-95% (sem condensação)\",\r\n    altitude: 2000,\r\n    coolingMethod: \"Convecção natural\",\r\n    enclosureRating: \"IP65\",\r\n    productWarranty: 10,\r\n    performanceWarranty: 10,\r\n    designLife: 20,\r\n    certifications: [],\r\n    communicationInterfaces: [],\r\n    monitoringCapability: true,\r\n    topology: \"Transformerless\",\r\n    displayType: \"LCD\",\r\n    active: true\r\n  });\r\n\r\n  const availableProtections = [\r\n    \"Sobretensão DC\", \"Subtensão DC\", \"Sobrecorrente DC\", \"Polaridade reversa\",\r\n    \"Sobretensão AC\", \"Subtensão AC\", \"Sobrefrequência\", \"Subfrequência\",\r\n    \"Proteção de ilhamento\", \"Proteção térmica\", \"Proteção AFCI\", \"Proteção RCMU\"\r\n  ];\r\n\r\n  const availableCertifications = [\r\n    \"IEC 62109\", \"IEC 61727\", \"IEC 62116\", \"UL 1741\", \"IEEE 1547\",\r\n    \"VDE 0126\", \"G83/2\", \"AS 4777\", \"INMETRO\", \"CEC\", \"MCS\"\r\n  ];\r\n\r\n  const availableCommunicationInterfaces = [\r\n    \"WiFi\", \"Ethernet\", \"RS485\", \"Bluetooth\", \"4G/LTE\", \"Zigbee\", \"LoRa\", \"USB\"\r\n  ];\r\n\r\n  const fetchInverters = async (retryCount = 0) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const demoDataService = DemoDataService.getInstance();\r\n      \r\n      if (demoDataService.shouldUseDemoData()) {\r\n        // Usar dados de demonstração em localhost\r\n        const demoInverters = demoDataService.getInverters();\r\n        setInverters(demoInverters);\r\n      } else {\r\n        // Verificar autenticação antes de fazer a consulta\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (!user) {\r\n          throw new Error('Usuário não autenticado');\r\n        }\r\n\r\n        // Usar dados do Supabase em produção\r\n        const { data, error } = await supabase\r\n          .from('inverters' as never)\r\n          .select('*')\r\n          .order('name');\r\n\r\n        if (error) {\r\n          // Tratamento específico para diferentes tipos de erro\r\n          if (error.code === 'PGRST116') {\r\n            throw new Error('Tabela de inversores não encontrada. Verifique a configuração do banco de dados.');\r\n          } else if (error.code === '42501') {\r\n            throw new Error('Permissão negada para acessar os inversores. Verifique suas credenciais.');\r\n          } else if (error.message?.includes('connection')) {\r\n            throw new Error('Erro de conexão com o banco de dados. Verifique sua conexão com a internet.');\r\n          }\r\n          throw error;\r\n        }\r\n        setInverters(data || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching inverters:', error);\r\n      \r\n      // Retry automático para erros de conexão (máximo 2 tentativas)\r\n      if (retryCount < 2 && (error as Error).message?.includes('connection')) {\r\n        console.log(`Tentando novamente carregar inversores (tentativa ${retryCount + 1})...`);\r\n        setTimeout(() => fetchInverters(retryCount + 1), 2000);\r\n        return;\r\n      }\r\n      \r\n      // Fallback: usar dados vazios em caso de erro persistente\r\n      setInverters([]);\r\n      \r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível carregar os inversores';\r\n      toast({\r\n        title: \"Erro ao carregar inversores\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchInverters();\r\n  }, [fetchInverters]);\r\n\r\n  const handleSaveInverter = async () => {\r\n    try {\r\n      // Verificar autenticação\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado. Faça login novamente.');\r\n      }\r\n\r\n      // Validar dados obrigatórios\r\n      if (!currentInverter.name || !currentInverter.manufacturer || !currentInverter.model) {\r\n        throw new Error('Nome, fabricante e modelo são obrigatórios.');\r\n      }\r\n\r\n      // Preparar o inversor com os dados atualizados\r\n      const inverterToSave: Inverter = {\r\n        ...currentInverter,\r\n        protections: selectedProtections,\r\n        certifications: selectedCertifications,\r\n        communicationInterfaces: selectedCommunicationInterfaces\r\n      };\r\n\r\n      let result;\r\n      \r\n      if (isEditing && currentInverter.id) {\r\n        // Atualizar inversor existente\r\n        result = await supabase\r\n          .from('inverters' as never)\r\n          .update(inverterToSave as never)\r\n          .eq('id', currentInverter.id);\r\n      } else {\r\n        // Criar novo inversor\r\n        result = await supabase\r\n          .from('inverters' as never)\r\n          .insert(inverterToSave as never);\r\n      }\r\n\r\n      if (result.error) {\r\n        if (result.error.code === '23505') {\r\n          throw new Error('Já existe um inversor com este nome e modelo.');\r\n        } else if (result.error.code === '42501') {\r\n          throw new Error('Permissão negada para salvar o inversor.');\r\n        }\r\n        throw result.error;\r\n      }\r\n\r\n      toast({\r\n        title: isEditing ? \"Inversor Atualizado\" : \"Inversor Criado\",\r\n        description: `${inverterToSave.name} foi ${isEditing ? 'atualizado' : 'adicionado'} com sucesso`,\r\n      });\r\n\r\n      setIsDialogOpen(false);\r\n      fetchInverters();\r\n    } catch (error) {\r\n      console.error('Error saving inverter:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível salvar o inversor';\r\n      toast({\r\n        title: \"Erro ao salvar inversor\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteInverter = async (id: string) => {\r\n    if (!confirm(\"Tem certeza que deseja excluir este inversor?\")) return;\r\n\r\n    try {\r\n      // Verificar autenticação\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado. Faça login novamente.');\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('inverters' as never)\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) {\r\n        if (error.code === '42501') {\r\n          throw new Error('Permissão negada para excluir o inversor.');\r\n        } else if (error.code === '23503') {\r\n          throw new Error('Não é possível excluir este inversor pois ele está sendo usado em projetos.');\r\n        }\r\n        throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Inversor Excluído\",\r\n        description: \"O inversor foi excluído com sucesso\",\r\n      });\r\n\r\n      fetchInverters();\r\n    } catch (error) {\r\n      console.error('Error deleting inverter:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Não foi possível excluir o inversor';\r\n      toast({\r\n        title: \"Erro ao excluir inversor\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditInverter = (inverter: Inverter) => {\r\n    setCurrentInverter(inverter);\r\n    setSelectedProtections(inverter.protections || []);\r\n    setSelectedCertifications(inverter.certifications || []);\r\n    setSelectedCommunicationInterfaces(inverter.communicationInterfaces || []);\r\n    setIsEditing(true);\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleNewInverter = () => {\r\n    setCurrentInverter({\r\n      name: \"\",\r\n      manufacturer: \"\",\r\n      model: \"\",\r\n      power: 0,\r\n      maxDcPower: 0,\r\n      maxDcVoltage: 0,\r\n      startupVoltage: 0,\r\n      nominalDcVoltage: 0,\r\n      maxDcCurrent: 0,\r\n      mpptChannels: 2,\r\n      maxInputsPerMppt: 1,\r\n      nominalAcPower: 0,\r\n      maxAcPower: 0,\r\n      nominalAcVoltage: 220,\r\n      acVoltageRange: \"180-264V\",\r\n      nominalFrequency: 60,\r\n      frequencyRange: \"59.3-60.5Hz\",\r\n      phases: 1,\r\n      maxAcCurrent: 0,\r\n      powerFactor: 0.99,\r\n      maxEfficiency: 97.5,\r\n      europeanEfficiency: 97.0,\r\n      mpptEfficiency: 99.9,\r\n      protections: [],\r\n      dimensions: {\r\n        length: 0,\r\n        width: 0,\r\n        height: 0\r\n      },\r\n      weight: 0,\r\n      operatingTemperature: \"-25°C a +60°C\",\r\n      storageTemperature: \"-40°C a +70°C\",\r\n      humidity: \"0-95% (sem condensação)\",\r\n      altitude: 2000,\r\n      coolingMethod: \"Convecção natural\",\r\n      enclosureRating: \"IP65\",\r\n      productWarranty: 10,\r\n      performanceWarranty: 10,\r\n      designLife: 20,\r\n      certifications: [],\r\n      communicationInterfaces: [],\r\n      monitoringCapability: true,\r\n      topology: \"Transformerless\",\r\n      displayType: \"LCD\",\r\n      active: true\r\n    });\r\n    setSelectedProtections([]);\r\n    setSelectedCertifications([]);\r\n    setSelectedCommunicationInterfaces([]);\r\n    setIsEditing(false);\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleProtectionToggle = (protection: string) => {\r\n    if (selectedProtections.includes(protection)) {\r\n      setSelectedProtections(selectedProtections.filter(p => p !== protection));\r\n    } else {\r\n      setSelectedProtections([...selectedProtections, protection]);\r\n    }\r\n  };\r\n\r\n  const handleCertificationToggle = (cert: string) => {\r\n    if (selectedCertifications.includes(cert)) {\r\n      setSelectedCertifications(selectedCertifications.filter(c => c !== cert));\r\n    } else {\r\n      setSelectedCertifications([...selectedCertifications, cert]);\r\n    }\r\n  };\r\n\r\n  const handleCommunicationToggle = (comm: string) => {\r\n    if (selectedCommunicationInterfaces.includes(comm)) {\r\n      setSelectedCommunicationInterfaces(selectedCommunicationInterfaces.filter(c => c !== comm));\r\n    } else {\r\n      setSelectedCommunicationInterfaces([...selectedCommunicationInterfaces, comm]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-5 w-5 text-primary\" />\r\n                Gerenciador de Inversores\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Gerencie os inversores disponíveis para simulação\r\n              </CardDescription>\r\n            </div>\r\n            <Button onClick={handleNewInverter}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Novo Inversor\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {isLoading ? (\r\n            <div className=\"text-center py-8\">\r\n              <div className=\"animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\r\n              <p className=\"text-muted-foreground\">Carregando inversores...</p>\r\n            </div>\r\n          ) : inverters.length === 0 ? (\r\n            <div className=\"text-center py-8 border rounded-lg\">\r\n              <Zap className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\r\n              <p className=\"text-muted-foreground\">Nenhum inversor cadastrado</p>\r\n              <Button onClick={handleNewInverter} variant=\"outline\" className=\"mt-4\">\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Adicionar Inversor\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"border rounded-lg overflow-hidden\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Nome</TableHead>\r\n                    <TableHead>Fabricante</TableHead>\r\n                    <TableHead>Potência</TableHead>\r\n                    <TableHead>Fases</TableHead>\r\n                    <TableHead>Eficiência</TableHead>\r\n                    <TableHead>Ações</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {inverters.map((inverter) => (\r\n                    <TableRow key={inverter.id}>\r\n                      <TableCell className=\"font-medium\">{inverter.name}</TableCell>\r\n                      <TableCell>{inverter.manufacturer}</TableCell>\r\n                      <TableCell>{inverter.power}W</TableCell>\r\n                      <TableCell>{inverter.phases === 1 ? \"Monofásico\" : \"Trifásico\"}</TableCell>\r\n                      <TableCell>{inverter.maxEfficiency}%</TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {inverter.datasheet && (\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"ghost\"\r\n                              onClick={() => window.open(inverter.datasheet, '_blank')}\r\n                              title=\"Ver datasheet\"\r\n                            >\r\n                              <FileText className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          )}\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"ghost\"\r\n                            onClick={() => handleEditInverter(inverter)}\r\n                            title=\"Editar inversor\"\r\n                          >\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"ghost\"\r\n                            onClick={() => handleDeleteInverter(inverter.id!)}\r\n                            title=\"Excluir inversor\"\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>{isEditing ? \"Editar Inversor\" : \"Novo Inversor\"}</DialogTitle>\r\n            <DialogDescription>\r\n              {isEditing \r\n                ? \"Atualize as informações do inversor\" \r\n                : \"Preencha as informações para adicionar um novo inversor\"}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n\r\n          <Tabs defaultValue=\"basic\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-6\">\r\n              <TabsTrigger value=\"basic\">Básico</TabsTrigger>\r\n              <TabsTrigger value=\"dc\">DC</TabsTrigger>\r\n              <TabsTrigger value=\"ac\">AC</TabsTrigger>\r\n              <TabsTrigger value=\"physical\">Físico</TabsTrigger>\r\n              <TabsTrigger value=\"protections\">Proteções</TabsTrigger>\r\n              <TabsTrigger value=\"warranty\">Garantias</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"basic\" className=\"space-y-4 mt-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"name\">Nome do Inversor</Label>\r\n                  <Input\r\n                    id=\"name\"\r\n                    value={currentInverter.name}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, name: e.target.value })}\r\n                    placeholder=\"Ex: Fronius Primo 5.0-1\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"manufacturer\">Fabricante</Label>\r\n                  <Input\r\n                    id=\"manufacturer\"\r\n                    value={currentInverter.manufacturer}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, manufacturer: e.target.value })}\r\n                    placeholder=\"Ex: Fronius\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"model\">Modelo</Label>\r\n                  <Input\r\n                    id=\"model\"\r\n                    value={currentInverter.model}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, model: e.target.value })}\r\n                    placeholder=\"Ex: Primo 5.0-1\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"power\">Potência Nominal (W)</Label>\r\n                  <Input\r\n                    id=\"power\"\r\n                    type=\"number\"\r\n                    value={currentInverter.power}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, power: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 5000\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"topology\">Topologia</Label>\r\n                  <Select \r\n                    value={currentInverter.topology} \r\n                    onValueChange={(value) => setCurrentInverter({ ...currentInverter, topology: value })}\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Selecione a topologia\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"Transformerless\">Transformerless</SelectItem>\r\n                      <SelectItem value=\"HF Transformer\">HF Transformer</SelectItem>\r\n                      <SelectItem value=\"LF Transformer\">LF Transformer</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"displayType\">Tipo de Display</Label>\r\n                  <Select \r\n                    value={currentInverter.displayType} \r\n                    onValueChange={(value) => setCurrentInverter({ ...currentInverter, displayType: value })}\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Selecione o tipo de display\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"LCD\">LCD</SelectItem>\r\n                      <SelectItem value=\"LED\">LED</SelectItem>\r\n                      <SelectItem value=\"OLED\">OLED</SelectItem>\r\n                      <SelectItem value=\"Sem Display\">Sem Display</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label className=\"text-base font-medium\">Eficiência</Label>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"maxEfficiency\">Eficiência Máxima (%)</Label>\r\n                    <Input\r\n                      id=\"maxEfficiency\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      value={currentInverter.maxEfficiency}\r\n                      onChange={(e) => setCurrentInverter({ ...currentInverter, maxEfficiency: Number(e.target.value) })}\r\n                      placeholder=\"Ex: 97.5\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"europeanEfficiency\">Eficiência Europeia (%)</Label>\r\n                    <Input\r\n                      id=\"europeanEfficiency\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      value={currentInverter.europeanEfficiency}\r\n                      onChange={(e) => setCurrentInverter({ ...currentInverter, europeanEfficiency: Number(e.target.value) })}\r\n                      placeholder=\"Ex: 97.0\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"mpptEfficiency\">Eficiência MPPT (%)</Label>\r\n                    <Input\r\n                      id=\"mpptEfficiency\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      value={currentInverter.mpptEfficiency}\r\n                      onChange={(e) => setCurrentInverter({ ...currentInverter, mpptEfficiency: Number(e.target.value) })}\r\n                      placeholder=\"Ex: 99.9\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </TabsContent>        \r\n    <TabsContent value=\"dc\" className=\"space-y-4 mt-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"maxDcPower\">Potência Máxima DC (W)</Label>\r\n                  <Input\r\n                    id=\"maxDcPower\"\r\n                    type=\"number\"\r\n                    value={currentInverter.maxDcPower}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, maxDcPower: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 7500\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"maxDcVoltage\">Tensão Máxima DC (V)</Label>\r\n                  <Input\r\n                    id=\"maxDcVoltage\"\r\n                    type=\"number\"\r\n                    value={currentInverter.maxDcVoltage}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, maxDcVoltage: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 1000\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"startupVoltage\">Tensão de Partida (V)</Label>\r\n                  <Input\r\n                    id=\"startupVoltage\"\r\n                    type=\"number\"\r\n                    value={currentInverter.startupVoltage}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, startupVoltage: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 80\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"nominalDcVoltage\">Tensão Nominal DC (V)</Label>\r\n                  <Input\r\n                    id=\"nominalDcVoltage\"\r\n                    type=\"number\"\r\n                    value={currentInverter.nominalDcVoltage}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, nominalDcVoltage: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 580\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"maxDcCurrent\">Corrente Máxima DC (A)</Label>\r\n                  <Input\r\n                    id=\"maxDcCurrent\"\r\n                    type=\"number\"\r\n                    step=\"0.1\"\r\n                    value={currentInverter.maxDcCurrent}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, maxDcCurrent: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 12.9\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"mpptChannels\">Canais MPPT</Label>\r\n                  <Input\r\n                    id=\"mpptChannels\"\r\n                    type=\"number\"\r\n                    value={currentInverter.mpptChannels}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, mpptChannels: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 2\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"maxInputsPerMppt\">Máx. Entradas por MPPT</Label>\r\n                  <Input\r\n                    id=\"maxInputsPerMppt\"\r\n                    type=\"number\"\r\n                    value={currentInverter.maxInputsPerMppt}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, maxInputsPerMppt: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 1\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"ac\" className=\"space-y-4 mt-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"nominalAcPower\">Potência Nominal AC (W)</Label>\r\n                  <Input\r\n                    id=\"nominalAcPower\"\r\n                    type=\"number\"\r\n                    value={currentInverter.nominalAcPower}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, nominalAcPower: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 5000\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"maxAcPower\">Potência Máxima AC (W)</Label>\r\n                  <Input\r\n                    id=\"maxAcPower\"\r\n                    type=\"number\"\r\n                    value={currentInverter.maxAcPower}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, maxAcPower: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 5000\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"nominalAcVoltage\">Tensão Nominal AC (V)</Label>\r\n                  <Input\r\n                    id=\"nominalAcVoltage\"\r\n                    type=\"number\"\r\n                    value={currentInverter.nominalAcVoltage}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, nominalAcVoltage: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 220\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"acVoltageRange\">Faixa de Tensão AC</Label>\r\n                  <Input\r\n                    id=\"acVoltageRange\"\r\n                    value={currentInverter.acVoltageRange}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, acVoltageRange: e.target.value })}\r\n                    placeholder=\"Ex: 180-264V\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"nominalFrequency\">Frequência Nominal (Hz)</Label>\r\n                  <Input\r\n                    id=\"nominalFrequency\"\r\n                    type=\"number\"\r\n                    value={currentInverter.nominalFrequency}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, nominalFrequency: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 60\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"frequencyRange\">Faixa de Frequência</Label>\r\n                  <Input\r\n                    id=\"frequencyRange\"\r\n                    value={currentInverter.frequencyRange}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, frequencyRange: e.target.value })}\r\n                    placeholder=\"Ex: 59.3-60.5Hz\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"phases\">Número de Fases</Label>\r\n                  <Select \r\n                    value={currentInverter.phases.toString()} \r\n                    onValueChange={(value) => setCurrentInverter({ ...currentInverter, phases: Number(value) })}\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Selecione o número de fases\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"1\">1 (Monofásico)</SelectItem>\r\n                      <SelectItem value=\"3\">3 (Trifásico)</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"maxAcCurrent\">Corrente Máxima AC (A)</Label>\r\n                  <Input\r\n                    id=\"maxAcCurrent\"\r\n                    type=\"number\"\r\n                    step=\"0.1\"\r\n                    value={currentInverter.maxAcCurrent}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, maxAcCurrent: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 22.7\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"powerFactor\">Fator de Potência</Label>\r\n                  <Input\r\n                    id=\"powerFactor\"\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    value={currentInverter.powerFactor}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, powerFactor: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 0.99\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"physical\" className=\"space-y-4 mt-4\">\r\n              <div className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label className=\"text-base font-medium\">Dimensões</Label>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"length\">Comprimento (mm)</Label>\r\n                      <Input\r\n                        id=\"length\"\r\n                        type=\"number\"\r\n                        value={currentInverter.dimensions.length}\r\n                        onChange={(e) => setCurrentInverter({ \r\n                          ...currentInverter, \r\n                          dimensions: { ...currentInverter.dimensions, length: Number(e.target.value) }\r\n                        })}\r\n                        placeholder=\"Ex: 645\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"width\">Largura (mm)</Label>\r\n                      <Input\r\n                        id=\"width\"\r\n                        type=\"number\"\r\n                        value={currentInverter.dimensions.width}\r\n                        onChange={(e) => setCurrentInverter({ \r\n                          ...currentInverter, \r\n                          dimensions: { ...currentInverter.dimensions, width: Number(e.target.value) }\r\n                        })}\r\n                        placeholder=\"Ex: 431\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"height\">Altura (mm)</Label>\r\n                      <Input\r\n                        id=\"height\"\r\n                        type=\"number\"\r\n                        value={currentInverter.dimensions.height}\r\n                        onChange={(e) => setCurrentInverter({ \r\n                          ...currentInverter, \r\n                          dimensions: { ...currentInverter.dimensions, height: Number(e.target.value) }\r\n                        })}\r\n                        placeholder=\"Ex: 204\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"weight\">Peso (kg)</Label>\r\n                    <Input\r\n                      id=\"weight\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      value={currentInverter.weight}\r\n                      onChange={(e) => setCurrentInverter({ ...currentInverter, weight: Number(e.target.value) })}\r\n                      placeholder=\"Ex: 22.0\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"enclosureRating\">Grau de Proteção</Label>\r\n                    <Select \r\n                      value={currentInverter.enclosureRating} \r\n                      onValueChange={(value) => setCurrentInverter({ ...currentInverter, enclosureRating: value })}\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Selecione o grau de proteção\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"IP65\">IP65</SelectItem>\r\n                        <SelectItem value=\"IP54\">IP54</SelectItem>\r\n                        <SelectItem value=\"IP20\">IP20</SelectItem>\r\n                        <SelectItem value=\"NEMA 4X\">NEMA 4X</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label className=\"text-base font-medium\">Especificações Ambientais</Label>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"operatingTemperature\">Temperatura Operacional</Label>\r\n                      <Input\r\n                        id=\"operatingTemperature\"\r\n                        value={currentInverter.operatingTemperature}\r\n                        onChange={(e) => setCurrentInverter({ ...currentInverter, operatingTemperature: e.target.value })}\r\n                        placeholder=\"Ex: -25°C a +60°C\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"storageTemperature\">Temperatura de Armazenamento</Label>\r\n                      <Input\r\n                        id=\"storageTemperature\"\r\n                        value={currentInverter.storageTemperature}\r\n                        onChange={(e) => setCurrentInverter({ ...currentInverter, storageTemperature: e.target.value })}\r\n                        placeholder=\"Ex: -40°C a +70°C\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"humidity\">Umidade Relativa</Label>\r\n                      <Input\r\n                        id=\"humidity\"\r\n                        value={currentInverter.humidity}\r\n                        onChange={(e) => setCurrentInverter({ ...currentInverter, humidity: e.target.value })}\r\n                        placeholder=\"Ex: 0-95% (sem condensação)\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"altitude\">Altitude Máxima (m)</Label>\r\n                      <Input\r\n                        id=\"altitude\"\r\n                        type=\"number\"\r\n                        value={currentInverter.altitude}\r\n                        onChange={(e) => setCurrentInverter({ ...currentInverter, altitude: Number(e.target.value) })}\r\n                        placeholder=\"Ex: 2000\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"coolingMethod\">Método de Resfriamento</Label>\r\n                      <Select \r\n                        value={currentInverter.coolingMethod} \r\n                        onValueChange={(value) => setCurrentInverter({ ...currentInverter, coolingMethod: value })}\r\n                      >\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Selecione o método de resfriamento\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"Convecção natural\">Convecção Natural</SelectItem>\r\n                          <SelectItem value=\"Ventilação forçada\">Ventilação Forçada</SelectItem>\r\n                          <SelectItem value=\"Líquido\">Resfriamento Líquido</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"protections\" className=\"space-y-4 mt-4\">\r\n              <div className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label className=\"text-base font-medium\">Proteções</Label>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Selecione as proteções que o inversor possui\r\n                  </p>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-2\">\r\n                    {availableProtections.map((protection) => (\r\n                      <div key={protection} className=\"flex items-center space-x-2 border rounded-md p-3 hover:bg-muted/50 transition-colors\">\r\n                        <Checkbox \r\n                          id={`protection-${protection}`} \r\n                          checked={selectedProtections.includes(protection)}\r\n                          onCheckedChange={(checked) => {\r\n                            if (checked) {\r\n                              handleProtectionToggle(protection);\r\n                            } else {\r\n                              handleProtectionToggle(protection);\r\n                            }\r\n                          }}\r\n                        />\r\n                        <Label htmlFor={`protection-${protection}`} className=\"text-sm\">{protection}</Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                \r\n                <Separator />\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <Label className=\"text-base font-medium\">Certificações</Label>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Selecione as certificações que o inversor possui\r\n                  </p>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-2\">\r\n                    {availableCertifications.map((cert) => (\r\n                      <div key={cert} className=\"flex items-center space-x-2 border rounded-md p-3 hover:bg-muted/50 transition-colors\">\r\n                        <Checkbox \r\n                          id={`cert-${cert}`} \r\n                          checked={selectedCertifications.includes(cert)}\r\n                          onCheckedChange={(checked) => {\r\n                            if (checked) {\r\n                              handleCertificationToggle(cert);\r\n                            } else {\r\n                              handleCertificationToggle(cert);\r\n                            }\r\n                          }}\r\n                        />\r\n                        <Label htmlFor={`cert-${cert}`} className=\"text-sm\">{cert}</Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label className=\"text-base font-medium\">Interfaces de Comunicação</Label>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Selecione as interfaces de comunicação disponíveis\r\n                  </p>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mt-2\">\r\n                    {availableCommunicationInterfaces.map((comm) => (\r\n                      <div key={comm} className=\"flex items-center space-x-2 border rounded-md p-3 hover:bg-muted/50 transition-colors\">\r\n                        <Checkbox \r\n                          id={`comm-${comm}`} \r\n                          checked={selectedCommunicationInterfaces.includes(comm)}\r\n                          onCheckedChange={(checked) => {\r\n                            if (checked) {\r\n                              handleCommunicationToggle(comm);\r\n                            } else {\r\n                              handleCommunicationToggle(comm);\r\n                            }\r\n                          }}\r\n                        />\r\n                        <Label htmlFor={`comm-${comm}`} className=\"text-sm\">{comm}</Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Checkbox \r\n                    id=\"monitoringCapability\" \r\n                    checked={currentInverter.monitoringCapability}\r\n                    onCheckedChange={(checked) => setCurrentInverter({ ...currentInverter, monitoringCapability: !!checked })}\r\n                  />\r\n                  <Label htmlFor=\"monitoringCapability\">Capacidade de Monitoramento</Label>\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"warranty\" className=\"space-y-4 mt-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"productWarranty\">Garantia do Produto (anos)</Label>\r\n                  <Input\r\n                    id=\"productWarranty\"\r\n                    type=\"number\"\r\n                    value={currentInverter.productWarranty}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, productWarranty: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 10\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"performanceWarranty\">Garantia de Performance (anos)</Label>\r\n                  <Input\r\n                    id=\"performanceWarranty\"\r\n                    type=\"number\"\r\n                    value={currentInverter.performanceWarranty}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, performanceWarranty: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 10\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"designLife\">Vida Útil de Projeto (anos)</Label>\r\n                  <Input\r\n                    id=\"designLife\"\r\n                    type=\"number\"\r\n                    value={currentInverter.designLife}\r\n                    onChange={(e) => setCurrentInverter({ ...currentInverter, designLife: Number(e.target.value) })}\r\n                    placeholder=\"Ex: 20\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label className=\"text-base font-medium\">Datasheet PDF</Label>\r\n                <FileUpload\r\n                  bucketName=\"datasheets\"\r\n                  folderPath=\"inverters\"\r\n                  fileTypes={['application/pdf']}\r\n                  maxSize={10}\r\n                  currentFileUrl={currentInverter.datasheet || \"\"}\r\n                  onUploadComplete={(url) => setCurrentInverter({ ...currentInverter, datasheet: url || undefined })}\r\n                  onError={(error) => toast({\r\n                    title: \"Erro no Upload\",\r\n                    description: error,\r\n                    variant: \"destructive\"\r\n                  })}\r\n                />\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n\r\n          <div className=\"flex justify-end gap-2 mt-4\">\r\n            <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\r\n              Cancelar\r\n            </Button>\r\n            <Button onClick={handleSaveInverter}>\r\n              <Save className=\"h-4 w-4 mr-2\" />\r\n              {isEditing ? \"Atualizar\" : \"Salvar\"}\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\LeadDataEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\LeadList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLeads'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":85,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, sortBy, sortOrder, searchTerm, filterConcessionaria, filterGrupo, fetchLeads]","fix":{"range":[2653,2732],"text":"[currentPage, sortBy, sortOrder, searchTerm, filterConcessionaria, filterGrupo, fetchLeads]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentPage'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [searchTerm, filterConcessionaria, filterGrupo, currentPage]","fix":{"range":[2871,2918],"text":"[searchTerm, filterConcessionaria, filterGrupo, currentPage]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from \"@/components/ui/pagination\";\r\nimport { Search, Filter, Plus, Copy, Trash2, User } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useAuth } from \"@/contexts/AuthContext\";\r\nimport { DemoDataService } from \"@/services/DemoDataService\";\r\n\r\ninterface Lead {\r\n  id: string;\r\n  name: string;\r\n  email: string | null;\r\n  phone: string | null;\r\n  concessionaria: string | null;\r\n  grupo: string | null;\r\n  consumo_medio: number | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface LeadListProps {\r\n  onLeadSelect: (lead: Lead) => void;\r\n  selectedLeadId: string | null;\r\n  onNewLead: () => void;\r\n}\r\n\r\nexport function LeadList({ onLeadSelect, selectedLeadId, onNewLead }: LeadListProps) {\r\n  const { toast } = useToast();\r\n  const { profile } = useAuth();\r\n  const [leads, setLeads] = useState<Lead[]>([]);\r\n  const [allConcessionarias, setAllConcessionarias] = useState<string[]>([]);\r\n  const [allGrupos, setAllGrupos] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [filterConcessionaria, setFilterConcessionaria] = useState(\"\");\r\n  const [filterGrupo, setFilterGrupo] = useState(\"\");\r\n  const [sortBy, setSortBy] = useState<\"name\" | \"created_at\" | \"updated_at\">(\"updated_at\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const pageSize = 10;\r\n\r\n  // Carregar opções de filtro na inicialização\r\n  useEffect(() => {\r\n    fetchFilterOptions();\r\n  }, []);\r\n\r\n  // Buscar leads quando filtros ou página mudarem\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      fetchLeads();\r\n    }, searchTerm ? 300 : 0); // Debounce para busca por texto\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [currentPage, sortBy, sortOrder, searchTerm, filterConcessionaria, filterGrupo]);\r\n\r\n  // Resetar página quando filtros mudarem\r\n  useEffect(() => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1);\r\n    }\r\n  }, [searchTerm, filterConcessionaria, filterGrupo]);\r\n\r\n  const fetchFilterOptions = async () => {\r\n    try {\r\n      // Buscar todas as concessionárias únicas\r\n      const { data: concessionariaData } = await supabase\r\n        .from('leads')\r\n        .select('concessionaria')\r\n        .not('concessionaria', 'is', null)\r\n        .neq('concessionaria', '');\r\n\r\n      const concessionarias = Array.from(\r\n        new Set(concessionariaData?.map(item => item.concessionaria).filter(Boolean))\r\n      ).sort();\r\n\r\n      // Buscar todos os grupos únicos\r\n      const { data: grupoData } = await supabase\r\n        .from('leads')\r\n        .select('grupo')\r\n        .not('grupo', 'is', null)\r\n        .neq('grupo', '');\r\n\r\n      const grupos = Array.from(\r\n        new Set(grupoData?.map(item => item.grupo).filter(Boolean))\r\n      ).sort();\r\n\r\n      setAllConcessionarias(concessionarias);\r\n      setAllGrupos(grupos);\r\n    } catch (error) {\r\n      console.error('Error fetching filter options:', error);\r\n    }\r\n  };\r\n\r\n  const fetchLeads = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Verificar se deve usar dados demo\r\n      const demoService = DemoDataService.getInstance();\r\n      if (demoService.shouldUseDemoData()) {\r\n        const demoLeads = demoService.getLeads().map(lead => ({\r\n          id: lead.id!,\r\n          name: lead.name,\r\n          email: lead.email,\r\n          phone: lead.phone,\r\n          concessionaria: lead.concessionaria || null,\r\n          grupo: lead.grupo || null,\r\n          consumo_medio: lead.consumoMedio,\r\n          created_at: lead.created_at!,\r\n          updated_at: lead.updated_at!\r\n        }));\r\n        \r\n        // Aplicar filtros localmente para dados demo\r\n        let filteredLeads = demoLeads;\r\n        \r\n        if (searchTerm) {\r\n          const term = searchTerm.toLowerCase();\r\n          filteredLeads = filteredLeads.filter(lead => \r\n            lead.name.toLowerCase().includes(term) ||\r\n            (lead.email && lead.email.toLowerCase().includes(term)) ||\r\n            (lead.phone && lead.phone.includes(term))\r\n          );\r\n        }\r\n        \r\n        if (filterConcessionaria) {\r\n          filteredLeads = filteredLeads.filter(lead => lead.concessionaria === filterConcessionaria);\r\n        }\r\n        \r\n        if (filterGrupo) {\r\n          filteredLeads = filteredLeads.filter(lead => lead.grupo === filterGrupo);\r\n        }\r\n        \r\n        // Aplicar ordenação\r\n        filteredLeads.sort((a, b) => {\r\n          const aValue = a[sortBy as keyof typeof a] || '';\r\n          const bValue = b[sortBy as keyof typeof b] || '';\r\n          const comparison = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\r\n          return sortOrder === 'asc' ? comparison : -comparison;\r\n        });\r\n        \r\n        // Aplicar paginação\r\n        const startIndex = (currentPage - 1) * pageSize;\r\n        const endIndex = startIndex + pageSize;\r\n        const paginatedLeads = filteredLeads.slice(startIndex, endIndex);\r\n        \r\n        setLeads(paginatedLeads);\r\n        setTotalCount(filteredLeads.length);\r\n        setTotalPages(Math.ceil(filteredLeads.length / pageSize));\r\n        return;\r\n      }\r\n      \r\n      // Código original para produção\r\n      let query = supabase\r\n        .from('leads')\r\n        .select('id, name, email, phone, concessionaria, grupo, consumo_medio, created_at, updated_at', { count: 'exact' })\r\n        .order(sortBy, { ascending: sortOrder === 'asc' });\r\n\r\n      // Aplicar filtros na query\r\n      if (searchTerm) {\r\n        query = query.or(`name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%,phone.ilike.%${searchTerm}%`);\r\n      }\r\n\r\n      if (filterConcessionaria) {\r\n        query = query.eq('concessionaria', filterConcessionaria);\r\n      }\r\n\r\n      if (filterGrupo) {\r\n        query = query.eq('grupo', filterGrupo);\r\n      }\r\n\r\n      // Aplicar paginação\r\n      query = query.range((currentPage - 1) * pageSize, currentPage * pageSize - 1);\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      setLeads(data || []);\r\n      setTotalCount(count || 0);\r\n      setTotalPages(Math.ceil((count || 0) / pageSize));\r\n    } catch (error) {\r\n      console.error('Error fetching leads:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao carregar leads\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = useCallback((type: 'concessionaria' | 'grupo', value: string) => {\r\n    const newValue = value === \"none\" ? \"\" : value;\r\n    \r\n    if (type === 'concessionaria') {\r\n      setFilterConcessionaria(newValue);\r\n    } else {\r\n      setFilterGrupo(newValue);\r\n    }\r\n  }, []);\r\n\r\n  const handleLeadSelect = (lead: Lead) => {\r\n    onLeadSelect(lead);\r\n    // Salvar no localStorage para persistir entre sessões\r\n    localStorage.setItem('selectedLeadId', lead.id);\r\n    toast({\r\n      title: \"Lead selecionado\",\r\n      description: `${lead.name} foi selecionado`,\r\n    });\r\n  };\r\n\r\n  const handleDuplicateLead = async (lead: Lead) => {\r\n    try {\r\n      // Buscar dados completos do lead\r\n      const { data: fullLead, error } = await supabase\r\n        .from('leads')\r\n        .select('*')\r\n        .eq('id', lead.id)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Criar cópia sem o ID\r\n      const { id, created_at, updated_at, ...leadData } = fullLead;\r\n      const duplicatedLead = {\r\n        ...leadData,\r\n        name: `${leadData.name} (Cópia)`,\r\n        user_id: profile?.id\r\n      };\r\n\r\n      const { error: insertError } = await supabase\r\n        .from('leads')\r\n        .insert(duplicatedLead);\r\n\r\n      if (insertError) throw insertError;\r\n\r\n      toast({\r\n        title: \"Lead duplicado\",\r\n        description: \"Lead foi duplicado com sucesso\",\r\n      });\r\n\r\n      fetchLeads();\r\n    } catch (error) {\r\n      console.error('Error duplicating lead:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao duplicar lead\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteLead = async (leadId: string) => {\r\n    if (!confirm('Tem certeza que deseja excluir este lead?')) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('leads')\r\n        .delete()\r\n        .eq('id', leadId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Lead excluído\",\r\n        description: \"Lead foi excluído com sucesso\",\r\n      });\r\n\r\n      fetchLeads();\r\n    } catch (error) {\r\n      console.error('Error deleting lead:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao excluir lead\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('pt-BR');\r\n  };\r\n\r\n  const getFilterCount = () => {\r\n    const hasFilters = searchTerm || filterConcessionaria || filterGrupo;\r\n    if (!hasFilters) return `Total: ${totalCount} leads`;\r\n    \r\n    const start = (currentPage - 1) * pageSize + 1;\r\n    const end = Math.min(currentPage * pageSize, totalCount);\r\n    return `Mostrando ${start}-${end} de ${totalCount} leads`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Carregando leads...</CardTitle>\r\n        </CardHeader>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <User className=\"h-5 w-5\" />\r\n          Selecionar Lead\r\n        </CardTitle>\r\n        <CardDescription>\r\n          {getFilterCount()}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        {/* Filtros e busca */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"search\">Buscar</Label>\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                id=\"search\"\r\n                placeholder=\"Nome, email ou telefone...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"concessionaria\">Concessionária</Label>\r\n            <Select value={filterConcessionaria || \"none\"} onValueChange={(value) => handleFilterChange('concessionaria', value)}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Todas\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"none\">Todas</SelectItem>\r\n                {allConcessionarias.map(value => (\r\n                  <SelectItem key={value} value={value}>{value}</SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"grupo\">Grupo</Label>\r\n            <Select value={filterGrupo || \"none\"} onValueChange={(value) => handleFilterChange('grupo', value)}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Todos\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"none\">Todos</SelectItem>\r\n                {allGrupos.map(value => (\r\n                  <SelectItem key={value} value={value}>{value}</SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          <div className=\"flex items-end\">\r\n            <Button onClick={onNewLead} className=\"w-full\">\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Novo Lead\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tabela de leads */}\r\n        <div className=\"border rounded-lg\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Nome</TableHead>\r\n                <TableHead>Email</TableHead>\r\n                <TableHead>Telefone</TableHead>\r\n                <TableHead>Concessionária</TableHead>\r\n                <TableHead>Consumo Médio</TableHead>\r\n                <TableHead>Atualizado em</TableHead>\r\n                <TableHead>Ações</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {leads.map((lead) => (\r\n                <TableRow \r\n                  key={lead.id}\r\n                  className={selectedLeadId === lead.id ? \"bg-muted\" : \"\"}\r\n                >\r\n                  <TableCell className=\"font-medium\">{lead.name}</TableCell>\r\n                  <TableCell>{lead.email || \"-\"}</TableCell>\r\n                  <TableCell>{lead.phone || \"-\"}</TableCell>\r\n                  <TableCell>{lead.concessionaria || \"-\"}</TableCell>\r\n                  <TableCell>\r\n                    {lead.consumo_medio ? `${lead.consumo_medio} kWh` : \"-\"}\r\n                  </TableCell>\r\n                  <TableCell>{formatDate(lead.updated_at)}</TableCell>\r\n                  <TableCell>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant={selectedLeadId === lead.id ? \"default\" : \"outline\"}\r\n                        onClick={() => handleLeadSelect(lead)}\r\n                      >\r\n                        {selectedLeadId === lead.id ? \"Selecionado\" : \"Selecionar\"}\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"ghost\"\r\n                        onClick={() => handleDuplicateLead(lead)}\r\n                      >\r\n                        <Copy className=\"h-4 w-4\" />\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"ghost\"\r\n                        onClick={() => handleDeleteLead(lead.id)}\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n\r\n        {/* Paginação */}\r\n        {totalPages > 1 && (\r\n          <Pagination>\r\n            <PaginationContent>\r\n              <PaginationItem>\r\n                <PaginationPrevious \r\n                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\r\n                  className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"}\r\n                />\r\n              </PaginationItem>\r\n              \r\n              {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\r\n                <PaginationItem key={page}>\r\n                  <PaginationLink\r\n                    onClick={() => setCurrentPage(page)}\r\n                    isActive={currentPage === page}\r\n                  >\r\n                    {page}\r\n                  </PaginationLink>\r\n                </PaginationItem>\r\n              ))}\r\n              \r\n              <PaginationItem>\r\n                <PaginationNext \r\n                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\r\n                  className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"\"}\r\n                />\r\n              </PaginationItem>\r\n            </PaginationContent>\r\n          </Pagination>\r\n        )}\r\n\r\n        {leads.length === 0 && !loading && (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            Nenhum lead encontrado\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\LeadSearchDropdown.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLeads'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [debouncedSearchTerm, fetchLeads]","fix":{"range":[2748,2769],"text":"[debouncedSearchTerm, fetchLeads]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from \"react\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Search, User, Plus, Table } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useDebounce } from \"@/hooks/useDebounce\";\r\n\r\ninterface Lead {\r\n  id: string;\r\n  name: string;\r\n  email: string | null;\r\n  phone: string | null;\r\n  concessionaria: string | null;\r\n  grupo: string | null;\r\n  consumo_medio: number | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface LeadSearchDropdownProps {\r\n  onLeadSelect: (lead: Lead) => void;\r\n  selectedLeadId: string | null;\r\n  onNewLead: () => void;\r\n  onViewTable: () => void;\r\n  placeholder?: string;\r\n  maxResults?: number;\r\n}\r\n\r\nexport function LeadSearchDropdown({ \r\n  onLeadSelect, \r\n  selectedLeadId, \r\n  onNewLead,\r\n  onViewTable,\r\n  placeholder = \"Buscar lead por nome, email ou telefone...\",\r\n  maxResults = 8\r\n}: LeadSearchDropdownProps) {\r\n  const { toast } = useToast();\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [leads, setLeads] = useState<Lead[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Debounce da busca para evitar requisições excessivas\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n  const fetchLeads = async (term: string) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('leads')\r\n        .select('id, name, email, phone, concessionaria, grupo, consumo_medio, created_at, updated_at')\r\n        .or(`name.ilike.%${term}%,email.ilike.%${term}%,phone.ilike.%${term}%`)\r\n        .order('updated_at', { ascending: false })\r\n        .limit(maxResults);\r\n\r\n      if (error) throw error;\r\n\r\n      setLeads(data || []);\r\n      setShowDropdown(true);\r\n    } catch (error) {\r\n      console.error('Error fetching leads:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao buscar leads\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Buscar leads quando o termo de busca mudar\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm && debouncedSearchTerm.length >= 2) {\r\n      fetchLeads(debouncedSearchTerm);\r\n    } else {\r\n      setLeads([]);\r\n      setShowDropdown(false);\r\n    }\r\n  }, [debouncedSearchTerm]);\r\n\r\n  // Carregar lead selecionado na inicialização\r\n  useEffect(() => {\r\n    if (selectedLeadId && !selectedLead) {\r\n      loadSelectedLead(selectedLeadId);\r\n    }\r\n  }, [selectedLeadId, selectedLead]);\r\n\r\n  // Fechar dropdown ao clicar fora\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current && \r\n        !dropdownRef.current.contains(event.target as Node) &&\r\n        inputRef.current &&\r\n        !inputRef.current.contains(event.target as Node)\r\n      ) {\r\n        setShowDropdown(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const loadSelectedLead = async (leadId: string) => {\r\n    try {\r\n      const { data: lead, error } = await supabase\r\n        .from('leads')\r\n        .select('id, name, email, phone, concessionaria, grupo, consumo_medio, created_at, updated_at')\r\n        .eq('id', leadId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      if (lead) {\r\n        setSelectedLead(lead);\r\n        setSearchTerm(lead.name);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading selected lead:', error);\r\n    }\r\n  };\r\n\r\n  const handleLeadSelect = (lead: Lead) => {\r\n    setSelectedLead(lead);\r\n    setSearchTerm(lead.name);\r\n    setShowDropdown(false);\r\n    onLeadSelect(lead);\r\n    \r\n    // Salvar no localStorage\r\n    localStorage.setItem('selectedLeadId', lead.id);\r\n    \r\n    toast({\r\n      title: \"Lead selecionado\",\r\n      description: `${lead.name} foi selecionado`,\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (value: string) => {\r\n    setSearchTerm(value);\r\n    \r\n    // Se limpar o campo, limpar seleção\r\n    if (!value) {\r\n      setSelectedLead(null);\r\n      setShowDropdown(false);\r\n    }\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchTerm.length >= 2) {\r\n      setShowDropdown(true);\r\n    }\r\n  };\r\n\r\n  const clearSelection = () => {\r\n    setSelectedLead(null);\r\n    setSearchTerm(\"\");\r\n    setShowDropdown(false);\r\n    localStorage.removeItem('selectedLeadId');\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('pt-BR');\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Campo de busca */}\r\n      <div className=\"relative\">\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n          <Input\r\n            ref={inputRef}\r\n            placeholder={placeholder}\r\n            value={searchTerm}\r\n            onChange={(e) => handleInputChange(e.target.value)}\r\n            onFocus={handleInputFocus}\r\n            className=\"pl-10 pr-4\"\r\n          />\r\n          {loading && (\r\n            <div className=\"absolute right-3 top-3\">\r\n              <div className=\"animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Dropdown com resultados */}\r\n        {showDropdown && (\r\n          <Card \r\n            ref={dropdownRef}\r\n            className=\"absolute top-full left-0 right-0 z-50 mt-1 max-h-96 overflow-y-auto shadow-lg\"\r\n          >\r\n            <CardContent className=\"p-2\">\r\n              {leads.length > 0 ? (\r\n                <div className=\"space-y-1\">\r\n                  {leads.map((lead) => (\r\n                    <div\r\n                      key={lead.id}\r\n                      className=\"flex items-center justify-between p-3 rounded-lg hover:bg-muted cursor-pointer transition-colors\"\r\n                      onClick={() => handleLeadSelect(lead)}\r\n                    >\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <User className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\r\n                          <span className=\"font-medium truncate\">{lead.name}</span>\r\n                          {selectedLeadId === lead.id && (\r\n                            <Badge variant=\"default\" className=\"text-xs\">Selecionado</Badge>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"text-sm text-muted-foreground mt-1\">\r\n                          <div className=\"flex items-center gap-4\">\r\n                            {lead.email && (\r\n                              <span className=\"truncate\">{lead.email}</span>\r\n                            )}\r\n                            {lead.phone && (\r\n                              <span>{lead.phone}</span>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"flex items-center gap-4 mt-1\">\r\n                            {lead.concessionaria && (\r\n                              <Badge variant=\"outline\" className=\"text-xs\">\r\n                                {lead.concessionaria}\r\n                              </Badge>\r\n                            )}\r\n                            {lead.consumo_medio && (\r\n                              <span className=\"text-xs\">\r\n                                {lead.consumo_medio} kWh/mês\r\n                              </span>\r\n                            )}\r\n                            <span className=\"text-xs\">\r\n                              Atualizado: {formatDate(lead.updated_at)}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"p-4 text-center text-muted-foreground\">\r\n                  {loading ? \"Buscando...\" : \"Nenhum lead encontrado\"}\r\n                </div>\r\n              )}\r\n              \r\n              {/* Ações do dropdown */}\r\n              <div className=\"border-t mt-2 pt-2 flex gap-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowDropdown(false);\r\n                    onViewTable();\r\n                  }}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <Table className=\"h-4 w-4 mr-2\" />\r\n                  Ver Tabela Completa\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowDropdown(false);\r\n                    onNewLead();\r\n                  }}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Novo Lead\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n\r\n      {/* Lead selecionado */}\r\n      {selectedLead && (\r\n        <Card className=\"bg-primary/5 border-primary/20\">\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <User className=\"h-5 w-5 text-primary\" />\r\n                <div>\r\n                  <div className=\"font-medium\">{selectedLead.name}</div>\r\n                  <div className=\"text-sm text-muted-foreground\">\r\n                    {selectedLead.email} • {selectedLead.phone}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={clearSelection}\r\n              >\r\n                Limpar\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\LeadTablePage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fetchLeads' function makes the dependencies of useEffect Hook (at line 95) change on every render. To fix this, wrap the definition of 'fetchLeads' in its own useCallback() Hook.","line":173,"column":9,"nodeType":"VariableDeclarator","endLine":239,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'fetchLeads' in its own useCallback() Hook.","fix":{"range":[5390,7429],"text":"useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      let query = supabase\r\n        .from('leads')\r\n        .select('id, name, email, phone, concessionaria, grupo, consumo_medio, created_at, updated_at, address', { count: 'exact' })\r\n        .order(sortBy, { ascending: sortOrder === 'asc' });\r\n\r\n      // Aplicar filtros na query\r\n      if (debouncedSearchTerm) {\r\n        query = query.or(`name.ilike.%${debouncedSearchTerm}%,email.ilike.%${debouncedSearchTerm}%,phone.ilike.%${debouncedSearchTerm}%`);\r\n      }\r\n\r\n      if (filterConcessionaria) {\r\n        query = query.eq('concessionaria', filterConcessionaria);\r\n      }\r\n\r\n      if (filterGrupo) {\r\n        query = query.eq('grupo', filterGrupo);\r\n      }\r\n\r\n      if (filterDateStart) {\r\n        query = query.gte('created_at', filterDateStart);\r\n      }\r\n\r\n      if (filterDateEnd) {\r\n        query = query.lte('created_at', filterDateEnd + 'T23:59:59');\r\n      }\r\n\r\n      if (filterConsumoMin) {\r\n        query = query.gte('consumo_medio', parseInt(filterConsumoMin));\r\n      }\r\n\r\n      if (filterConsumoMax) {\r\n        query = query.lte('consumo_medio', parseInt(filterConsumoMax));\r\n      }\r\n\r\n      // Aplicar paginação\r\n      query = query.range((currentPage - 1) * pageSize, currentPage * pageSize - 1);\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Filtrar por cidade se necessário (filtro no frontend devido à estrutura JSON)\r\n      let filteredData = data || [];\r\n      if (filterCity) {\r\n        filteredData = filteredData.filter(lead => \r\n          lead.address && lead.address.city === filterCity\r\n        );\r\n      }\r\n\r\n      setLeads(filteredData);\r\n      setTotalCount(count || 0);\r\n      setTotalPages(Math.ceil((count || 0) / pageSize));\r\n    } catch (error) {\r\n      console.error('Error fetching leads:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao carregar leads\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\r\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from \"@/components/ui/pagination\";\r\nimport { Search, Filter, Plus, Copy, Trash2, User, ArrowLeft, Calendar, MapPin } from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useAuth } from \"@/contexts/AuthContext\";\r\nimport { useDebounce } from \"@/hooks/useDebounce\";\r\n\r\ninterface Lead {\r\n  id: string;\r\n  name: string;\r\n  email: string | null;\r\n  phone: string | null;\r\n  concessionaria: string | null;\r\n  grupo: string | null;\r\n  consumo_medio: number | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n  address?: {\r\n    city?: string;\r\n    state?: string;\r\n  };\r\n}\r\n\r\ninterface LeadTablePageProps {\r\n  onLeadSelect?: (lead: Lead) => void;\r\n  selectedLeadId?: string | null;\r\n  onNewLead?: () => void;\r\n  onBack?: () => void;\r\n  searchQuery?: string;\r\n  showActions?: boolean;\r\n}\r\n\r\ninterface LeadFilters {\r\n  status?: string[];\r\n  dateRange?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  consumptionRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  city?: string[];\r\n}\r\n\r\nexport function LeadTablePage({ \r\n  onLeadSelect, \r\n  selectedLeadId, \r\n  onNewLead,\r\n  onBack,\r\n  searchQuery = \"\",\r\n  showActions = true\r\n}: LeadTablePageProps) {\r\n  const { toast } = useToast();\r\n  const { profile } = useAuth();\r\n  const [leads, setLeads] = useState<Lead[]>([]);\r\n  const [allConcessionarias, setAllConcessionarias] = useState<string[]>([]);\r\n  const [allGrupos, setAllGrupos] = useState<string[]>([]);\r\n  const [allCities, setAllCities] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState(searchQuery);\r\n  const [filterConcessionaria, setFilterConcessionaria] = useState(\"\");\r\n  const [filterGrupo, setFilterGrupo] = useState(\"\");\r\n  const [filterCity, setFilterCity] = useState(\"\");\r\n  const [filterDateStart, setFilterDateStart] = useState(\"\");\r\n  const [filterDateEnd, setFilterDateEnd] = useState(\"\");\r\n  const [filterConsumoMin, setFilterConsumoMin] = useState(\"\");\r\n  const [filterConsumoMax, setFilterConsumoMax] = useState(\"\");\r\n  const [sortBy, setSortBy] = useState<\"name\" | \"created_at\" | \"updated_at\" | \"consumo_medio\">(\"updated_at\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const pageSize = 15;\r\n\r\n  // Debounce da busca\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n  // Carregar opções de filtro na inicialização\r\n  useEffect(() => {\r\n    fetchFilterOptions();\r\n  }, []);\r\n\r\n  // Buscar leads quando filtros mudarem\r\n  useEffect(() => {\r\n    fetchLeads();\r\n  }, [\r\n    currentPage, \r\n    sortBy, \r\n    sortOrder, \r\n    debouncedSearchTerm, \r\n    filterConcessionaria, \r\n    filterGrupo,\r\n    filterCity,\r\n    filterDateStart,\r\n    filterDateEnd,\r\n    filterConsumoMin,\r\n    filterConsumoMax,\r\n    fetchLeads\r\n  ]);\r\n\r\n  // Resetar página quando filtros mudarem\r\n  useEffect(() => {\r\n    if (currentPage !== 1) {\r\n      setCurrentPage(1);\r\n    }\r\n  }, [\r\n    debouncedSearchTerm, \r\n    filterConcessionaria, \r\n    filterGrupo, \r\n    filterCity,\r\n    filterDateStart,\r\n    filterDateEnd,\r\n    filterConsumoMin,\r\n    filterConsumoMax,\r\n    currentPage\r\n  ]);\r\n\r\n  const fetchFilterOptions = async () => {\r\n    try {\r\n      // Buscar todas as concessionárias únicas\r\n      const { data: concessionariaData } = await supabase\r\n        .from('leads')\r\n        .select('concessionaria')\r\n        .not('concessionaria', 'is', null)\r\n        .neq('concessionaria', '');\r\n\r\n      const concessionarias = Array.from(\r\n        new Set(concessionariaData?.map(item => item.concessionaria).filter(Boolean))\r\n      ).sort();\r\n\r\n      // Buscar todos os grupos únicos\r\n      const { data: grupoData } = await supabase\r\n        .from('leads')\r\n        .select('grupo')\r\n        .not('grupo', 'is', null)\r\n        .neq('grupo', '');\r\n\r\n      const grupos = Array.from(\r\n        new Set(grupoData?.map(item => item.grupo).filter(Boolean))\r\n      ).sort();\r\n\r\n      // Buscar todas as cidades únicas\r\n      const { data: addressData } = await supabase\r\n        .from('leads')\r\n        .select('address')\r\n        .not('address', 'is', null);\r\n\r\n      const cities = Array.from(\r\n        new Set(\r\n          addressData\r\n            ?.map(item => item.address?.city)\r\n            .filter(Boolean)\r\n        )\r\n      ).sort();\r\n\r\n      setAllConcessionarias(concessionarias);\r\n      setAllGrupos(grupos);\r\n      setAllCities(cities);\r\n    } catch (error) {\r\n      console.error('Error fetching filter options:', error);\r\n    }\r\n  };\r\n\r\n  const fetchLeads = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      let query = supabase\r\n        .from('leads')\r\n        .select('id, name, email, phone, concessionaria, grupo, consumo_medio, created_at, updated_at, address', { count: 'exact' })\r\n        .order(sortBy, { ascending: sortOrder === 'asc' });\r\n\r\n      // Aplicar filtros na query\r\n      if (debouncedSearchTerm) {\r\n        query = query.or(`name.ilike.%${debouncedSearchTerm}%,email.ilike.%${debouncedSearchTerm}%,phone.ilike.%${debouncedSearchTerm}%`);\r\n      }\r\n\r\n      if (filterConcessionaria) {\r\n        query = query.eq('concessionaria', filterConcessionaria);\r\n      }\r\n\r\n      if (filterGrupo) {\r\n        query = query.eq('grupo', filterGrupo);\r\n      }\r\n\r\n      if (filterDateStart) {\r\n        query = query.gte('created_at', filterDateStart);\r\n      }\r\n\r\n      if (filterDateEnd) {\r\n        query = query.lte('created_at', filterDateEnd + 'T23:59:59');\r\n      }\r\n\r\n      if (filterConsumoMin) {\r\n        query = query.gte('consumo_medio', parseInt(filterConsumoMin));\r\n      }\r\n\r\n      if (filterConsumoMax) {\r\n        query = query.lte('consumo_medio', parseInt(filterConsumoMax));\r\n      }\r\n\r\n      // Aplicar paginação\r\n      query = query.range((currentPage - 1) * pageSize, currentPage * pageSize - 1);\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Filtrar por cidade se necessário (filtro no frontend devido à estrutura JSON)\r\n      let filteredData = data || [];\r\n      if (filterCity) {\r\n        filteredData = filteredData.filter(lead => \r\n          lead.address && lead.address.city === filterCity\r\n        );\r\n      }\r\n\r\n      setLeads(filteredData);\r\n      setTotalCount(count || 0);\r\n      setTotalPages(Math.ceil((count || 0) / pageSize));\r\n    } catch (error) {\r\n      console.error('Error fetching leads:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao carregar leads\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFilterChange = useCallback((type: string, value: string) => {\r\n    const newValue = value === \"none\" ? \"\" : value;\r\n    \r\n    switch (type) {\r\n      case 'concessionaria':\r\n        setFilterConcessionaria(newValue);\r\n        break;\r\n      case 'grupo':\r\n        setFilterGrupo(newValue);\r\n        break;\r\n      case 'city':\r\n        setFilterCity(newValue);\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  const handleLeadSelect = (lead: Lead) => {\r\n    if (onLeadSelect) {\r\n      onLeadSelect(lead);\r\n      // Salvar no localStorage para persistir entre sessões\r\n      localStorage.setItem('selectedLeadId', lead.id);\r\n      toast({\r\n        title: \"Lead selecionado\",\r\n        description: `${lead.name} foi selecionado`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDuplicateLead = async (lead: Lead) => {\r\n    try {\r\n      // Buscar dados completos do lead\r\n      const { data: fullLead, error } = await supabase\r\n        .from('leads')\r\n        .select('*')\r\n        .eq('id', lead.id)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Criar cópia sem o ID\r\n      const { id, created_at, updated_at, ...leadData } = fullLead;\r\n      const duplicatedLead = {\r\n        ...leadData,\r\n        name: `${leadData.name} (Cópia)`,\r\n        user_id: profile?.id\r\n      };\r\n\r\n      const { error: insertError } = await supabase\r\n        .from('leads')\r\n        .insert(duplicatedLead);\r\n\r\n      if (insertError) throw insertError;\r\n\r\n      toast({\r\n        title: \"Lead duplicado\",\r\n        description: \"Lead foi duplicado com sucesso\",\r\n      });\r\n\r\n      fetchLeads();\r\n    } catch (error) {\r\n      console.error('Error duplicating lead:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao duplicar lead\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteLead = async (leadId: string) => {\r\n    if (!confirm('Tem certeza que deseja excluir este lead?')) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('leads')\r\n        .delete()\r\n        .eq('id', leadId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Lead excluído\",\r\n        description: \"Lead foi excluído com sucesso\",\r\n      });\r\n\r\n      fetchLeads();\r\n    } catch (error) {\r\n      console.error('Error deleting lead:', error);\r\n      toast({\r\n        title: \"Erro\",\r\n        description: \"Erro ao excluir lead\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearAllFilters = () => {\r\n    setSearchTerm(\"\");\r\n    setFilterConcessionaria(\"\");\r\n    setFilterGrupo(\"\");\r\n    setFilterCity(\"\");\r\n    setFilterDateStart(\"\");\r\n    setFilterDateEnd(\"\");\r\n    setFilterConsumoMin(\"\");\r\n    setFilterConsumoMax(\"\");\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('pt-BR');\r\n  };\r\n\r\n  const getFilterCount = () => {\r\n    const hasFilters = debouncedSearchTerm || filterConcessionaria || filterGrupo || filterCity || \r\n                      filterDateStart || filterDateEnd || filterConsumoMin || filterConsumoMax;\r\n    if (!hasFilters) return `Total: ${totalCount} leads`;\r\n    \r\n    const start = (currentPage - 1) * pageSize + 1;\r\n    const end = Math.min(currentPage * pageSize, totalCount);\r\n    return `Mostrando ${start}-${end} de ${totalCount} leads filtrados`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Carregando leads...</CardTitle>\r\n        </CardHeader>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <User className=\"h-5 w-5\" />\r\n                Tabela Completa de Leads\r\n              </CardTitle>\r\n              <CardDescription>\r\n                {getFilterCount()}\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              {onBack && (\r\n                <Button variant=\"outline\" onClick={onBack}>\r\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                  Voltar\r\n                </Button>\r\n              )}\r\n              {onNewLead && (\r\n                <Button onClick={onNewLead}>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Novo Lead\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Filtros avançados */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"search\">Buscar</Label>\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  id=\"search\"\r\n                  placeholder=\"Nome, email ou telefone...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"concessionaria\">Concessionária</Label>\r\n              <Select value={filterConcessionaria || \"none\"} onValueChange={(value) => handleFilterChange('concessionaria', value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Todas\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"none\">Todas</SelectItem>\r\n                  {allConcessionarias.map(value => (\r\n                    <SelectItem key={value} value={value}>{value}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"grupo\">Grupo</Label>\r\n              <Select value={filterGrupo || \"none\"} onValueChange={(value) => handleFilterChange('grupo', value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Todos\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"none\">Todos</SelectItem>\r\n                  {allGrupos.map(value => (\r\n                    <SelectItem key={value} value={value}>{value}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"city\">Cidade</Label>\r\n              <Select value={filterCity || \"none\"} onValueChange={(value) => handleFilterChange('city', value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Todas\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"none\">Todas</SelectItem>\r\n                  {allCities.map(value => (\r\n                    <SelectItem key={value} value={value}>{value}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"dateStart\">Data Início</Label>\r\n              <Input\r\n                id=\"dateStart\"\r\n                type=\"date\"\r\n                value={filterDateStart}\r\n                onChange={(e) => setFilterDateStart(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"dateEnd\">Data Fim</Label>\r\n              <Input\r\n                id=\"dateEnd\"\r\n                type=\"date\"\r\n                value={filterDateEnd}\r\n                onChange={(e) => setFilterDateEnd(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"consumoMin\">Consumo Mín (kWh)</Label>\r\n              <Input\r\n                id=\"consumoMin\"\r\n                type=\"number\"\r\n                placeholder=\"0\"\r\n                value={filterConsumoMin}\r\n                onChange={(e) => setFilterConsumoMin(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"consumoMax\">Consumo Máx (kWh)</Label>\r\n              <Input\r\n                id=\"consumoMax\"\r\n                type=\"number\"\r\n                placeholder=\"10000\"\r\n                value={filterConsumoMax}\r\n                onChange={(e) => setFilterConsumoMax(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex justify-between items-center\">\r\n            <Button variant=\"outline\" onClick={clearAllFilters}>\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              Limpar Filtros\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Tabela de leads */}\r\n          <div className=\"border rounded-lg\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead \r\n                    className=\"cursor-pointer hover:bg-muted\"\r\n                    onClick={() => {\r\n                      setSortBy(\"name\");\r\n                      setSortOrder(sortBy === \"name\" && sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n                    }}\r\n                  >\r\n                    Nome {sortBy === \"name\" && (sortOrder === \"asc\" ? \"↑\" : \"↓\")}\r\n                  </TableHead>\r\n                  <TableHead>Email</TableHead>\r\n                  <TableHead>Telefone</TableHead>\r\n                  <TableHead>Concessionária</TableHead>\r\n                  <TableHead>Cidade</TableHead>\r\n                  <TableHead \r\n                    className=\"cursor-pointer hover:bg-muted\"\r\n                    onClick={() => {\r\n                      setSortBy(\"consumo_medio\");\r\n                      setSortOrder(sortBy === \"consumo_medio\" && sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n                    }}\r\n                  >\r\n                    Consumo {sortBy === \"consumo_medio\" && (sortOrder === \"asc\" ? \"↑\" : \"↓\")}\r\n                  </TableHead>\r\n                  <TableHead \r\n                    className=\"cursor-pointer hover:bg-muted\"\r\n                    onClick={() => {\r\n                      setSortBy(\"updated_at\");\r\n                      setSortOrder(sortBy === \"updated_at\" && sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n                    }}\r\n                  >\r\n                    Atualizado {sortBy === \"updated_at\" && (sortOrder === \"asc\" ? \"↑\" : \"↓\")}\r\n                  </TableHead>\r\n                  {showActions && <TableHead>Ações</TableHead>}\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {leads.map((lead) => (\r\n                  <TableRow \r\n                    key={lead.id}\r\n                    className={selectedLeadId === lead.id ? \"bg-muted\" : \"\"}\r\n                  >\r\n                    <TableCell className=\"font-medium\">{lead.name}</TableCell>\r\n                    <TableCell>{lead.email || \"-\"}</TableCell>\r\n                    <TableCell>{lead.phone || \"-\"}</TableCell>\r\n                    <TableCell>{lead.concessionaria || \"-\"}</TableCell>\r\n                    <TableCell>\r\n                      {lead.address?.city ? (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <MapPin className=\"h-3 w-3\" />\r\n                          {lead.address.city}\r\n                        </div>\r\n                      ) : \"-\"}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {lead.consumo_medio ? `${lead.consumo_medio} kWh` : \"-\"}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Calendar className=\"h-3 w-3\" />\r\n                        {formatDate(lead.updated_at)}\r\n                      </div>\r\n                    </TableCell>\r\n                    {showActions && (\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {onLeadSelect && (\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant={selectedLeadId === lead.id ? \"default\" : \"outline\"}\r\n                              onClick={() => handleLeadSelect(lead)}\r\n                            >\r\n                              {selectedLeadId === lead.id ? \"Selecionado\" : \"Selecionar\"}\r\n                            </Button>\r\n                          )}\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"ghost\"\r\n                            onClick={() => handleDuplicateLead(lead)}\r\n                          >\r\n                            <Copy className=\"h-4 w-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"ghost\"\r\n                            onClick={() => handleDeleteLead(lead.id)}\r\n                          >\r\n                            <Trash2 className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    )}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n\r\n          {/* Paginação */}\r\n          {totalPages > 1 && (\r\n            <Pagination>\r\n              <PaginationContent>\r\n                <PaginationItem>\r\n                  <PaginationPrevious \r\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\r\n                    className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\r\n                  />\r\n                </PaginationItem>\r\n                \r\n                {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {\r\n                  let page;\r\n                  if (totalPages <= 5) {\r\n                    page = i + 1;\r\n                  } else if (currentPage <= 3) {\r\n                    page = i + 1;\r\n                  } else if (currentPage >= totalPages - 2) {\r\n                    page = totalPages - 4 + i;\r\n                  } else {\r\n                    page = currentPage - 2 + i;\r\n                  }\r\n                  \r\n                  return (\r\n                    <PaginationItem key={page}>\r\n                      <PaginationLink\r\n                        onClick={() => setCurrentPage(page)}\r\n                        isActive={currentPage === page}\r\n                        className=\"cursor-pointer\"\r\n                      >\r\n                        {page}\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                  );\r\n                })}\r\n                \r\n                <PaginationItem>\r\n                  <PaginationNext \r\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\r\n                    className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\r\n                  />\r\n                </PaginationItem>\r\n              </PaginationContent>\r\n            </Pagination>\r\n          )}\r\n\r\n          {leads.length === 0 && !loading && (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <User className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n              <p>Nenhum lead encontrado</p>\r\n              {(debouncedSearchTerm || filterConcessionaria || filterGrupo) && (\r\n                <Button variant=\"outline\" onClick={clearAllFilters} className=\"mt-4\">\r\n                  Limpar filtros\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\MainMenu.tsx","messages":[{"ruleId":"no-empty-pattern","severity":2,"message":"Unexpected empty object pattern.","line":11,"column":9,"nodeType":"ObjectPattern","messageId":"unexpected","endLine":11,"endColumn":12},{"ruleId":"no-empty-pattern","severity":2,"message":"Unexpected empty object pattern.","line":12,"column":9,"nodeType":"ObjectPattern","messageId":"unexpected","endLine":12,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { SolarDashboard } from \"./SolarDashboard\";\nimport NotificationCenter from \"./NotificationCenter\";\nimport { useNotifications } from \"@/hooks/useNotifications\";\nimport { Sidebar } from \"./sidebar\";\nimport { useSidebar } from \"@/hooks/useSidebar\";\n\nexport function MainMenu() {\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\n  const { } = useAuth();\n  const { } = useNotifications();\n\n\n  return (\n    <div className=\"flex\">\n      <Sidebar \n        onHelpClick={() => console.log('Ajuda clicada')}\n      />\n      <div className=\"flex-1\">\n        <SolarDashboard />\n      </div>\n      \n      {/* Notification Center */}\n      <NotificationCenter \n        isOpen={isNotificationCenterOpen}\n        onClose={() => setIsNotificationCenterOpen(false)}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ModuleManagerAdvanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\OCRProcessor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'processOCRData' and 'processedProducts.length'. Either include them or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [ocrData, processOCRData, processedProducts.length]","fix":{"range":[2800,2809],"text":"[ocrData, processOCRData, processedProducts.length]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Brain, \n  CheckCircle2, \n  AlertCircle, \n  Edit3, \n  Save, \n  RefreshCw, \n  FileText,\n  Zap,\n  Settings,\n  Download\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\ninterface ExtractedField {\n  key: string;\n  value: string;\n  confidence: number;\n  verified: boolean;\n  edited: boolean;\n}\n\ninterface OCRData {\n  id: string;\n  fileName: string;\n  rawText: string;\n  confidence: number;\n  extractedFields: Record<string, unknown>;\n  processedAt: Date;\n}\n\ninterface ProcessedProduct {\n  id: string;\n  sourceFile: string;\n  nome: string;\n  potencia: string;\n  preco: string;\n  fabricante: string;\n  categoria: string;\n  descricao: string;\n  eficiencia?: string;\n  tensao?: string;\n  corrente?: string;\n  dimensoes?: string;\n  peso?: string;\n  garantia?: string;\n  certificacoes?: string;\n  confidence: number;\n  verified: boolean;\n}\n\ninterface OCRProcessorProps {\n  ocrData: OCRData[];\n  onProductsProcessed?: (products: ProcessedProduct[]) => void;\n  onSaveProducts?: (products: ProcessedProduct[]) => Promise<void>;\n}\n\nconst OCRProcessor: React.FC<OCRProcessorProps> = ({\n  ocrData,\n  onProductsProcessed,\n  onSaveProducts\n}) => {\n  const [processedProducts, setProcessedProducts] = useState<ProcessedProduct[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<string | null>(null);\n  const [processingProgress, setProcessingProgress] = useState(0);\n\n  // Categorias disponíveis para seleção\n  const categorias = [\n    'Módulo Fotovoltaico',\n    'Inversor',\n    'Estrutura de Fixação',\n    'Cabo Solar',\n    'Conector MC4',\n    'String Box',\n    'Medidor Bidirecional',\n    'Outros'\n  ];\n\n  // Fabricantes conhecidos\n  const fabricantesConhecidos = [\n    'Canadian Solar',\n    'Jinko Solar',\n    'Trina Solar',\n    'JA Solar',\n    'LONGi Solar',\n    'Risen Energy',\n    'Fronius',\n    'SMA',\n    'ABB',\n    'Growatt',\n    'Sungrow',\n    'Huawei'\n  ];\n\n  useEffect(() => {\n    if (ocrData.length > 0 && processedProducts.length === 0) {\n      processOCRData();\n    }\n  }, [ocrData]);\n\n  const processOCRData = async () => {\n    if (ocrData.length === 0) return;\n\n    setIsProcessing(true);\n    setProcessingProgress(0);\n    console.log('[OCRProcessor] Iniciando processamento de', ocrData.length, 'arquivos OCR');\n\n    try {\n      const products: ProcessedProduct[] = [];\n\n      for (let i = 0; i < ocrData.length; i++) {\n        const data = ocrData[i];\n        console.log(`[OCRProcessor] Processando arquivo: ${data.fileName}`);\n\n        // Simular processamento inteligente\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        const product = await extractProductFromOCR(data);\n        products.push(product);\n\n        setProcessingProgress(((i + 1) / ocrData.length) * 100);\n      }\n\n      setProcessedProducts(products);\n      \n      if (onProductsProcessed) {\n        onProductsProcessed(products);\n      }\n\n      toast({\n        title: \"Processamento Concluído\",\n        description: `${products.length} produto(s) extraído(s) com sucesso.`\n      });\n\n    } catch (error: unknown) {\n      console.error('[OCRProcessor] Erro no processamento:', error);\n      toast({\n        title: \"Erro no Processamento\",\n        description: (error as Error).message || 'Erro desconhecido',\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const extractProductFromOCR = async (data: OCRData): Promise<ProcessedProduct> => {\n    // Simulação de extração inteligente de dados\n    const text = data.rawText.toLowerCase();\n    \n    // Extrair nome/modelo\n    const nome = data.extractedFields.modelo || \n               data.extractedFields.model || \n               data.fileName.replace('.pdf', '').replace(/[^a-zA-Z0-9\\s]/g, '');\n    \n    // Extrair potência\n    let potencia = data.extractedFields.potencia || data.extractedFields.power || '';\n    if (!potencia) {\n      const potenciaMatch = text.match(/(\\d+)\\s*w(?:att)?/i);\n      if (potenciaMatch) {\n        potencia = `${potenciaMatch[1]}W`;\n      }\n    }\n\n    // Extrair fabricante\n    let fabricante = data.extractedFields.fabricante || data.extractedFields.manufacturer || '';\n    if (!fabricante) {\n      for (const fab of fabricantesConhecidos) {\n        if (text.includes(fab.toLowerCase())) {\n          fabricante = fab;\n          break;\n        }\n      }\n    }\n\n    // Determinar categoria baseada no conteúdo\n    let categoria = 'Módulo Fotovoltaico'; // padrão\n    if (text.includes('inversor') || text.includes('inverter')) {\n      categoria = 'Inversor';\n    } else if (text.includes('estrutura') || text.includes('mounting')) {\n      categoria = 'Estrutura de Fixação';\n    } else if (text.includes('cabo') || text.includes('cable')) {\n      categoria = 'Cabo Solar';\n    }\n\n    // Extrair eficiência\n    let eficiencia = data.extractedFields.eficiencia || '';\n    if (!eficiencia) {\n      const eficienciaMatch = text.match(/(\\d+\\.?\\d*)\\s*%/);\n      if (eficienciaMatch) {\n        eficiencia = `${eficienciaMatch[1]}%`;\n      }\n    }\n\n    // Gerar preço estimado (simulação)\n    const precoEstimado = potencia ? \n      (parseInt(potencia.replace(/\\D/g, '')) * 1.5).toFixed(2) : \n      '0.00';\n\n    return {\n      id: `product-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      sourceFile: data.fileName,\n      nome: nome || 'Produto Sem Nome',\n      potencia: potencia || 'N/A',\n      preco: precoEstimado,\n      fabricante: fabricante || 'Fabricante Desconhecido',\n      categoria,\n      descricao: `Produto extraído automaticamente de ${data.fileName}`,\n      eficiencia,\n      confidence: data.confidence,\n      verified: false\n    };\n  };\n\n  const updateProduct = (productId: string, field: string, value: string) => {\n    setProcessedProducts(prev => \n      prev.map(product => \n        product.id === productId \n          ? { ...product, [field]: value, verified: true }\n          : product\n      )\n    );\n  };\n\n  const verifyProduct = (productId: string) => {\n    setProcessedProducts(prev => \n      prev.map(product => \n        product.id === productId \n          ? { ...product, verified: true }\n          : product\n      )\n    );\n  };\n\n  const saveProducts = async () => {\n    if (!onSaveProducts) {\n      toast({\n        title: \"Função de Salvamento\",\n        description: \"Função de salvamento não configurada.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSaving(true);\n    console.log('[OCRProcessor] Salvando', processedProducts.length, 'produtos');\n\n    try {\n      await onSaveProducts(processedProducts);\n      \n      toast({\n        title: \"Produtos Salvos\",\n        description: `${processedProducts.length} produto(s) salvo(s) com sucesso.`\n      });\n\n    } catch (error: unknown) {\n      console.error('[OCRProcessor] Erro ao salvar produtos:', error);\n      toast({\n        title: \"Erro ao Salvar\",\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return 'text-green-600';\n    if (confidence >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getConfidenceBadge = (confidence: number) => {\n    if (confidence >= 80) return 'default';\n    if (confidence >= 60) return 'secondary';\n    return 'destructive';\n  };\n\n  if (ocrData.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <Brain className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n          <p className=\"text-gray-600\">Nenhum dado OCR para processar</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Processamento Inteligente OCR\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isProcessing ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n                <span>Processando dados OCR...</span>\n              </div>\n              <Progress value={processingProgress} className=\"h-2\" />\n              <p className=\"text-sm text-gray-500\">\n                {Math.round(processingProgress)}% concluído\n              </p>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-lg font-medium\">\n                  {processedProducts.length} produto(s) processado(s)\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  {processedProducts.filter(p => p.verified).length} verificado(s)\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={processOCRData}\n                  disabled={isProcessing}\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Reprocessar\n                </Button>\n                <Button\n                  onClick={saveProducts}\n                  disabled={isSaving || processedProducts.length === 0}\n                >\n                  {isSaving ? (\n                    <div className=\"h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                  ) : (\n                    <Save className=\"h-4 w-4 mr-2\" />\n                  )}\n                  {isSaving ? 'Salvando...' : 'Salvar Produtos'}\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Lista de Produtos */}\n      {processedProducts.length > 0 && (\n        <div className=\"grid gap-4\">\n          {processedProducts.map((product) => (\n            <Card key={product.id} className={`${product.verified ? 'border-green-200' : 'border-yellow-200'}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <FileText className=\"h-5 w-5 text-gray-500\" />\n                    <div>\n                      <h3 className=\"font-medium\">{product.nome}</h3>\n                      <p className=\"text-sm text-gray-500\">Fonte: {product.sourceFile}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge \n                      variant={getConfidenceBadge(product.confidence)}\n                      className={getConfidenceColor(product.confidence)}\n                    >\n                      {product.confidence}% confiança\n                    </Badge>\n                    {product.verified ? (\n                      <Badge variant=\"default\">\n                        <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                        Verificado\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"secondary\">\n                        <AlertCircle className=\"h-3 w-3 mr-1\" />\n                        Pendente\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"basico\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"basico\">Dados Básicos</TabsTrigger>\n                    <TabsTrigger value=\"tecnico\">Dados Técnicos</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"basico\" className=\"space-y-4 mt-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor={`nome-${product.id}`}>Nome/Modelo</Label>\n                        <Input\n                          id={`nome-${product.id}`}\n                          value={product.nome}\n                          onChange={(e) => updateProduct(product.id, 'nome', e.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`fabricante-${product.id}`}>Fabricante</Label>\n                        <Select\n                          value={product.fabricante}\n                          onValueChange={(value) => updateProduct(product.id, 'fabricante', value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {fabricantesConhecidos.map(fab => (\n                              <SelectItem key={fab} value={fab}>{fab}</SelectItem>\n                            ))}\n                            <SelectItem value=\"outro\">Outro</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor={`categoria-${product.id}`}>Categoria</Label>\n                        <Select\n                          value={product.categoria}\n                          onValueChange={(value) => updateProduct(product.id, 'categoria', value)}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {categorias.map(cat => (\n                              <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor={`preco-${product.id}`}>Preço (R$)</Label>\n                        <Input\n                          id={`preco-${product.id}`}\n                          value={product.preco}\n                          onChange={(e) => updateProduct(product.id, 'preco', e.target.value)}\n                          type=\"number\"\n                          step=\"0.01\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor={`descricao-${product.id}`}>Descrição</Label>\n                      <Textarea\n                        id={`descricao-${product.id}`}\n                        value={product.descricao}\n                        onChange={(e) => updateProduct(product.id, 'descricao', e.target.value)}\n                        rows={3}\n                      />\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"tecnico\" className=\"space-y-4 mt-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor={`potencia-${product.id}`}>Potência</Label>\n                        <Input\n                          id={`potencia-${product.id}`}\n                          value={product.potencia}\n                          onChange={(e) => updateProduct(product.id, 'potencia', e.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`eficiencia-${product.id}`}>Eficiência</Label>\n                        <Input\n                          id={`eficiencia-${product.id}`}\n                          value={product.eficiencia || ''}\n                          onChange={(e) => updateProduct(product.id, 'eficiencia', e.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`tensao-${product.id}`}>Tensão</Label>\n                        <Input\n                          id={`tensao-${product.id}`}\n                          value={product.tensao || ''}\n                          onChange={(e) => updateProduct(product.id, 'tensao', e.target.value)}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor={`garantia-${product.id}`}>Garantia</Label>\n                        <Input\n                          id={`garantia-${product.id}`}\n                          value={product.garantia || ''}\n                          onChange={(e) => updateProduct(product.id, 'garantia', e.target.value)}\n                        />\n                      </div>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n                \n                <div className=\"flex justify-end mt-4\">\n                  {!product.verified && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => verifyProduct(product.id)}\n                    >\n                      <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                      Verificar Dados\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Alertas */}\n      {processedProducts.length > 0 && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Revise os dados extraídos antes de salvar. Produtos com baixa confiança (abaixo de 60%) \n            devem ser verificados manualmente. Clique em \"Verificar Dados\" após revisar cada produto.\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default OCRProcessor;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\OCR\\SimpleOCR.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\OCR\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporterV3.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporter\\OCRProcessor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporter\\PDFDropzone.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'allowPreview' and 'autoProcess'. Either include them or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [onFilesSelected, allowPreview, autoProcess, onFileError]","fix":{"range":[3025,3055],"text":"[onFilesSelected, allowPreview, autoProcess, onFileError]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'uploadedFiles'. Either include it or remove the dependency array.","line":190,"column":6,"nodeType":"ArrayExpression","endLine":190,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [uploadedFiles]","fix":{"range":[5852,5854],"text":"[uploadedFiles]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Upload, FileText, AlertCircle, CheckCircle, Eye, X, RotateCcw, Download } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\n\ninterface PDFFile {\n  file: File;\n  id: string;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress: number;\n  extractedData?: Record<string, unknown>;\n  error?: string;\n  preview?: string;\n  uploadedAt: Date;\n  processedAt?: Date;\n}\n\ninterface PDFDropzoneProps {\n  onFilesSelected: (files: File[]) => void;\n  onFileProcessed: (fileId: string, data: Record<string, unknown>) => void;\n  onFileError: (fileId: string, error: string) => void;\n  maxFiles?: number;\n  maxSize?: number; // em MB\n  className?: string;\n  showStats?: boolean;\n  allowPreview?: boolean;\n  autoProcess?: boolean;\n}\n\nexport const PDFDropzone: React.FC<PDFDropzoneProps> = ({\n  onFilesSelected,\n  onFileProcessed,\n  onFileError,\n  maxFiles = 5,\n  maxSize = 10,\n  className,\n  showStats = true,\n  allowPreview = true,\n  autoProcess = false\n}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<PDFFile[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [selectedPreview, setSelectedPreview] = useState<string | null>(null);\n  const [dragCounter, setDragCounter] = useState(0);\n\n  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: Array<{file: File, errors: Array<{message: string}>}>) => {\n    // Validar arquivos rejeitados\n    if (rejectedFiles.length > 0) {\n      const errors = rejectedFiles.map(({ file, errors }) => \n        `${file.name}: ${errors.map((e: {message: string}) => e.message).join(', ')}`\n      ).join('\\n');\n      \n      onFileError('validation', `Arquivos rejeitados:\\n${errors}`);\n      return;\n    }\n\n    // Processar arquivos aceitos\n    const newFiles: PDFFile[] = acceptedFiles.map(file => ({\n      file,\n      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      status: 'pending',\n      progress: 0,\n      uploadedAt: new Date()\n    }));\n\n    setUploadedFiles(prev => [...prev, ...newFiles]);\n    onFilesSelected(acceptedFiles);\n    \n    // Gerar preview se habilitado\n    if (allowPreview) {\n      newFiles.forEach(pdfFile => {\n        generatePreview(pdfFile.file, pdfFile.id);\n      });\n    }\n    \n    // Auto processar se habilitado\n    if (autoProcess) {\n      setIsProcessing(true);\n    }\n    \n    toast({\n      title: 'Arquivos adicionados',\n      description: `${acceptedFiles.length} arquivo(s) PDF adicionado(s) com sucesso.`\n    });\n  }, [onFilesSelected, onFileError]);\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf']\n    },\n    maxFiles,\n    maxSize: maxSize * 1024 * 1024, // Converter MB para bytes\n    multiple: true\n  });\n\n  const generatePreview = async (file: File, fileId: string) => {\n    try {\n      const fileURL = URL.createObjectURL(file);\n      setUploadedFiles(prev => prev.map(f => \n        f.id === fileId ? { ...f, preview: fileURL } : f\n      ));\n    } catch (error) {\n      console.error('Erro ao gerar preview:', error);\n    }\n  };\n\n  const removeFile = (fileId: string) => {\n    const file = uploadedFiles.find(f => f.id === fileId);\n    if (file?.preview) {\n      URL.revokeObjectURL(file.preview);\n    }\n    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));\n    \n    toast({\n      title: 'Arquivo removido',\n      description: 'O arquivo foi removido da lista.'\n    });\n  };\n\n  const clearAllFiles = () => {\n    uploadedFiles.forEach(file => {\n      if (file.preview) {\n        URL.revokeObjectURL(file.preview);\n      }\n    });\n    setUploadedFiles([]);\n    \n    toast({\n      title: 'Lista limpa',\n      description: 'Todos os arquivos foram removidos.'\n    });\n  };\n\n  const retryFile = (fileId: string) => {\n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId \n        ? { ...f, status: 'pending', progress: 0, error: undefined, processedAt: undefined }\n        : f\n    ));\n    \n    const file = uploadedFiles.find(f => f.id === fileId);\n    if (file) {\n      onFilesSelected([file.file]);\n      toast({\n        title: 'Reprocessando arquivo',\n        description: `Tentando processar ${file.file.name} novamente.`\n      });\n    }\n  };\n\n  const getFileStats = () => {\n    const total = uploadedFiles.length;\n    const completed = uploadedFiles.filter(f => f.status === 'completed').length;\n    const processing = uploadedFiles.filter(f => f.status === 'processing').length;\n    const errors = uploadedFiles.filter(f => f.status === 'error').length;\n    const pending = uploadedFiles.filter(f => f.status === 'pending').length;\n    const totalSize = uploadedFiles.reduce((acc, f) => acc + f.file.size, 0);\n    \n    return { total, completed, processing, errors, pending, totalSize };\n  };\n\n  const downloadFile = (pdfFile: PDFFile) => {\n    const url = URL.createObjectURL(pdfFile.file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = pdfFile.file.name;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Cleanup URLs on unmount\n  useEffect(() => {\n    return () => {\n      uploadedFiles.forEach(file => {\n        if (file.preview) {\n          URL.revokeObjectURL(file.preview);\n        }\n      });\n    };\n  }, []);\n\n  const stats = getFileStats();\n\n  const getStatusIcon = (status: PDFFile['status']) => {\n    switch (status) {\n      case 'pending':\n        return <FileText className=\"h-4 w-4 text-blue-500\" />;\n      case 'processing':\n        return <Upload className=\"h-4 w-4 text-yellow-500 animate-spin\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'error':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: PDFFile['status']) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-blue-100 text-blue-800';\n      case 'processing':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'error':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Estatísticas */}\n      {showStats && uploadedFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Estatísticas de Upload\n              </span>\n              {uploadedFiles.length > 1 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearAllFiles}\n                  className=\"text-red-600 hover:text-red-700\"\n                >\n                  <X className=\"h-4 w-4 mr-1\" />\n                  Limpar Tudo\n                </Button>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{stats.total}</div>\n                <div className=\"text-xs text-gray-500\">Total</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{stats.completed}</div>\n                <div className=\"text-xs text-gray-500\">Concluídos</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-yellow-600\">{stats.processing}</div>\n                <div className=\"text-xs text-gray-500\">Processando</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">{stats.errors}</div>\n                <div className=\"text-xs text-gray-500\">Erros</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-600\">{formatFileSize(stats.totalSize)}</div>\n                <div className=\"text-xs text-gray-500\">Tamanho Total</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Área de Drop */}\n      <Card className={cn(\n        'border-2 border-dashed transition-all duration-200 cursor-pointer',\n        isDragActive && !isDragReject && 'border-blue-500 bg-blue-50 scale-105',\n        isDragReject && 'border-red-500 bg-red-50',\n        !isDragActive && 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'\n      )}>\n        <CardContent className=\"p-8\">\n          <div {...getRootProps()} className=\"text-center\">\n            <input {...getInputProps()} />\n            <Upload className={cn(\n              'mx-auto h-12 w-12 mb-4',\n              isDragActive && !isDragReject && 'text-blue-500',\n              isDragReject && 'text-red-500',\n              !isDragActive && 'text-gray-400'\n            )} />\n            \n            {isDragActive ? (\n              isDragReject ? (\n                <p className=\"text-red-600 font-medium\">\n                  Arquivo não suportado. Apenas PDFs são aceitos.\n                </p>\n              ) : (\n                <p className=\"text-blue-600 font-medium\">\n                  Solte os arquivos PDF aqui...\n                </p>\n              )\n            ) : (\n              <div className=\"space-y-2\">\n                <p className=\"text-lg font-medium text-gray-900\">\n                  Arraste e solte arquivos PDF aqui\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  ou clique para selecionar arquivos\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  Máximo {maxFiles} arquivos, até {maxSize}MB cada\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de Arquivos */}\n      {uploadedFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Arquivos Selecionados ({uploadedFiles.length})</span>\n              {stats.completed > 0 && (\n                <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">\n                  {stats.completed}/{stats.total} processados\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {uploadedFiles.map((pdfFile) => (\n              <Card key={pdfFile.id} className=\"p-4 hover:shadow-md transition-shadow\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex items-start space-x-3 flex-1\">\n                    {getStatusIcon(pdfFile.status)}\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">\n                          {pdfFile.file.name}\n                        </p>\n                        <Badge className={getStatusColor(pdfFile.status)}>\n                          {pdfFile.status === 'pending' && 'Pendente'}\n                          {pdfFile.status === 'processing' && 'Processando'}\n                          {pdfFile.status === 'completed' && 'Concluído'}\n                          {pdfFile.status === 'error' && 'Erro'}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-4 text-xs text-gray-500 mb-2\">\n                        <span>{formatFileSize(pdfFile.file.size)}</span>\n                        <span>Adicionado: {pdfFile.uploadedAt.toLocaleTimeString()}</span>\n                        {pdfFile.processedAt && (\n                          <span>Processado: {pdfFile.processedAt.toLocaleTimeString()}</span>\n                        )}\n                      </div>\n                      \n                      {pdfFile.status === 'processing' && (\n                        <div className=\"mb-2\">\n                          <Progress value={pdfFile.progress} className=\"h-2\" />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Processando... {pdfFile.progress}%\n                          </p>\n                        </div>\n                      )}\n                      \n                      {pdfFile.error && (\n                        <Alert className=\"mt-2\">\n                          <AlertCircle className=\"h-4 w-4\" />\n                          <AlertDescription className=\"text-xs\">\n                            {pdfFile.error}\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    {/* Preview Button */}\n                    {allowPreview && pdfFile.preview && (\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl h-[80vh]\">\n                          <DialogHeader>\n                            <DialogTitle>{pdfFile.file.name}</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"flex-1 overflow-hidden\">\n                            <iframe\n                              src={pdfFile.preview}\n                              className=\"w-full h-full border rounded\"\n                              title={`Preview de ${pdfFile.file.name}`}\n                            />\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                    \n                    {/* Download Button */}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => downloadFile(pdfFile)}\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    {/* Retry Button */}\n                    {pdfFile.status === 'error' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => retryFile(pdfFile.id)}\n                        className=\"text-yellow-600 hover:text-yellow-700\"\n                      >\n                        <RotateCcw className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    \n                    {/* Remove Button */}\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeFile(pdfFile.id)}\n                      disabled={pdfFile.status === 'processing'}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default PDFDropzone;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporter\\PDFImporter.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleStartProcessing'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [autoProcess, handleStartProcessing]","fix":{"range":[2677,2690],"text":"[autoProcess, handleStartProcessing]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Upload, \n  FileText, \n  Eye, \n  Cpu, \n  Download,\n  CheckCircle,\n  AlertCircle,\n  RefreshCw,\n  Trash2\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { PDFDropzone } from './PDFDropzone';\nimport { PDFPreview } from './PDFPreview';\nimport { OCRProcessor } from './OCRProcessor';\nimport { toast } from 'sonner';\n\nexport interface ProcessedData {\n  id: string;\n  type: 'module' | 'inverter' | 'battery' | 'unknown';\n  confidence: number;\n  data: Record<string, unknown>;\n  rawText: string;\n  pageNumber: number;\n}\n\nexport interface ProcessingStatus {\n  status: 'idle' | 'uploading' | 'processing' | 'completed' | 'error';\n  progress: number;\n  message: string;\n  currentPage?: number;\n  totalPages?: number;\n}\n\ninterface PDFImporterProps {\n  onDataExtracted?: (data: ProcessedData[]) => void;\n  onError?: (error: string) => void;\n  className?: string;\n  maxFileSize?: number; // em MB\n  allowedTypes?: string[];\n  autoProcess?: boolean;\n}\n\nexport const PDFImporter: React.FC<PDFImporterProps> = ({\n  onDataExtracted,\n  onError,\n  className,\n  maxFileSize = 10,\n  allowedTypes = ['application/pdf'],\n  autoProcess = true\n}) => {\n  const [files, setFiles] = useState<File[]>([]);\n  const [currentFile, setCurrentFile] = useState<File | null>(null);\n  const [processedData, setProcessedData] = useState<ProcessedData[]>([]);\n  const [processingStatus, setProcessingStatus] = useState<ProcessingStatus>({\n    status: 'idle',\n    progress: 0,\n    message: 'Aguardando arquivo...'\n  });\n  const [activeTab, setActiveTab] = useState<string>('upload');\n\n  const handleFilesAccepted = useCallback((acceptedFiles: File[]) => {\n    setFiles(acceptedFiles);\n    \n    if (acceptedFiles.length > 0) {\n      const firstFile = acceptedFiles[0];\n      setCurrentFile(firstFile);\n      setActiveTab('preview');\n      \n      setProcessingStatus({\n        status: 'uploading',\n        progress: 100,\n        message: `Arquivo ${firstFile.name} carregado com sucesso`\n      });\n      \n      toast.success(`Arquivo ${firstFile.name} carregado com sucesso`);\n      \n      if (autoProcess) {\n        setTimeout(() => {\n          handleStartProcessing();\n        }, 1000);\n      }\n    }\n  }, [autoProcess]);\n\n  const handleFileRejected = useCallback((rejectedFiles: Array<{file: File, errors: Array<{code: string, message: string}>}>) => {\n    const errors = rejectedFiles.map(file => {\n      const errors = file.errors.map((error: {code: string, message: string}) => {\n        switch (error.code) {\n          case 'file-too-large':\n            return `Arquivo muito grande (máximo ${maxFileSize}MB)`;\n          case 'file-invalid-type':\n            return 'Tipo de arquivo não suportado (apenas PDF)';\n          default:\n            return error.message;\n        }\n      });\n      return `${file.file.name}: ${errors.join(', ')}`;\n    });\n    \n    const errorMessage = errors.join('\\n');\n    toast.error(errorMessage);\n    onError?.(errorMessage);\n  }, [maxFileSize, onError]);\n\n  const handleStartProcessing = useCallback(() => {\n    if (!currentFile) {\n      toast.error('Nenhum arquivo selecionado');\n      return;\n    }\n    \n    setActiveTab('processing');\n    setProcessingStatus({\n      status: 'processing',\n      progress: 0,\n      message: 'Iniciando processamento OCR...'\n    });\n  }, [currentFile]);\n\n  const handleProcessingProgress = useCallback((progress: number, message: string, currentPage?: number, totalPages?: number) => {\n    setProcessingStatus({\n      status: 'processing',\n      progress,\n      message,\n      currentPage,\n      totalPages\n    });\n  }, []);\n\n  const handleProcessingComplete = useCallback((data: ProcessedData[]) => {\n    setProcessedData(data);\n    setProcessingStatus({\n      status: 'completed',\n      progress: 100,\n      message: `Processamento concluído! ${data.length} item(ns) extraído(s)`\n    });\n    \n    toast.success(`Processamento concluído! ${data.length} item(ns) extraído(s)`);\n    onDataExtracted?.(data);\n  }, [onDataExtracted]);\n\n  const handleProcessingError = useCallback((error: string) => {\n    setProcessingStatus({\n      status: 'error',\n      progress: 0,\n      message: error\n    });\n    \n    toast.error(error);\n    onError?.(error);\n  }, [onError]);\n\n  const handleReset = useCallback(() => {\n    setFiles([]);\n    setCurrentFile(null);\n    setProcessedData([]);\n    setProcessingStatus({\n      status: 'idle',\n      progress: 0,\n      message: 'Aguardando arquivo...'\n    });\n    setActiveTab('upload');\n  }, []);\n\n  const handleRemoveFile = useCallback((index: number) => {\n    const newFiles = files.filter((_, i) => i !== index);\n    setFiles(newFiles);\n    \n    if (newFiles.length === 0) {\n      handleReset();\n    } else {\n      setCurrentFile(newFiles[0]);\n    }\n  }, [files, handleReset]);\n\n  const getStatusIcon = () => {\n    switch (processingStatus.status) {\n      case 'uploading':\n        return <Upload className=\"h-4 w-4\" />;\n      case 'processing':\n        return <RefreshCw className=\"h-4 w-4 animate-spin\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'error':\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (processingStatus.status) {\n      case 'processing':\n        return 'bg-blue-600';\n      case 'completed':\n        return 'bg-green-600';\n      case 'error':\n        return 'bg-red-600';\n      default:\n        return 'bg-gray-600';\n    }\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header com Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-5 w-5\" />\n              <span>Importação de PDF com OCR</span>\n            </div>\n            \n            {files.length > 0 && (\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"outline\">\n                  {files.length} arquivo{files.length !== 1 ? 's' : ''}\n                </Badge>\n                \n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={handleReset}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  Limpar\n                </Button>\n              </div>\n            )}\n          </CardTitle>\n        </CardHeader>\n        \n        <Separator />\n        \n        <CardContent className=\"pt-4\">\n          {/* Status do Processamento */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon()}\n                <span className=\"text-sm font-medium\">\n                  {processingStatus.message}\n                </span>\n              </div>\n              \n              {processingStatus.currentPage && processingStatus.totalPages && (\n                <Badge variant=\"secondary\">\n                  Página {processingStatus.currentPage} de {processingStatus.totalPages}\n                </Badge>\n              )}\n            </div>\n            \n            {processingStatus.status !== 'idle' && (\n              <Progress \n                value={processingStatus.progress} \n                className={cn('h-2', getStatusColor())}\n              />\n            )}\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Tabs de Conteúdo */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"upload\" className=\"flex items-center space-x-1\">\n            <Upload className=\"h-4 w-4\" />\n            <span>Upload</span>\n          </TabsTrigger>\n          \n          <TabsTrigger \n            value=\"preview\" \n            disabled={!currentFile}\n            className=\"flex items-center space-x-1\"\n          >\n            <Eye className=\"h-4 w-4\" />\n            <span>Visualizar</span>\n          </TabsTrigger>\n          \n          <TabsTrigger \n            value=\"processing\" \n            disabled={!currentFile}\n            className=\"flex items-center space-x-1\"\n          >\n            <Cpu className=\"h-4 w-4\" />\n            <span>Processar</span>\n          </TabsTrigger>\n          \n          <TabsTrigger \n            value=\"results\" \n            disabled={processedData.length === 0}\n            className=\"flex items-center space-x-1\"\n          >\n            <Download className=\"h-4 w-4\" />\n            <span>Resultados</span>\n          </TabsTrigger>\n        </TabsList>\n        \n        {/* Upload Tab */}\n        <TabsContent value=\"upload\" className=\"space-y-4\">\n          <PDFDropzone\n            onFilesAccepted={handleFilesAccepted}\n            onFilesRejected={handleFileRejected}\n            maxFileSize={maxFileSize}\n            acceptedTypes={allowedTypes}\n            files={files}\n            onRemoveFile={handleRemoveFile}\n          />\n          \n          {files.length > 0 && (\n            <div className=\"text-center\">\n              <Button onClick={() => setActiveTab('preview')}>\n                <Eye className=\"h-4 w-4 mr-2\" />\n                Visualizar PDF\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n        \n        {/* Preview Tab */}\n        <TabsContent value=\"preview\" className=\"space-y-4\">\n          {currentFile ? (\n            <>\n              <PDFPreview \n                file={currentFile}\n                onError={handleProcessingError}\n              />\n              \n              <div className=\"text-center space-x-2\">\n                <Button \n                  onClick={handleStartProcessing}\n                  disabled={processingStatus.status === 'processing'}\n                >\n                  <Cpu className=\"h-4 w-4 mr-2\" />\n                  Iniciar Processamento OCR\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  onClick={() => setActiveTab('upload')}\n                >\n                  Voltar ao Upload\n                </Button>\n              </div>\n            </>\n          ) : (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Nenhum arquivo selecionado para visualização.\n              </AlertDescription>\n            </Alert>\n          )}\n        </TabsContent>\n        \n        {/* Processing Tab */}\n        <TabsContent value=\"processing\" className=\"space-y-4\">\n          {currentFile ? (\n            <OCRProcessor\n              file={currentFile}\n              onProgress={handleProcessingProgress}\n              onComplete={handleProcessingComplete}\n              onError={handleProcessingError}\n              autoStart={activeTab === 'processing'}\n            />\n          ) : (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Nenhum arquivo selecionado para processamento.\n              </AlertDescription>\n            </Alert>\n          )}\n        </TabsContent>\n        \n        {/* Results Tab */}\n        <TabsContent value=\"results\" className=\"space-y-4\">\n          {processedData.length > 0 ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">\n                  Dados Extraídos ({processedData.length} item{processedData.length !== 1 ? 's' : ''})\n                </h3>\n                \n                <Button\n                  onClick={() => {\n                    const dataStr = JSON.stringify(processedData, null, 2);\n                    const blob = new Blob([dataStr], { type: 'application/json' });\n                    const url = URL.createObjectURL(blob);\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.download = `dados_extraidos_${Date.now()}.json`;\n                    link.click();\n                    URL.revokeObjectURL(url);\n                  }}\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Baixar JSON\n                </Button>\n              </div>\n              \n              <div className=\"grid gap-4\">\n                {processedData.map((item, index) => (\n                  <Card key={item.id}>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center justify-between text-base\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={item.type === 'unknown' ? 'destructive' : 'default'}>\n                            {item.type}\n                          </Badge>\n                          <span>Item {index + 1}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">\n                            Página {item.pageNumber}\n                          </Badge>\n                          <Badge \n                            variant={item.confidence > 0.8 ? 'default' : item.confidence > 0.6 ? 'secondary' : 'destructive'}\n                          >\n                            {Math.round(item.confidence * 100)}% confiança\n                          </Badge>\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {Object.entries(item.data).map(([key, value]) => (\n                          <div key={key} className=\"flex justify-between text-sm\">\n                            <span className=\"font-medium text-gray-600\">{key}:</span>\n                            <span className=\"text-right\">{String(value)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Nenhum dado foi extraído ainda. Execute o processamento OCR primeiro.\n              </AlertDescription>\n            </Alert>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default PDFImporter;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporter\\PDFPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFImporter\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFUploader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFUploaderV2.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'processFile'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [uploadedFiles.length, maxFiles, processFile]","fix":{"range":[5083,5115],"text":"[uploadedFiles.length, maxFiles, processFile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { \n  Upload, \n  FileText, \n  Eye, \n  Zap, \n  CheckCircle2, \n  AlertCircle,\n  Download,\n  Trash2,\n  RotateCcw,\n  Settings,\n  Image,\n  FileImage\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { useDropzone } from 'react-dropzone';\nimport Tesseract from 'tesseract.js';\nimport { PDFDocument } from 'pdf-lib';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\nimport 'react-pdf/dist/esm/Page/TextLayer.css';\n\n// Configurar worker do PDF.js\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\n\ninterface UploadedFile {\n  id: string;\n  file: File;\n  name: string;\n  size: number;\n  type: string;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress: number;\n  numPages?: number;\n  ocrResults?: OCRPageResult[];\n  extractedData?: ExtractedData;\n  error?: string;\n}\n\ninterface OCRPageResult {\n  pageNumber: number;\n  text: string;\n  confidence: number;\n  processingTime: number;\n  words: Array<{\n    text: string;\n    confidence: number;\n    bbox: {\n      x0: number;\n      y0: number;\n      x1: number;\n      y1: number;\n    };\n  }>;\n}\n\ninterface ExtractedData {\n  customerInfo?: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    cpf?: string;\n    cnpj?: string;\n  };\n  consumptionData?: Array<{\n    month: string;\n    consumption: number;\n    cost?: number;\n  }>;\n  equipmentData?: Array<{\n    type: string;\n    model: string;\n    quantity: number;\n    power?: number;\n    manufacturer?: string;\n  }>;\n  financialData?: {\n    totalValue?: number;\n    installments?: number;\n    monthlyPayment?: number;\n    downPayment?: number;\n  };\n  technicalData?: {\n    roofArea?: number;\n    orientation?: string;\n    inclination?: number;\n    shading?: string;\n  };\n}\n\ninterface OCRSettings {\n  language: string;\n  psm: string; // Page segmentation mode\n  oem: string; // OCR Engine mode\n  dpi: number;\n  preprocessImage: boolean;\n  enhanceContrast: boolean;\n  removeNoise: boolean;\n}\n\ninterface PDFUploaderV2Props {\n  onFilesProcessed?: (files: UploadedFile[]) => void;\n  onDataExtracted?: (data: ExtractedData[]) => void;\n  maxFiles?: number;\n  maxFileSize?: number;\n  allowedTypes?: string[];\n}\n\nconst PDFUploaderV2: React.FC<PDFUploaderV2Props> = ({\n  onFilesProcessed,\n  onDataExtracted,\n  maxFiles = 10,\n  maxFileSize = 50, // MB\n  allowedTypes = ['.pdf', '.png', '.jpg', '.jpeg']\n}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [scale, setScale] = useState(1.0);\n  const [showSettings, setShowSettings] = useState(false);\n  \n  // Configurações de OCR\n  const [ocrSettings, setOcrSettings] = useState<OCRSettings>({\n    language: 'por+eng',\n    psm: '6',\n    oem: '3',\n    dpi: 300,\n    preprocessImage: true,\n    enhanceContrast: true,\n    removeNoise: true\n  });\n  \n  // Padrões regex para extração de dados\n  const extractionPatterns = {\n    email: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g,\n    phone: /\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}/g,\n    cpf: /\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}/g,\n    cnpj: /\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}/g,\n    currency: /R\\$\\s?\\d{1,3}(?:\\.\\d{3})*(?:,\\d{2})?/g,\n    consumption: /\\d{1,4}\\s?kWh/gi,\n    power: /\\d{1,4}(?:,\\d{1,2})?\\s?kWp?/gi,\n    percentage: /\\d{1,3}(?:,\\d{1,2})?\\s?%/g,\n    area: /\\d{1,4}(?:,\\d{1,2})?\\s?m[²2]/gi\n  };\n  \n  // Configuração do dropzone\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (uploadedFiles.length + acceptedFiles.length > maxFiles) {\n      toast({\n        title: \"Limite Excedido\",\n        description: `Máximo de ${maxFiles} arquivos permitidos.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    const newFiles: UploadedFile[] = acceptedFiles.map(file => ({\n      id: `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      file,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'pending',\n      progress: 0\n    }));\n    \n    setUploadedFiles(prev => [...prev, ...newFiles]);\n    \n    // Processar arquivos automaticamente\n    for (const uploadedFile of newFiles) {\n      await processFile(uploadedFile.id);\n    }\n  }, [uploadedFiles.length, maxFiles]);\n  \n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'image/png': ['.png'],\n      'image/jpeg': ['.jpg', '.jpeg']\n    },\n    maxSize: maxFileSize * 1024 * 1024,\n    multiple: true\n  });\n  \n  // Processar arquivo individual\n  const processFile = async (fileId: string) => {\n    const file = uploadedFiles.find(f => f.id === fileId);\n    if (!file) return;\n    \n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, status: 'processing', progress: 0 } : f\n    ));\n    \n    try {\n      if (file.type === 'application/pdf') {\n        await processPDF(fileId);\n      } else {\n        await processImage(fileId);\n      }\n    } catch (error: unknown) {\n      console.error('Erro ao processar arquivo:', error);\n      setUploadedFiles(prev => prev.map(f => \n        f.id === fileId ? { \n          ...f, \n          status: 'error', \n          error: (error as Error).message || 'Erro desconhecido'\n        } : f\n      ));\n    }\n  };\n  \n  // Processar PDF\n  const processPDF = async (fileId: string) => {\n    const uploadedFile = uploadedFiles.find(f => f.id === fileId);\n    if (!uploadedFile) return;\n    \n    // Carregar PDF\n    const arrayBuffer = await uploadedFile.file.arrayBuffer();\n    const pdfDoc = await PDFDocument.load(arrayBuffer);\n    const numPages = pdfDoc.getPageCount();\n    \n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, numPages, progress: 10 } : f\n    ));\n    \n    const ocrResults: OCRPageResult[] = [];\n    \n    // Processar cada página\n    for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n      const startTime = Date.now();\n      \n      // Converter página para canvas\n      const canvas = await convertPDFPageToCanvas(arrayBuffer, pageNum);\n      \n      // Pré-processar imagem se habilitado\n      const processedCanvas = ocrSettings.preprocessImage ? \n        await preprocessImage(canvas) : canvas;\n      \n      // Executar OCR\n      const ocrResult = await performOCR(processedCanvas, pageNum);\n      ocrResult.processingTime = Date.now() - startTime;\n      \n      ocrResults.push(ocrResult);\n      \n      // Atualizar progresso\n      const progress = 10 + (pageNum / numPages) * 70;\n      setUploadedFiles(prev => prev.map(f => \n        f.id === fileId ? { ...f, progress } : f\n      ));\n    }\n    \n    // Extrair dados estruturados\n    const extractedData = extractStructuredData(ocrResults);\n    \n    // Finalizar processamento\n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId ? { \n        ...f, \n        status: 'completed', \n        progress: 100,\n        ocrResults,\n        extractedData\n      } : f\n    ));\n    \n    toast({\n      title: \"PDF Processado\",\n      description: `${numPages} página(s) processada(s) com sucesso.`\n    });\n  };\n  \n  // Processar imagem\n  const processImage = async (fileId: string) => {\n    const uploadedFile = uploadedFiles.find(f => f.id === fileId);\n    if (!uploadedFile) return;\n    \n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, progress: 20 } : f\n    ));\n    \n    // Criar canvas da imagem\n    const canvas = await createCanvasFromImage(uploadedFile.file);\n    \n    // Pré-processar se habilitado\n    const processedCanvas = ocrSettings.preprocessImage ? \n      await preprocessImage(canvas) : canvas;\n    \n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId ? { ...f, progress: 50 } : f\n    ));\n    \n    // Executar OCR\n    const startTime = Date.now();\n    const ocrResult = await performOCR(processedCanvas, 1);\n    ocrResult.processingTime = Date.now() - startTime;\n    \n    // Extrair dados estruturados\n    const extractedData = extractStructuredData([ocrResult]);\n    \n    // Finalizar\n    setUploadedFiles(prev => prev.map(f => \n      f.id === fileId ? { \n        ...f, \n        status: 'completed', \n        progress: 100,\n        numPages: 1,\n        ocrResults: [ocrResult],\n        extractedData\n      } : f\n    ));\n    \n    toast({\n      title: \"Imagem Processada\",\n      description: \"OCR concluído com sucesso.\"\n    });\n  };\n  \n  // Converter página PDF para canvas\n  const convertPDFPageToCanvas = async (pdfBuffer: ArrayBuffer, pageNumber: number): Promise<HTMLCanvasElement> => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      \n      if (!context) {\n        reject(new Error('Não foi possível obter contexto do canvas'));\n        return;\n      }\n      \n      const loadingTask = pdfjs.getDocument({ data: pdfBuffer });\n      \n      loadingTask.promise.then(pdf => {\n        pdf.getPage(pageNumber).then(page => {\n          const viewport = page.getViewport({ scale: ocrSettings.dpi / 72 });\n          canvas.height = viewport.height;\n          canvas.width = viewport.width;\n          \n          const renderContext = {\n            canvasContext: context,\n            viewport: viewport\n          };\n          \n          page.render(renderContext).promise.then(() => {\n            resolve(canvas);\n          }).catch(reject);\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n  \n  // Criar canvas de imagem\n  const createCanvasFromImage = async (file: File): Promise<HTMLCanvasElement> => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      if (!ctx) {\n        reject(new Error('Não foi possível obter contexto do canvas'));\n        return;\n      }\n      \n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        resolve(canvas);\n      };\n      \n      img.onerror = () => reject(new Error('Erro ao carregar imagem'));\n      img.src = URL.createObjectURL(file);\n    });\n  };\n  \n  // Pré-processar imagem\n  const preprocessImage = async (canvas: HTMLCanvasElement): Promise<HTMLCanvasElement> => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return canvas;\n    \n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    \n    // Aplicar filtros baseados nas configurações\n    for (let i = 0; i < data.length; i += 4) {\n      let r = data[i];\n      let g = data[i + 1];\n      let b = data[i + 2];\n      \n      // Aumentar contraste\n      if (ocrSettings.enhanceContrast) {\n        const factor = 1.5;\n        r = Math.min(255, Math.max(0, (r - 128) * factor + 128));\n        g = Math.min(255, Math.max(0, (g - 128) * factor + 128));\n        b = Math.min(255, Math.max(0, (b - 128) * factor + 128));\n      }\n      \n      // Remover ruído (conversão para escala de cinza)\n      if (ocrSettings.removeNoise) {\n        const gray = 0.299 * r + 0.587 * g + 0.114 * b;\n        r = g = b = gray;\n      }\n      \n      data[i] = r;\n      data[i + 1] = g;\n      data[i + 2] = b;\n    }\n    \n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n  \n  // Executar OCR\n  const performOCR = async (canvas: HTMLCanvasElement, pageNumber: number): Promise<OCRPageResult> => {\n    const worker = await Tesseract.createWorker({\n      logger: m => {\n        // Log do progresso interno do Tesseract\n        if (m.status === 'recognizing text') {\n          console.log(`OCR Progress: ${Math.round(m.progress * 100)}%`);\n        }\n      }\n    });\n    \n    try {\n      await worker.loadLanguage(ocrSettings.language);\n      await worker.initialize(ocrSettings.language);\n      await worker.setParameters({\n        tessedit_pageseg_mode: ocrSettings.psm,\n        tessedit_ocr_engine_mode: ocrSettings.oem\n      });\n      \n      const { data } = await worker.recognize(canvas);\n      \n      return {\n        pageNumber,\n        text: data.text,\n        confidence: data.confidence,\n        processingTime: 0, // Será definido externamente\n        words: data.words.map(word => ({\n          text: word.text,\n          confidence: word.confidence,\n          bbox: word.bbox\n        }))\n      };\n    } finally {\n      await worker.terminate();\n    }\n  };\n  \n  // Extrair dados estruturados\n  const extractStructuredData = (ocrResults: OCRPageResult[]): ExtractedData => {\n    const allText = ocrResults.map(r => r.text).join('\\n\\n');\n    const data: ExtractedData = {};\n    \n    // Extrair informações do cliente\n    data.customerInfo = {};\n    \n    const emails = allText.match(extractionPatterns.email);\n    if (emails) data.customerInfo.email = emails[0];\n    \n    const phones = allText.match(extractionPatterns.phone);\n    if (phones) data.customerInfo.phone = phones[0];\n    \n    const cpfs = allText.match(extractionPatterns.cpf);\n    if (cpfs) data.customerInfo.cpf = cpfs[0];\n    \n    const cnpjs = allText.match(extractionPatterns.cnpj);\n    if (cnpjs) data.customerInfo.cnpj = cnpjs[0];\n    \n    // Extrair dados de consumo\n    const consumptionMatches = allText.match(extractionPatterns.consumption);\n    if (consumptionMatches) {\n      data.consumptionData = consumptionMatches.map((match, index) => ({\n        month: `Mês ${index + 1}`,\n        consumption: parseInt(match.replace(/[^\\d]/g, ''))\n      }));\n    }\n    \n    // Extrair dados financeiros\n    const currencyMatches = allText.match(extractionPatterns.currency);\n    if (currencyMatches) {\n      data.financialData = {\n        totalValue: parseFloat(currencyMatches[0].replace(/[^\\d,]/g, '').replace(',', '.'))\n      };\n    }\n    \n    // Extrair dados técnicos\n    const areaMatches = allText.match(extractionPatterns.area);\n    if (areaMatches) {\n      data.technicalData = {\n        roofArea: parseFloat(areaMatches[0].replace(/[^\\d,]/g, '').replace(',', '.'))\n      };\n    }\n    \n    return data;\n  };\n  \n  // Remover arquivo\n  const removeFile = (fileId: string) => {\n    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));\n    if (selectedFile === fileId) {\n      setSelectedFile(null);\n    }\n  };\n  \n  // Reprocessar arquivo\n  const reprocessFile = async (fileId: string) => {\n    await processFile(fileId);\n  };\n  \n  // Exportar resultados\n  const exportResults = () => {\n    const results = uploadedFiles\n      .filter(f => f.status === 'completed')\n      .map(f => ({\n        fileName: f.name,\n        extractedData: f.extractedData,\n        ocrResults: f.ocrResults?.map(r => ({\n          pageNumber: r.pageNumber,\n          text: r.text,\n          confidence: r.confidence,\n          processingTime: r.processingTime\n        }))\n      }));\n    \n    const blob = new Blob([JSON.stringify(results, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `ocr_results_${Date.now()}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Exportação Concluída\",\n      description: \"Resultados exportados com sucesso.\"\n    });\n  };\n  \n  const selectedFileData = selectedFile ? uploadedFiles.find(f => f.id === selectedFile) : null;\n  const completedFiles = uploadedFiles.filter(f => f.status === 'completed');\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Upload Area */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5\" />\n            Upload de Arquivos para OCR\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div\n            {...getRootProps()}\n            className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n              isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'\n            }`}\n          >\n            <input {...getInputProps()} />\n            <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n            <p className=\"text-lg font-medium mb-2\">\n              {isDragActive ? 'Solte os arquivos aqui' : 'Arraste arquivos ou clique para selecionar'}\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              Suporte para PDF, PNG, JPG (máx. {maxFileSize}MB cada, {maxFiles} arquivos)\n            </p>\n          </div>\n          \n          {/* Configurações */}\n          <div className=\"mt-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowSettings(!showSettings)}\n              >\n                <Settings className=\"h-4 w-4\" />\n                Configurações OCR\n              </Button>\n              \n              {completedFiles.length > 0 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={exportResults}\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Exportar Resultados\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"text-sm text-gray-500\">\n              {uploadedFiles.length} / {maxFiles} arquivos\n            </div>\n          </div>\n          \n          {/* Painel de Configurações */}\n          {showSettings && (\n            <Card className=\"mt-4\">\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Configurações de OCR</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Idioma</Label>\n                    <Select\n                      value={ocrSettings.language}\n                      onValueChange={(value) => setOcrSettings(prev => ({ ...prev, language: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"por\">Português</SelectItem>\n                        <SelectItem value=\"eng\">Inglês</SelectItem>\n                        <SelectItem value=\"por+eng\">Português + Inglês</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label>DPI</Label>\n                    <Select\n                      value={ocrSettings.dpi.toString()}\n                      onValueChange={(value) => setOcrSettings(prev => ({ ...prev, dpi: parseInt(value) }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"150\">150 DPI</SelectItem>\n                        <SelectItem value=\"300\">300 DPI</SelectItem>\n                        <SelectItem value=\"600\">600 DPI</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"preprocess\"\n                      checked={ocrSettings.preprocessImage}\n                      onCheckedChange={(checked) => \n                        setOcrSettings(prev => ({ ...prev, preprocessImage: checked as boolean }))\n                      }\n                    />\n                    <Label htmlFor=\"preprocess\">Pré-processar imagem</Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"contrast\"\n                      checked={ocrSettings.enhanceContrast}\n                      onCheckedChange={(checked) => \n                        setOcrSettings(prev => ({ ...prev, enhanceContrast: checked as boolean }))\n                      }\n                    />\n                    <Label htmlFor=\"contrast\">Aumentar contraste</Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"noise\"\n                      checked={ocrSettings.removeNoise}\n                      onCheckedChange={(checked) => \n                        setOcrSettings(prev => ({ ...prev, removeNoise: checked as boolean }))\n                      }\n                    />\n                    <Label htmlFor=\"noise\">Remover ruído</Label>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Lista de Arquivos */}\n      {uploadedFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Arquivos Processados</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {uploadedFiles.map((file) => (\n                <div key={file.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    {file.type === 'application/pdf' ? (\n                      <FileText className=\"h-5 w-5 text-red-500\" />\n                    ) : (\n                      <FileImage className=\"h-5 w-5 text-blue-500\" />\n                    )}\n                    \n                    <div>\n                      <div className=\"font-medium\">{file.name}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {(file.size / 1024 / 1024).toFixed(2)} MB\n                        {file.numPages && ` • ${file.numPages} página(s)`}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    {file.status === 'processing' && (\n                      <div className=\"flex items-center gap-2\">\n                        <Progress value={file.progress} className=\"w-20\" />\n                        <span className=\"text-sm\">{Math.round(file.progress)}%</span>\n                      </div>\n                    )}\n                    \n                    <Badge\n                      variant={\n                        file.status === 'completed' ? 'default' :\n                        file.status === 'processing' ? 'secondary' :\n                        file.status === 'error' ? 'destructive' : 'outline'\n                      }\n                    >\n                      {file.status === 'completed' && <CheckCircle2 className=\"h-3 w-3 mr-1\" />}\n                      {file.status === 'error' && <AlertCircle className=\"h-3 w-3 mr-1\" />}\n                      {file.status === 'completed' ? 'Concluído' :\n                       file.status === 'processing' ? 'Processando' :\n                       file.status === 'error' ? 'Erro' : 'Pendente'}\n                    </Badge>\n                    \n                    {file.status === 'completed' && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedFile(file.id)}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    \n                    {file.status === 'error' && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => reprocessFile(file.id)}\n                      >\n                        <RotateCcw className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeFile(file.id)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Visualização de Resultados */}\n      {selectedFileData && selectedFileData.status === 'completed' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Resultados: {selectedFileData.name}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"extracted\" className=\"w-full\">\n              <TabsList>\n                <TabsTrigger value=\"extracted\">Dados Extraídos</TabsTrigger>\n                <TabsTrigger value=\"text\">Texto Completo</TabsTrigger>\n                <TabsTrigger value=\"confidence\">Confiança</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"extracted\" className=\"space-y-4\">\n                {selectedFileData.extractedData && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Dados do Cliente */}\n                    {selectedFileData.extractedData.customerInfo && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-sm\">Informações do Cliente</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                          {Object.entries(selectedFileData.extractedData.customerInfo)\n                            .filter(([_, value]) => value)\n                            .map(([key, value]) => (\n                              <div key={key}>\n                                <Label className=\"text-xs text-gray-500 capitalize\">{key}</Label>\n                                <div className=\"text-sm\">{value}</div>\n                              </div>\n                            ))\n                          }\n                        </CardContent>\n                      </Card>\n                    )}\n                    \n                    {/* Dados Financeiros */}\n                    {selectedFileData.extractedData.financialData && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-sm\">Dados Financeiros</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                          {Object.entries(selectedFileData.extractedData.financialData)\n                            .filter(([_, value]) => value)\n                            .map(([key, value]) => (\n                              <div key={key}>\n                                <Label className=\"text-xs text-gray-500 capitalize\">{key}</Label>\n                                <div className=\"text-sm\">\n                                  {typeof value === 'number' ? \n                                    `R$ ${value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}` : \n                                    value\n                                  }\n                                </div>\n                              </div>\n                            ))\n                          }\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                )}\n                \n                {/* Dados de Consumo */}\n                {selectedFileData.extractedData?.consumptionData && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Dados de Consumo</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                        {selectedFileData.extractedData.consumptionData.map((item, index) => (\n                          <div key={index} className=\"text-center p-2 border rounded\">\n                            <div className=\"text-xs text-gray-500\">{item.month}</div>\n                            <div className=\"text-sm font-medium\">{item.consumption} kWh</div>\n                            {item.cost && (\n                              <div className=\"text-xs text-gray-500\">R$ {item.cost.toFixed(2)}</div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"text\">\n                <div className=\"space-y-4\">\n                  {selectedFileData.ocrResults?.map((result, index) => (\n                    <Card key={index}>\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Página {result.pageNumber}</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <pre className=\"text-sm whitespace-pre-wrap max-h-64 overflow-auto border rounded p-3\">\n                          {result.text}\n                        </pre>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"confidence\">\n                <div className=\"space-y-2\">\n                  {selectedFileData.ocrResults?.map((result, index) => (\n                    <Card key={index}>\n                      <CardHeader>\n                        <CardTitle className=\"text-sm flex items-center gap-2\">\n                          Página {result.pageNumber}\n                          <Badge \n                            variant={\n                              result.confidence > 80 ? 'default' : \n                              result.confidence > 60 ? 'secondary' : 'destructive'\n                            }\n                          >\n                            {Math.round(result.confidence)}% confiança\n                          </Badge>\n                          <Badge variant=\"outline\">\n                            {result.processingTime}ms\n                          </Badge>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-sm text-gray-600\">\n                          {result.words.length} palavras reconhecidas\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default PDFUploaderV2;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PDFUploader\\PDFUploaderAdvanced.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'processFiles'. Either include it or remove the dependency array.","line":133,"column":6,"nodeType":"ArrayExpression","endLine":133,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [files.length, maxFiles, autoProcess, toast, showPreview, processFiles]","fix":{"range":[3819,3876],"text":"[files.length, maxFiles, autoProcess, toast, showPreview, processFiles]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Upload,\n  FileText,\n  CheckCircle,\n  XCircle,\n  Eye,\n  Settings,\n  Zap,\n  Battery,\n  Sun,\n  AlertTriangle,\n  Download,\n  Trash2,\n  RotateCcw\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { ocrService, OCRSettings, OCRProgress } from '@/services/ocrService';\n\nexport interface ProcessedFile {\n  id: string;\n  file: File;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress: number;\n  ocrResult?: {\n    text: string;\n    confidence: number;\n    extractedData: Record<string, string | number>;\n    processingTime: number;\n    pages: number;\n  };\n  error?: string;\n  equipmentType: 'module' | 'inverter' | 'battery';\n  preview?: string;\n}\n\ninterface PDFUploaderAdvancedProps {\n  onFilesProcessed: (files: ProcessedFile[]) => void;\n  maxFiles?: number;\n  acceptedTypes?: string[];\n  autoProcess?: boolean;\n  showPreview?: boolean;\n}\n\nconst PDFUploaderAdvanced: React.FC<PDFUploaderAdvancedProps> = ({\n  onFilesProcessed,\n  maxFiles = 10,\n  acceptedTypes = ['application/pdf'],\n  autoProcess = true,\n  showPreview = true\n}) => {\n  const { toast } = useToast();\n  const [files, setFiles] = useState<ProcessedFile[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [activeTab, setActiveTab] = useState('upload');\n  const [ocrSettings, setOcrSettings] = useState<OCRSettings>({\n    language: 'eng+por',\n    psm: 6,\n    oem: 3\n  });\n  const [batchSettings, setBatchSettings] = useState({\n    autoDetectType: true,\n    optimizeImages: true,\n    parallelProcessing: false,\n    maxConcurrent: 2\n  });\n  const processingRef = useRef<boolean>(false);\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (files.length + acceptedFiles.length > maxFiles) {\n      toast({\n        title: \"Limite excedido\",\n        description: `Máximo de ${maxFiles} arquivos permitidos`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const newFiles: ProcessedFile[] = [];\n    \n    for (const file of acceptedFiles) {\n      // Validar PDF\n      const validation = await ocrService.validatePDF(file);\n      \n      if (!validation.valid) {\n        toast({\n          title: \"Arquivo inválido\",\n          description: `${file.name}: ${validation.error}`,\n          variant: \"destructive\"\n        });\n        continue;\n      }\n\n      const processedFile: ProcessedFile = {\n        id: Math.random().toString(36).substr(2, 9),\n        file,\n        status: 'pending',\n        progress: 0,\n        equipmentType: detectEquipmentType(file.name)\n      };\n\n      // Gerar preview se habilitado\n      if (showPreview) {\n        try {\n          const images = await ocrService.convertPDFToImages(file, 1.0);\n          if (images.length > 0) {\n            processedFile.preview = images[0].toDataURL('image/jpeg', 0.8);\n          }\n        } catch (error) {\n          console.warn('Erro ao gerar preview:', error);\n        }\n      }\n\n      newFiles.push(processedFile);\n    }\n\n    setFiles(prev => [...prev, ...newFiles]);\n\n    if (autoProcess && newFiles.length > 0) {\n      processFiles(newFiles);\n    }\n  }, [files.length, maxFiles, autoProcess, showPreview, toast]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf']\n    },\n    maxFiles,\n    disabled: isProcessing\n  });\n\n  const detectEquipmentType = (filename: string): 'module' | 'inverter' | 'battery' => {\n    const name = filename.toLowerCase();\n    \n    if (name.includes('inverter') || name.includes('inversor')) {\n      return 'inverter';\n    }\n    if (name.includes('battery') || name.includes('bateria') || name.includes('storage')) {\n      return 'battery';\n    }\n    return 'module'; // Default\n  };\n\n  const processFiles = async (filesToProcess: ProcessedFile[] = files.filter(f => f.status === 'pending')) => {\n    if (processingRef.current || filesToProcess.length === 0) return;\n    \n    processingRef.current = true;\n    setIsProcessing(true);\n\n    try {\n      if (batchSettings.parallelProcessing) {\n        // Processamento paralelo\n        const chunks = [];\n        for (let i = 0; i < filesToProcess.length; i += batchSettings.maxConcurrent) {\n          chunks.push(filesToProcess.slice(i, i + batchSettings.maxConcurrent));\n        }\n\n        for (const chunk of chunks) {\n          await Promise.all(chunk.map(file => processFile(file)));\n        }\n      } else {\n        // Processamento sequencial\n        for (const file of filesToProcess) {\n          await processFile(file);\n        }\n      }\n    } finally {\n      processingRef.current = false;\n      setIsProcessing(false);\n    }\n  };\n\n  const processFile = async (fileToProcess: ProcessedFile) => {\n    const updateFile = (updates: Partial<ProcessedFile>) => {\n      setFiles(prev => prev.map(f => \n        f.id === fileToProcess.id ? { ...f, ...updates } : f\n      ));\n    };\n\n    updateFile({ status: 'processing', progress: 0 });\n\n    try {\n      const onProgress = (progress: OCRProgress) => {\n        updateFile({ progress: progress.progress });\n      };\n\n      const result = await ocrService.processEquipmentDatasheet(\n        fileToProcess.file,\n        fileToProcess.equipmentType,\n        ocrSettings,\n        onProgress\n      );\n\n      updateFile({\n        status: 'completed',\n        progress: 100,\n        ocrResult: result\n      });\n\n      toast({\n        title: \"Processamento concluído\",\n        description: `${fileToProcess.file.name} processado com ${result.confidence.toFixed(1)}% de confiança`\n      });\n\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';\n      updateFile({\n        status: 'error',\n        progress: 0,\n        error: errorMessage\n      });\n\n      toast({\n        title: \"Erro no processamento\",\n        description: `${fileToProcess.file.name}: ${errorMessage}`,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n\n  const retryFile = (fileId: string) => {\n    const file = files.find(f => f.id === fileId);\n    if (file) {\n      const updatedFile = { ...file, status: 'pending' as const, error: undefined };\n      setFiles(prev => prev.map(f => f.id === fileId ? updatedFile : f));\n      processFiles([updatedFile]);\n    }\n  };\n\n  const exportResults = () => {\n    const completedFiles = files.filter(f => f.status === 'completed' && f.ocrResult);\n    \n    if (completedFiles.length === 0) {\n      toast({\n        title: \"Nenhum resultado\",\n        description: \"Não há arquivos processados para exportar\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const results = completedFiles.map(f => ({\n      filename: f.file.name,\n      equipmentType: f.equipmentType,\n      confidence: f.ocrResult!.confidence,\n      processingTime: f.ocrResult!.processingTime,\n      pages: f.ocrResult!.pages,\n      extractedData: f.ocrResult!.extractedData\n    }));\n\n    const blob = new Blob([JSON.stringify(results, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `ocr-results-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const getStatusIcon = (status: ProcessedFile['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'processing':\n        return <div className=\"h-5 w-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const getEquipmentIcon = (type: ProcessedFile['equipmentType']) => {\n    switch (type) {\n      case 'inverter':\n        return <Zap className=\"h-4 w-4\" />;\n      case 'battery':\n        return <Battery className=\"h-4 w-4\" />;\n      default:\n        return <Sun className=\"h-4 w-4\" />;\n    }\n  };\n\n  const completedFiles = files.filter(f => f.status === 'completed');\n  const processingFiles = files.filter(f => f.status === 'processing');\n  const errorFiles = files.filter(f => f.status === 'error');\n\n  React.useEffect(() => {\n    onFilesProcessed(files);\n  }, [files, onFilesProcessed]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"upload\">Upload</TabsTrigger>\n          <TabsTrigger value=\"settings\">Configurações</TabsTrigger>\n          <TabsTrigger value=\"results\">Resultados</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"upload\" className=\"space-y-4\">\n          {/* Área de Upload */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div\n                {...getRootProps()}\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  isDragActive\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-300 hover:border-gray-400'\n                } ${isProcessing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}\n              >\n                <input {...getInputProps()} />\n                <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <p className=\"text-lg font-medium text-gray-900 mb-2\">\n                  {isDragActive\n                    ? 'Solte os arquivos aqui...'\n                    : 'Arraste PDFs aqui ou clique para selecionar'}\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  Máximo {maxFiles} arquivos • Apenas PDFs • Datasheets de equipamentos\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Lista de Arquivos */}\n          {files.length > 0 && (\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Arquivos ({files.length})</CardTitle>\n                <div className=\"flex gap-2\">\n                  {!autoProcess && (\n                    <Button\n                      onClick={() => processFiles()}\n                      disabled={isProcessing || files.filter(f => f.status === 'pending').length === 0}\n                      size=\"sm\"\n                    >\n                      Processar Pendentes\n                    </Button>\n                  )}\n                  <Button\n                    onClick={exportResults}\n                    disabled={completedFiles.length === 0}\n                    size=\"sm\"\n                    variant=\"outline\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Exportar\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {files.map((file) => (\n                    <div key={file.id} className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                      {/* Preview */}\n                      {file.preview && (\n                        <div className=\"flex-shrink-0\">\n                          <img\n                            src={file.preview}\n                            alt=\"Preview\"\n                            className=\"w-12 h-12 object-cover rounded border\"\n                          />\n                        </div>\n                      )}\n                      \n                      {/* Info */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          {getStatusIcon(file.status)}\n                          <span className=\"font-medium truncate\">{file.file.name}</span>\n                          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                            {getEquipmentIcon(file.equipmentType)}\n                            {file.equipmentType}\n                          </Badge>\n                        </div>\n                        \n                        {file.status === 'processing' && (\n                          <Progress value={file.progress} className=\"h-2\" />\n                        )}\n                        \n                        {file.status === 'completed' && file.ocrResult && (\n                          <div className=\"text-sm text-gray-600\">\n                            Confiança: {file.ocrResult.confidence.toFixed(1)}% • \n                            {file.ocrResult.pages} páginas • \n                            {(file.ocrResult.processingTime / 1000).toFixed(1)}s\n                          </div>\n                        )}\n                        \n                        {file.status === 'error' && (\n                          <div className=\"text-sm text-red-600\">\n                            {file.error}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Ações */}\n                      <div className=\"flex gap-1\">\n                        {file.status === 'error' && (\n                          <Button\n                            onClick={() => retryFile(file.id)}\n                            size=\"sm\"\n                            variant=\"outline\"\n                          >\n                            <RotateCcw className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        <Button\n                          onClick={() => removeFile(file.id)}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          disabled={file.status === 'processing'}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Configurações OCR */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Configurações OCR\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Idioma</Label>\n                  <Select\n                    value={ocrSettings.language}\n                    onValueChange={(value) => setOcrSettings(prev => ({ ...prev, language: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"eng\">Inglês</SelectItem>\n                      <SelectItem value=\"por\">Português</SelectItem>\n                      <SelectItem value=\"eng+por\">Inglês + Português</SelectItem>\n                      <SelectItem value=\"spa\">Espanhol</SelectItem>\n                      <SelectItem value=\"fra\">Francês</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label>Modo de Segmentação (PSM): {ocrSettings.psm}</Label>\n                  <Slider\n                    value={[ocrSettings.psm]}\n                    onValueChange={([value]) => setOcrSettings(prev => ({ ...prev, psm: value }))}\n                    min={0}\n                    max={13}\n                    step={1}\n                    className=\"mt-2\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    6: Bloco uniforme de texto (recomendado)\n                  </p>\n                </div>\n                \n                <div>\n                  <Label>Motor OCR (OEM): {ocrSettings.oem}</Label>\n                  <Slider\n                    value={[ocrSettings.oem]}\n                    onValueChange={([value]) => setOcrSettings(prev => ({ ...prev, oem: value }))}\n                    min={0}\n                    max={3}\n                    step={1}\n                    className=\"mt-2\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    3: LSTM + Legacy (recomendado)\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Configurações de Lote */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Processamento em Lote</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label>Detectar tipo automaticamente</Label>\n                  <Switch\n                    checked={batchSettings.autoDetectType}\n                    onCheckedChange={(checked) => setBatchSettings(prev => ({ ...prev, autoDetectType: checked }))}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label>Otimizar imagens</Label>\n                  <Switch\n                    checked={batchSettings.optimizeImages}\n                    onCheckedChange={(checked) => setBatchSettings(prev => ({ ...prev, optimizeImages: checked }))}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label>Processamento paralelo</Label>\n                  <Switch\n                    checked={batchSettings.parallelProcessing}\n                    onCheckedChange={(checked) => setBatchSettings(prev => ({ ...prev, parallelProcessing: checked }))}\n                  />\n                </div>\n                \n                {batchSettings.parallelProcessing && (\n                  <div>\n                    <Label>Máximo simultâneo: {batchSettings.maxConcurrent}</Label>\n                    <Slider\n                      value={[batchSettings.maxConcurrent]}\n                      onValueChange={([value]) => setBatchSettings(prev => ({ ...prev, maxConcurrent: value }))}\n                      min={1}\n                      max={5}\n                      step={1}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"results\" className=\"space-y-4\">\n          {/* Estatísticas */}\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold\">{files.length}</div>\n                <p className=\"text-xs text-gray-500\">Total de arquivos</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-green-600\">{completedFiles.length}</div>\n                <p className=\"text-xs text-gray-500\">Processados</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-blue-600\">{processingFiles.length}</div>\n                <p className=\"text-xs text-gray-500\">Processando</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-red-600\">{errorFiles.length}</div>\n                <p className=\"text-xs text-gray-500\">Com erro</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Resultados Detalhados */}\n          {completedFiles.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Dados Extraídos</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {completedFiles.map((file) => (\n                    <div key={file.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"font-medium\">{file.file.name}</h4>\n                        <Badge variant=\"outline\">\n                          {file.ocrResult!.confidence.toFixed(1)}% confiança\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid gap-2 text-sm\">\n                        {Object.entries(file.ocrResult!.extractedData)\n                          .filter(([key]) => !['confidence', 'extractedFields', 'processedAt', 'rawText'].includes(key))\n                          .map(([key, value]) => (\n                            <div key={key} className=\"flex justify-between\">\n                              <span className=\"text-gray-600 capitalize\">{key.replace(/([A-Z])/g, ' $1')}:</span>\n                              <span className=\"font-medium\">\n                                {typeof value === 'object' ? JSON.stringify(value) : value || 'N/A'}\n                              </span>\n                            </div>\n                          ))\n                        }\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default PDFUploaderAdvanced;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PVSolImporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\PerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ProjectViabilityAnalyzer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateViability'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [calculateViability, projectData]","fix":{"range":[5299,5312],"text":"[calculateViability, projectData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'irradiacaoEstados'. Either include it or remove the dependency array.","line":199,"column":6,"nodeType":"ArrayExpression","endLine":199,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [irradiacaoEstados, projectData.localizacao.estado]","fix":{"range":[5681,5713],"text":"[irradiacaoEstados, projectData.localizacao.estado]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'performViabilityAnalysis'. Either include it or remove the dependency array.","line":225,"column":6,"nodeType":"ArrayExpression","endLine":225,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [performViabilityAnalysis, projectData, onAnalysisComplete, toast]","fix":{"range":[6388,6428],"text":"[performViabilityAnalysis, projectData, onAnalysisComplete, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Calculator,\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Zap,\n  Sun,\n  Leaf,\n  BarChart3,\n  PieChart,\n  Calendar,\n  Target,\n  AlertTriangle,\n  CheckCircle2,\n  Info,\n  Download,\n  RefreshCw,\n  Lightbulb,\n  Battery,\n  Home,\n  Factory,\n  MapPin,\n  Clock\n} from 'lucide-react';\n\ninterface ProjectData {\n  // Dados básicos do projeto\n  nomeCliente: string;\n  tipoCliente: 'residencial' | 'comercial' | 'industrial' | 'rural';\n  localizacao: {\n    cidade: string;\n    estado: string;\n    latitude?: number;\n    longitude?: number;\n    irradiacao: number; // kWh/m²/dia\n  };\n  \n  // Dados de consumo\n  consumoMensalKwh: number;\n  tarifaEnergia: number; // R$/kWh\n  bandeiraTarifaria: number; // R$/kWh adicional\n  aumentoAnualTarifa: number; // %\n  \n  // Dados do sistema\n  potenciaInstalada: number; // kWp\n  geracaoEstimada: number; // kWh/mês\n  eficienciaInversor: number; // %\n  perdaSistema: number; // %\n  vidaUtilSistema: number; // anos\n  \n  // Dados financeiros\n  investimentoTotal: number;\n  custoManutencao: number; // R$/ano\n  aumentoManutencao: number; // % ao ano\n  \n  // Financiamento (opcional)\n  financiamento?: {\n    valorFinanciado: number;\n    taxaJuros: number; // % ao mês\n    prazoMeses: number;\n    valorEntrada: number;\n  };\n  \n  // Incentivos\n  compensacaoEnergia: boolean;\n  descontoICMS: number; // %\n  outrosIncentivos: number; // R$\n}\n\ninterface ViabilityMetrics {\n  // Métricas financeiras\n  payback: number; // anos\n  vpl: number; // Valor Presente Líquido\n  tir: number; // Taxa Interna de Retorno (%)\n  roi: number; // Return on Investment (%)\n  \n  // Economia\n  economiaAnual: number;\n  economiaTotal25Anos: number;\n  economiaComFinanciamento?: number;\n  \n  // Produção\n  producaoAnual: number;\n  producaoTotal25Anos: number;\n  autoconsumo: number; // %\n  injecaoRede: number; // %\n  \n  // Sustentabilidade\n  co2Evitado: number; // toneladas em 25 anos\n  arvoresEquivalentes: number;\n  \n  // Análise de risco\n  sensibilidade: {\n    tarifaEnergia: { pessimista: number; otimista: number };\n    irradiacao: { pessimista: number; otimista: number };\n    custoSistema: { pessimista: number; otimista: number };\n  };\n  \n  // Classificação\n  classificacao: 'excelente' | 'muito_bom' | 'bom' | 'regular' | 'ruim';\n  score: number; // 0-100\n}\n\ninterface ProjectViabilityAnalyzerProps {\n  initialData?: Partial<ProjectData>;\n  onAnalysisComplete?: (metrics: ViabilityMetrics) => void;\n}\n\nconst ProjectViabilityAnalyzer: React.FC<ProjectViabilityAnalyzerProps> = ({\n  initialData,\n  onAnalysisComplete\n}) => {\n  const { toast } = useToast();\n  \n  // Estados principais\n  const [projectData, setProjectData] = useState<ProjectData>({\n    nomeCliente: '',\n    tipoCliente: 'residencial',\n    localizacao: {\n      cidade: '',\n      estado: '',\n      irradiacao: 5.5\n    },\n    consumoMensalKwh: 300,\n    tarifaEnergia: 0.75,\n    bandeiraTarifaria: 0.05,\n    aumentoAnualTarifa: 8,\n    potenciaInstalada: 3,\n    geracaoEstimada: 450,\n    eficienciaInversor: 97,\n    perdaSistema: 15,\n    vidaUtilSistema: 25,\n    investimentoTotal: 18000,\n    custoManutencao: 200,\n    aumentoManutencao: 5,\n    compensacaoEnergia: true,\n    descontoICMS: 18,\n    outrosIncentivos: 0,\n    ...initialData\n  });\n  \n  const [viabilityMetrics, setViabilityMetrics] = useState<ViabilityMetrics | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [currentTab, setCurrentTab] = useState('dados');\n  \n  // Dados de referência\n  const tiposCliente = [\n    { value: 'residencial', label: 'Residencial', icon: Home },\n    { value: 'comercial', label: 'Comercial', icon: Factory },\n    { value: 'industrial', label: 'Industrial', icon: Factory },\n    { value: 'rural', label: 'Rural', icon: Leaf }\n  ];\n  \n  const estados = [\n    'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA',\n    'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN',\n    'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'\n  ];\n  \n  // Irradiação média por estado (kWh/m²/dia)\n  const irradiacaoEstados: Record<string, number> = {\n    'AC': 4.8, 'AL': 5.8, 'AP': 5.2, 'AM': 4.9, 'BA': 6.2, 'CE': 6.0,\n    'DF': 5.7, 'ES': 5.5, 'GO': 5.8, 'MA': 5.5, 'MT': 5.9, 'MS': 5.7,\n    'MG': 5.6, 'PA': 5.1, 'PB': 6.1, 'PR': 5.2, 'PE': 6.0, 'PI': 5.9,\n    'RJ': 5.3, 'RN': 6.2, 'RS': 4.9, 'RO': 5.0, 'RR': 5.3, 'SC': 4.8,\n    'SP': 5.4, 'SE': 5.9, 'TO': 5.8\n  };\n  \n  // Calcular métricas automaticamente quando os dados mudarem\n  useEffect(() => {\n    if (projectData.nomeCliente && projectData.investimentoTotal > 0) {\n      calculateViability();\n    }\n  }, [projectData]);\n  \n  // Atualizar irradiação quando o estado mudar\n  useEffect(() => {\n    if (projectData.localizacao.estado && irradiacaoEstados[projectData.localizacao.estado]) {\n      setProjectData(prev => ({\n        ...prev,\n        localizacao: {\n          ...prev.localizacao,\n          irradiacao: irradiacaoEstados[prev.localizacao.estado]\n        }\n      }));\n    }\n  }, [projectData.localizacao.estado]);\n  \n  const calculateViability = useCallback(async () => {\n    setIsAnalyzing(true);\n    \n    try {\n      // Simular delay para análise\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const metrics = performViabilityAnalysis(projectData);\n      setViabilityMetrics(metrics);\n      \n      if (onAnalysisComplete) {\n        onAnalysisComplete(metrics);\n      }\n      \n    } catch (error) {\n      console.error('Erro na análise:', error);\n      toast({\n        title: 'Erro na Análise',\n        description: 'Erro ao calcular viabilidade do projeto',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  }, [projectData, onAnalysisComplete, toast]);\n  \n  const performViabilityAnalysis = (data: ProjectData): ViabilityMetrics => {\n    // Cálculos básicos\n    const geracaoAnual = data.geracaoEstimada * 12;\n    const consumoAnual = data.consumoMensalKwh * 12;\n    const autoconsumo = Math.min(geracaoAnual / consumoAnual * 100, 100);\n    const injecaoRede = Math.max(0, 100 - autoconsumo);\n    \n    // Economia anual\n    const tarifaTotal = data.tarifaEnergia + data.bandeiraTarifaria;\n    const economiaEnergia = Math.min(geracaoAnual, consumoAnual) * tarifaTotal;\n    const creditoInjecao = Math.max(0, geracaoAnual - consumoAnual) * data.tarifaEnergia * 0.95; // 5% de perda\n    const economiaAnual = economiaEnergia + creditoInjecao - data.custoManutencao;\n    \n    // Fluxo de caixa para 25 anos\n    const fluxoCaixa: number[] = [];\n    let economiaAcumulada = 0;\n    let custoManutencaoAtual = data.custoManutencao;\n    let tarifaAtual = tarifaTotal;\n    \n    for (let ano = 0; ano <= 25; ano++) {\n      if (ano === 0) {\n        // Investimento inicial\n        fluxoCaixa.push(-data.investimentoTotal);\n      } else {\n        // Economia anual com degradação do sistema (0.5% ao ano)\n        const degradacao = Math.pow(0.995, ano - 1);\n        const geracaoAnoAtual = geracaoAnual * degradacao;\n        const economiaEnergia = Math.min(geracaoAnoAtual, consumoAnual) * tarifaAtual;\n        const creditoInjecao = Math.max(0, geracaoAnoAtual - consumoAnual) * tarifaAtual * 0.95;\n        const economiaAno = economiaEnergia + creditoInjecao - custoManutencaoAtual;\n        \n        fluxoCaixa.push(economiaAno);\n        economiaAcumulada += economiaAno;\n        \n        // Atualizar tarifa e custo de manutenção\n        tarifaAtual *= (1 + data.aumentoAnualTarifa / 100);\n        custoManutencaoAtual *= (1 + data.aumentoManutencao / 100);\n      }\n    }\n    \n    // Cálculo do Payback\n    let payback = 0;\n    let acumulado = 0;\n    for (let i = 0; i < fluxoCaixa.length; i++) {\n      acumulado += fluxoCaixa[i];\n      if (acumulado >= 0 && payback === 0) {\n        payback = i + (Math.abs(acumulado - fluxoCaixa[i]) / fluxoCaixa[i]);\n        break;\n      }\n    }\n    \n    // Cálculo do VPL (taxa de desconto 10%)\n    const taxaDesconto = 0.10;\n    const vpl = fluxoCaixa.reduce((acc, valor, index) => {\n      return acc + valor / Math.pow(1 + taxaDesconto, index);\n    }, 0);\n    \n    // Cálculo da TIR (aproximação)\n    const tir = calculateTIR(fluxoCaixa);\n    \n    // ROI\n    const roi = (economiaAcumulada / data.investimentoTotal) * 100;\n    \n    // Sustentabilidade\n    const producaoTotal25Anos = geracaoAnual * 25 * 0.9; // Considerando degradação média\n    const co2Evitado = producaoTotal25Anos * 0.0847; // 84.7g CO2/kWh (fator Brasil)\n    const arvoresEquivalentes = co2Evitado / 0.022; // 22kg CO2/árvore/ano\n    \n    // Análise de sensibilidade\n    const sensibilidade = {\n      tarifaEnergia: {\n        pessimista: calculateVPLWithTariff(data, tarifaTotal * 0.8),\n        otimista: calculateVPLWithTariff(data, tarifaTotal * 1.2)\n      },\n      irradiacao: {\n        pessimista: calculateVPLWithIrradiation(data, data.localizacao.irradiacao * 0.9),\n        otimista: calculateVPLWithIrradiation(data, data.localizacao.irradiacao * 1.1)\n      },\n      custoSistema: {\n        pessimista: calculateVPLWithCost(data, data.investimentoTotal * 1.2),\n        otimista: calculateVPLWithCost(data, data.investimentoTotal * 0.8)\n      }\n    };\n    \n    // Classificação e score\n    let score = 0;\n    \n    // Payback (30 pontos)\n    if (payback <= 5) score += 30;\n    else if (payback <= 7) score += 25;\n    else if (payback <= 10) score += 20;\n    else if (payback <= 15) score += 10;\n    \n    // VPL (25 pontos)\n    if (vpl >= data.investimentoTotal) score += 25;\n    else if (vpl >= data.investimentoTotal * 0.5) score += 20;\n    else if (vpl >= 0) score += 15;\n    else if (vpl >= -data.investimentoTotal * 0.2) score += 5;\n    \n    // TIR (20 pontos)\n    if (tir >= 20) score += 20;\n    else if (tir >= 15) score += 15;\n    else if (tir >= 12) score += 10;\n    else if (tir >= 8) score += 5;\n    \n    // Autoconsumo (15 pontos)\n    if (autoconsumo >= 90) score += 15;\n    else if (autoconsumo >= 70) score += 12;\n    else if (autoconsumo >= 50) score += 8;\n    else if (autoconsumo >= 30) score += 4;\n    \n    // Localização (10 pontos)\n    if (data.localizacao.irradiacao >= 6) score += 10;\n    else if (data.localizacao.irradiacao >= 5.5) score += 8;\n    else if (data.localizacao.irradiacao >= 5) score += 6;\n    else if (data.localizacao.irradiacao >= 4.5) score += 4;\n    \n    let classificacao: ViabilityMetrics['classificacao'];\n    if (score >= 85) classificacao = 'excelente';\n    else if (score >= 70) classificacao = 'muito_bom';\n    else if (score >= 55) classificacao = 'bom';\n    else if (score >= 40) classificacao = 'regular';\n    else classificacao = 'ruim';\n    \n    return {\n      payback,\n      vpl,\n      tir,\n      roi,\n      economiaAnual,\n      economiaTotal25Anos: economiaAcumulada,\n      producaoAnual: geracaoAnual,\n      producaoTotal25Anos,\n      autoconsumo,\n      injecaoRede,\n      co2Evitado,\n      arvoresEquivalentes,\n      sensibilidade,\n      classificacao,\n      score\n    };\n  };\n  \n  const calculateTIR = (fluxoCaixa: number[]): number => {\n    // Método de Newton-Raphson simplificado\n    let taxa = 0.1; // Chute inicial de 10%\n    \n    for (let i = 0; i < 100; i++) {\n      let vpl = 0;\n      let derivada = 0;\n      \n      for (let j = 0; j < fluxoCaixa.length; j++) {\n        vpl += fluxoCaixa[j] / Math.pow(1 + taxa, j);\n        derivada -= j * fluxoCaixa[j] / Math.pow(1 + taxa, j + 1);\n      }\n      \n      if (Math.abs(vpl) < 0.01) break;\n      \n      taxa = taxa - vpl / derivada;\n      \n      if (taxa < -0.99) taxa = -0.99;\n      if (taxa > 10) taxa = 10;\n    }\n    \n    return taxa * 100;\n  };\n  \n  const calculateVPLWithTariff = (data: ProjectData, newTariff: number): number => {\n    const tempData = { ...data, tarifaEnergia: newTariff - data.bandeiraTarifaria };\n    const metrics = performViabilityAnalysis(tempData);\n    return metrics.vpl;\n  };\n  \n  const calculateVPLWithIrradiation = (data: ProjectData, newIrradiation: number): number => {\n    const factor = newIrradiation / data.localizacao.irradiacao;\n    const tempData = { \n      ...data, \n      geracaoEstimada: data.geracaoEstimada * factor,\n      localizacao: { ...data.localizacao, irradiacao: newIrradiation }\n    };\n    const metrics = performViabilityAnalysis(tempData);\n    return metrics.vpl;\n  };\n  \n  const calculateVPLWithCost = (data: ProjectData, newCost: number): number => {\n    const tempData = { ...data, investimentoTotal: newCost };\n    const metrics = performViabilityAnalysis(tempData);\n    return metrics.vpl;\n  };\n  \n  const exportAnalysis = () => {\n    if (!viabilityMetrics) return;\n    \n    const report = {\n      projeto: {\n        cliente: projectData.nomeCliente,\n        tipo: projectData.tipoCliente,\n        localizacao: `${projectData.localizacao.cidade}, ${projectData.localizacao.estado}`,\n        data_analise: new Date().toLocaleDateString('pt-BR')\n      },\n      sistema: {\n        potencia_instalada_kwp: projectData.potenciaInstalada,\n        geracao_estimada_kwh_mes: projectData.geracaoEstimada,\n        investimento_total: projectData.investimentoTotal,\n        vida_util_anos: projectData.vidaUtilSistema\n      },\n      viabilidade: {\n        classificacao: viabilityMetrics.classificacao,\n        score: viabilityMetrics.score,\n        payback_anos: viabilityMetrics.payback.toFixed(1),\n        vpl_reais: viabilityMetrics.vpl.toFixed(2),\n        tir_percentual: viabilityMetrics.tir.toFixed(1),\n        roi_percentual: viabilityMetrics.roi.toFixed(1)\n      },\n      economia: {\n        economia_anual_reais: viabilityMetrics.economiaAnual.toFixed(2),\n        economia_25_anos_reais: viabilityMetrics.economiaTotal25Anos.toFixed(2),\n        autoconsumo_percentual: viabilityMetrics.autoconsumo.toFixed(1)\n      },\n      sustentabilidade: {\n        co2_evitado_toneladas: viabilityMetrics.co2Evitado.toFixed(2),\n        arvores_equivalentes: Math.round(viabilityMetrics.arvoresEquivalentes),\n        producao_25_anos_kwh: viabilityMetrics.producaoTotal25Anos.toFixed(0)\n      }\n    };\n    \n    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `analise-viabilidade-${projectData.nomeCliente.replace(/\\s+/g, '-').toLowerCase()}-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  \n  const getClassificationColor = (classification: string) => {\n    switch (classification) {\n      case 'excelente': return 'text-green-600 bg-green-50';\n      case 'muito_bom': return 'text-blue-600 bg-blue-50';\n      case 'bom': return 'text-yellow-600 bg-yellow-50';\n      case 'regular': return 'text-orange-600 bg-orange-50';\n      case 'ruim': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n  \n  const getClassificationLabel = (classification: string) => {\n    switch (classification) {\n      case 'excelente': return 'Excelente';\n      case 'muito_bom': return 'Muito Bom';\n      case 'bom': return 'Bom';\n      case 'regular': return 'Regular';\n      case 'ruim': return 'Ruim';\n      default: return 'Não Avaliado';\n    }\n  };\n  \n  return (\n    <Card className=\"w-full max-w-6xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Calculator className=\"h-5 w-5\" />\n            Análise de Viabilidade de Projetos Solares\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {viabilityMetrics && (\n              <Button variant=\"outline\" size=\"sm\" onClick={exportAnalysis}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Exportar\n              </Button>\n            )}\n            <Button variant=\"outline\" size=\"sm\" onClick={calculateViability} disabled={isAnalyzing}>\n              {isAnalyzing ? (\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <Calculator className=\"h-4 w-4 mr-2\" />\n              )}\n              {isAnalyzing ? 'Analisando...' : 'Analisar'}\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={currentTab} onValueChange={setCurrentTab}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"dados\">Dados</TabsTrigger>\n            <TabsTrigger value=\"resultados\">Resultados</TabsTrigger>\n            <TabsTrigger value=\"financeiro\">Financeiro</TabsTrigger>\n            <TabsTrigger value=\"sustentabilidade\">Sustentabilidade</TabsTrigger>\n            <TabsTrigger value=\"sensibilidade\">Sensibilidade</TabsTrigger>\n          </TabsList>\n          \n          {/* Tab Dados */}\n          <TabsContent value=\"dados\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Dados do Cliente */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Home className=\"h-5 w-5\" />\n                    Dados do Cliente\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Nome do Cliente</Label>\n                    <Input\n                      value={projectData.nomeCliente}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, nomeCliente: e.target.value }))}\n                      placeholder=\"Nome do cliente\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Tipo de Cliente</Label>\n                    <Select \n                      value={projectData.tipoCliente} \n                      onValueChange={(value: string) => setProjectData(prev => ({ ...prev, tipoCliente: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {tiposCliente.map(tipo => (\n                          <SelectItem key={tipo.value} value={tipo.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <tipo.icon className=\"h-4 w-4\" />\n                              {tipo.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div className=\"space-y-2\">\n                      <Label>Cidade</Label>\n                      <Input\n                        value={projectData.localizacao.cidade}\n                        onChange={(e) => setProjectData(prev => ({\n                          ...prev,\n                          localizacao: { ...prev.localizacao, cidade: e.target.value }\n                        }))}\n                        placeholder=\"Cidade\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label>Estado</Label>\n                      <Select \n                        value={projectData.localizacao.estado} \n                        onValueChange={(value) => setProjectData(prev => ({\n                          ...prev,\n                          localizacao: { ...prev.localizacao, estado: value }\n                        }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"UF\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {estados.map(estado => (\n                            <SelectItem key={estado} value={estado}>{estado}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Irradiação Solar (kWh/m²/dia)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.localizacao.irradiacao}\n                      onChange={(e) => setProjectData(prev => ({\n                        ...prev,\n                        localizacao: { ...prev.localizacao, irradiacao: Number(e.target.value) }\n                      }))}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Dados de Consumo */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Zap className=\"h-5 w-5\" />\n                    Dados de Consumo\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Consumo Mensal (kWh)</Label>\n                    <Input\n                      type=\"number\"\n                      value={projectData.consumoMensalKwh}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, consumoMensalKwh: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Tarifa de Energia (R$/kWh)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={projectData.tarifaEnergia}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, tarifaEnergia: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Bandeira Tarifária (R$/kWh)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={projectData.bandeiraTarifaria}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, bandeiraTarifaria: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Aumento Anual da Tarifa (%)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.aumentoAnualTarifa}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, aumentoAnualTarifa: Number(e.target.value) }))}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Dados do Sistema */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Sun className=\"h-5 w-5\" />\n                    Dados do Sistema\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Potência Instalada (kWp)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.potenciaInstalada}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, potenciaInstalada: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Geração Estimada (kWh/mês)</Label>\n                    <Input\n                      type=\"number\"\n                      value={projectData.geracaoEstimada}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, geracaoEstimada: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Eficiência do Inversor (%)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.eficienciaInversor}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, eficienciaInversor: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Perda do Sistema (%)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.perdaSistema}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, perdaSistema: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Vida Útil do Sistema (anos)</Label>\n                    <Input\n                      type=\"number\"\n                      value={projectData.vidaUtilSistema}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, vidaUtilSistema: Number(e.target.value) }))}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Dados Financeiros */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    Dados Financeiros\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Investimento Total (R$)</Label>\n                    <Input\n                      type=\"number\"\n                      value={projectData.investimentoTotal}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, investimentoTotal: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Custo de Manutenção Anual (R$)</Label>\n                    <Input\n                      type=\"number\"\n                      value={projectData.custoManutencao}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, custoManutencao: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Aumento Anual da Manutenção (%)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.aumentoManutencao}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, aumentoManutencao: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Desconto ICMS (%)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectData.descontoICMS}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, descontoICMS: Number(e.target.value) }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Outros Incentivos (R$)</Label>\n                    <Input\n                      type=\"number\"\n                      value={projectData.outrosIncentivos}\n                      onChange={(e) => setProjectData(prev => ({ ...prev, outrosIncentivos: Number(e.target.value) }))}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n          \n          {/* Tab Resultados */}\n          <TabsContent value=\"resultados\" className=\"space-y-4\">\n            {viabilityMetrics ? (\n              <>\n                {/* Resumo Executivo */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Target className=\"h-5 w-5\" />\n                        Resumo Executivo\n                      </div>\n                      <Badge className={`px-3 py-1 ${getClassificationColor(viabilityMetrics.classificacao)}`}>\n                        {getClassificationLabel(viabilityMetrics.classificacao)}\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {viabilityMetrics.payback.toFixed(1)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">anos</div>\n                        <div className=\"text-xs font-medium\">Payback</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {viabilityMetrics.tir.toFixed(1)}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">ao ano</div>\n                        <div className=\"text-xs font-medium\">TIR</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-purple-600\">\n                          R$ {(viabilityMetrics.vpl / 1000).toFixed(0)}k\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">em 25 anos</div>\n                        <div className=\"text-xs font-medium\">VPL</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-orange-600\">\n                          {viabilityMetrics.score}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">de 100</div>\n                        <div className=\"text-xs font-medium\">Score</div>\n                      </div>\n                    </div>\n                    \n                    <Separator className=\"my-4\" />\n                    \n                    <div className=\"text-center\">\n                      <Progress value={viabilityMetrics.score} className=\"w-full h-3 mb-2\" />\n                      <div className=\"text-sm text-muted-foreground\">\n                        Score de Viabilidade: {viabilityMetrics.score}/100\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                {/* Métricas Detalhadas */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <DollarSign className=\"h-4 w-4 text-green-600\" />\n                        <span className=\"text-sm font-medium\">Economia Anual</span>\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        R$ {viabilityMetrics.economiaAnual.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Total em 25 anos: R$ {(viabilityMetrics.economiaTotal25Anos / 1000).toFixed(0)}k\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Zap className=\"h-4 w-4 text-yellow-600\" />\n                        <span className=\"text-sm font-medium\">Produção Anual</span>\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        {viabilityMetrics.producaoAnual.toLocaleString()} kWh\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Total em 25 anos: {(viabilityMetrics.producaoTotal25Anos / 1000).toFixed(0)}k kWh\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Home className=\"h-4 w-4 text-blue-600\" />\n                        <span className=\"text-sm font-medium\">Autoconsumo</span>\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        {viabilityMetrics.autoconsumo.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Injeção na rede: {viabilityMetrics.injecaoRede.toFixed(1)}%\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n                        <span className=\"text-sm font-medium\">ROI</span>\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        {viabilityMetrics.roi.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Retorno sobre investimento\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Clock className=\"h-4 w-4 text-orange-600\" />\n                        <span className=\"text-sm font-medium\">Payback</span>\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        {viabilityMetrics.payback.toFixed(1)} anos\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Tempo de retorno do investimento\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <BarChart3 className=\"h-4 w-4 text-red-600\" />\n                        <span className=\"text-sm font-medium\">TIR</span>\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        {viabilityMetrics.tir.toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Taxa interna de retorno\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Calculator className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground mb-4\">\n                    Preencha os dados do projeto e clique em \"Analisar\" para ver os resultados\n                  </p>\n                  <Button onClick={calculateViability} disabled={isAnalyzing}>\n                    {isAnalyzing ? (\n                      <>\n                        <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Analisando...\n                      </>\n                    ) : (\n                      <>\n                        <Calculator className=\"h-4 w-4 mr-2\" />\n                        Analisar Viabilidade\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n          \n          {/* Tab Financeiro */}\n          <TabsContent value=\"financeiro\" className=\"space-y-4\">\n            {viabilityMetrics ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Fluxo de Caixa Projetado</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between font-medium border-b pb-2\">\n                        <span>Ano</span>\n                        <span>Economia Anual</span>\n                        <span>Acumulado</span>\n                      </div>\n                      {Array.from({ length: 6 }, (_, i) => {\n                        const ano = i;\n                        const economia = ano === 0 ? -projectData.investimentoTotal : viabilityMetrics.economiaAnual * Math.pow(0.995, ano - 1);\n                        const acumulado = ano === 0 ? economia : economia * ano - projectData.investimentoTotal;\n                        \n                        return (\n                          <div key={ano} className=\"flex justify-between py-1\">\n                            <span>{ano}</span>\n                            <span className={economia >= 0 ? 'text-green-600' : 'text-red-600'}>\n                              R$ {economia.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                            </span>\n                            <span className={acumulado >= 0 ? 'text-green-600' : 'text-red-600'}>\n                              R$ {acumulado.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                            </span>\n                          </div>\n                        );\n                      })}\n                      <div className=\"text-xs text-muted-foreground pt-2\">\n                        * Valores considerando degradação de 0,5% ao ano\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Indicadores Financeiros</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Valor Presente Líquido (VPL)</span>\n                        <span className={`font-medium ${viabilityMetrics.vpl >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          R$ {viabilityMetrics.vpl.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Taxa Interna de Retorno (TIR)</span>\n                        <span className=\"font-medium text-blue-600\">\n                          {viabilityMetrics.tir.toFixed(2)}% a.a.\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Return on Investment (ROI)</span>\n                        <span className=\"font-medium text-purple-600\">\n                          {viabilityMetrics.roi.toFixed(1)}%\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Payback Simples</span>\n                        <span className=\"font-medium text-orange-600\">\n                          {viabilityMetrics.payback.toFixed(1)} anos\n                        </span>\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Investimento Total</span>\n                        <span className=\"font-medium\">\n                          R$ {projectData.investimentoTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Economia Total (25 anos)</span>\n                        <span className=\"font-medium text-green-600\">\n                          R$ {viabilityMetrics.economiaTotal25Anos.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Lucro Líquido (25 anos)</span>\n                        <span className={`font-medium ${(viabilityMetrics.economiaTotal25Anos - projectData.investimentoTotal) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          R$ {(viabilityMetrics.economiaTotal25Anos - projectData.investimentoTotal).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    Execute a análise para ver as métricas financeiras\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n          \n          {/* Tab Sustentabilidade */}\n          <TabsContent value=\"sustentabilidade\" className=\"space-y-4\">\n            {viabilityMetrics ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Leaf className=\"h-5 w-5 text-green-600\" />\n                      Impacto Ambiental\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-green-600\">\n                        {viabilityMetrics.co2Evitado.toFixed(1)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">toneladas de CO₂ evitadas</div>\n                      <div className=\"text-xs text-muted-foreground\">em 25 anos</div>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {Math.round(viabilityMetrics.arvoresEquivalentes)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">árvores plantadas equivalentes</div>\n                      <div className=\"text-xs text-muted-foreground\">absorção de CO₂</div>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Produção total (25 anos):</span>\n                        <span className=\"font-medium\">\n                          {(viabilityMetrics.producaoTotal25Anos / 1000).toFixed(0)}k kWh\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex justify-between\">\n                        <span>Equivale a:</span>\n                        <span className=\"font-medium\">\n                          {(viabilityMetrics.producaoTotal25Anos / 1000000).toFixed(1)} MWh\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex justify-between\">\n                        <span>Fator de emissão evitado:</span>\n                        <span className=\"font-medium\">84.7g CO₂/kWh</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Sun className=\"h-5 w-5 text-yellow-600\" />\n                      Benefícios Energéticos\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm\">Autoconsumo</span>\n                          <span className=\"text-sm font-medium\">{viabilityMetrics.autoconsumo.toFixed(1)}%</span>\n                        </div>\n                        <Progress value={viabilityMetrics.autoconsumo} className=\"h-2\" />\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm\">Injeção na rede</span>\n                          <span className=\"text-sm font-medium\">{viabilityMetrics.injecaoRede.toFixed(1)}%</span>\n                        </div>\n                        <Progress value={viabilityMetrics.injecaoRede} className=\"h-2\" />\n                      </div>\n                    </div>\n                    \n                    <Separator />\n                    \n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Produção anual:</span>\n                        <span className=\"font-medium\">\n                          {viabilityMetrics.producaoAnual.toLocaleString()} kWh\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex justify-between\">\n                        <span>Consumo anual:</span>\n                        <span className=\"font-medium\">\n                          {(projectData.consumoMensalKwh * 12).toLocaleString()} kWh\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex justify-between\">\n                        <span>Cobertura do consumo:</span>\n                        <span className=\"font-medium text-green-600\">\n                          {((viabilityMetrics.producaoAnual / (projectData.consumoMensalKwh * 12)) * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex justify-between\">\n                        <span>Irradiação local:</span>\n                        <span className=\"font-medium\">\n                          {projectData.localizacao.irradiacao} kWh/m²/dia\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Leaf className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    Execute a análise para ver o impacto ambiental\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n          \n          {/* Tab Sensibilidade */}\n          <TabsContent value=\"sensibilidade\" className=\"space-y-4\">\n            {viabilityMetrics ? (\n              <div className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n                      Análise de Sensibilidade\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <Alert>\n                        <Info className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          Esta análise mostra como variações nos principais parâmetros afetam a viabilidade do projeto.\n                          Os cenários pessimista e otimista consideram variações de ±20% nos valores base.\n                        </AlertDescription>\n                      </Alert>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        {/* Sensibilidade Tarifa */}\n                        <Card>\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-base\">Tarifa de Energia</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold\">Base</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                R$ {viabilityMetrics.vpl.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                              </div>\n                            </div>\n                            \n                            <Separator className=\"my-2\" />\n                            \n                            <div className=\"space-y-1 text-xs\">\n                              <div className=\"flex justify-between\">\n                                <span>Pessimista (-20%):</span>\n                                <span className={viabilityMetrics.sensibilidade.tarifaEnergia.pessimista >= 0 ? 'text-green-600' : 'text-red-600'}>\n                                  R$ {viabilityMetrics.sensibilidade.tarifaEnergia.pessimista.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Otimista (+20%):</span>\n                                <span className={viabilityMetrics.sensibilidade.tarifaEnergia.otimista >= 0 ? 'text-green-600' : 'text-red-600'}>\n                                  R$ {viabilityMetrics.sensibilidade.tarifaEnergia.otimista.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                                </span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                        \n                        {/* Sensibilidade Irradiação */}\n                        <Card>\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-base\">Irradiação Solar</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold\">Base</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                R$ {viabilityMetrics.vpl.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                              </div>\n                            </div>\n                            \n                            <Separator className=\"my-2\" />\n                            \n                            <div className=\"space-y-1 text-xs\">\n                              <div className=\"flex justify-between\">\n                                <span>Pessimista (-10%):</span>\n                                <span className={viabilityMetrics.sensibilidade.irradiacao.pessimista >= 0 ? 'text-green-600' : 'text-red-600'}>\n                                  R$ {viabilityMetrics.sensibilidade.irradiacao.pessimista.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Otimista (+10%):</span>\n                                <span className={viabilityMetrics.sensibilidade.irradiacao.otimista >= 0 ? 'text-green-600' : 'text-red-600'}>\n                                  R$ {viabilityMetrics.sensibilidade.irradiacao.otimista.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                                </span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                        \n                        {/* Sensibilidade Custo */}\n                        <Card>\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-base\">Custo do Sistema</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold\">Base</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                R$ {viabilityMetrics.vpl.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                              </div>\n                            </div>\n                            \n                            <Separator className=\"my-2\" />\n                            \n                            <div className=\"space-y-1 text-xs\">\n                              <div className=\"flex justify-between\">\n                                <span>Pessimista (+20%):</span>\n                                <span className={viabilityMetrics.sensibilidade.custoSistema.pessimista >= 0 ? 'text-green-600' : 'text-red-600'}>\n                                  R$ {viabilityMetrics.sensibilidade.custoSistema.pessimista.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Otimista (-20%):</span>\n                                <span className={viabilityMetrics.sensibilidade.custoSistema.otimista >= 0 ? 'text-green-600' : 'text-red-600'}>\n                                  R$ {viabilityMetrics.sensibilidade.custoSistema.otimista.toLocaleString('pt-BR', { minimumFractionDigits: 0 })}\n                                </span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                {/* Matriz de Risco */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Matriz de Risco</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                            Fatores Positivos\n                          </h4>\n                          <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                            {projectData.localizacao.irradiacao >= 5.5 && (\n                              <li>• Boa irradiação solar na região</li>\n                            )}\n                            {viabilityMetrics.autoconsumo >= 70 && (\n                              <li>• Alto percentual de autoconsumo</li>\n                            )}\n                            {viabilityMetrics.payback <= 8 && (\n                              <li>• Payback atrativo</li>\n                            )}\n                            {viabilityMetrics.tir >= 12 && (\n                              <li>• TIR superior à taxa básica de juros</li>\n                            )}\n                            {projectData.compensacaoEnergia && (\n                              <li>• Sistema de compensação ativo</li>\n                            )}\n                          </ul>\n                        </div>\n                        \n                        <div>\n                          <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                            Fatores de Risco\n                          </h4>\n                          <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                            {projectData.localizacao.irradiacao < 5 && (\n                              <li>• Irradiação solar abaixo da média</li>\n                            )}\n                            {viabilityMetrics.autoconsumo < 50 && (\n                              <li>• Baixo percentual de autoconsumo</li>\n                            )}\n                            {viabilityMetrics.payback > 10 && (\n                              <li>• Payback elevado</li>\n                            )}\n                            {viabilityMetrics.tir < 10 && (\n                              <li>• TIR abaixo do esperado</li>\n                            )}\n                            {projectData.aumentoAnualTarifa < 5 && (\n                              <li>• Baixo reajuste tarifário projetado</li>\n                            )}\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <AlertTriangle className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    Execute a análise para ver a análise de sensibilidade\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ProjectViabilityAnalyzer;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ProposalGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ProposalTemplateSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ReportsManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SecurityAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SelectedLeadBreadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SettingsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SharedProposalView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProposal' and 'recordView'. Either include them or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [loadProposal, recordView, shareToken]","fix":{"range":[1195,1207],"text":"[loadProposal, recordView, shareToken]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { \r\n  FileText, \r\n  Download, \r\n  Eye, \r\n  Calendar,\r\n  User,\r\n  Zap,\r\n  TrendingUp,\r\n  Leaf,\r\n  Shield,\r\n  DollarSign,\r\n  Clock\r\n} from \"lucide-react\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { proposalSharingService, SharedProposal } from \"@/services/proposalSharingService\";\r\nimport { proposalPDFGenerator } from \"@/services/proposalPDFGenerator\";\r\n\r\nexport function SharedProposalView() {\r\n  const { shareToken } = useParams<{ shareToken: string }>();\r\n  const { toast } = useToast();\r\n  const [proposal, setProposal] = useState<SharedProposal | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [sessionStartTime] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    if (shareToken) {\r\n      loadProposal();\r\n      recordView();\r\n    }\r\n  }, [shareToken]);\r\n\r\n  useEffect(() => {\r\n    // Registrar duração da sessão quando o usuário sair da página\r\n    const handleBeforeUnload = () => {\r\n      if (shareToken) {\r\n        const sessionDuration = Math.floor((Date.now() - sessionStartTime) / 1000);\r\n        proposalSharingService.updateSessionDuration(shareToken, sessionDuration);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n      handleBeforeUnload(); // Também registra quando o componente é desmontado\r\n    };\r\n  }, [shareToken, sessionStartTime]);\r\n\r\n  const loadProposal = async () => {\r\n    if (!shareToken) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const data = await proposalSharingService.getSharedProposal(shareToken);\r\n      \r\n      if (!data) {\r\n        setError('Proposta não encontrada ou expirada');\r\n        return;\r\n      }\r\n\r\n      setProposal(data);\r\n    } catch (err) {\r\n      console.error('Erro ao carregar proposta:', err);\r\n      setError('Erro ao carregar proposta');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const recordView = async () => {\r\n    if (!shareToken) return;\r\n\r\n    try {\r\n      const userAgent = navigator.userAgent;\r\n      const referrer = document.referrer;\r\n      \r\n      await proposalSharingService.recordView(\r\n        shareToken,\r\n        undefined, // IP será capturado no backend\r\n        userAgent,\r\n        referrer\r\n      );\r\n    } catch (err) {\r\n      console.error('Erro ao registrar visualização:', err);\r\n    }\r\n  };\r\n\r\n  const downloadPDF = async () => {\r\n    if (!proposal) return;\r\n\r\n    try {\r\n      const proposalData = proposal.proposal_data;\r\n      proposalPDFGenerator.downloadPDF(proposalData, `Proposta_${proposal.lead_name.replace(/\\s+/g, '_')}.pdf`);\r\n      \r\n      toast({\r\n        title: \"Download Iniciado\",\r\n        description: \"O PDF da proposta está sendo baixado\"\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao baixar PDF:', error);\r\n      toast({\r\n        title: \"Erro no Download\",\r\n        description: \"Não foi possível baixar o PDF\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Carregando proposta...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !proposal) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\r\n        <Card className=\"max-w-md mx-auto\">\r\n          <CardContent className=\"text-center py-8\">\r\n            <FileText className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n              Proposta não encontrada\r\n            </h2>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              {error || 'Esta proposta pode ter expirado ou não existe.'}\r\n            </p>\r\n            <Button onClick={() => window.location.href = '/'}>\r\n              Voltar ao início\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const proposalData = proposal.proposal_data;\r\n  const expirationDate = new Date(proposal.expires_at);\r\n  const isExpiringSoon = expirationDate.getTime() - Date.now() < 7 * 24 * 60 * 60 * 1000; // 7 dias\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\r\n      {/* Header */}\r\n      <div className=\"bg-white shadow-sm border-b\">\r\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                <Zap className=\"h-6 w-6 text-blue-600\" />\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-2xl font-bold text-gray-900\">\r\n                  Proposta de Energia Solar\r\n                </h1>\r\n                <p className=\"text-gray-600\">\r\n                  Para {proposal.lead_name}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-3\">\r\n              <Button onClick={downloadPDF} className=\"bg-blue-600 hover:bg-blue-700\">\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Baixar PDF\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\r\n        {/* Aviso de expiração */}\r\n        {isExpiringSoon && (\r\n          <Card className=\"mb-6 border-amber-200 bg-amber-50\">\r\n            <CardContent className=\"py-4\">\r\n              <div className=\"flex items-center gap-2 text-amber-800\">\r\n                <Clock className=\"h-4 w-4\" />\r\n                <span className=\"font-medium\">\r\n                  Esta proposta expira em {Math.ceil((expirationDate.getTime() - Date.now()) / (24 * 60 * 60 * 1000))} dias\r\n                </span>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Resumo da Proposta */}\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <FileText className=\"h-5 w-5 text-blue-600\" />\r\n              Resumo da Proposta\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600 mb-1\">\r\n                  {proposalData.simulation?.potencia || '7.2'} kWp\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Potência do Sistema</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600 mb-1\">\r\n                  R$ {(proposalData.simulation?.economia || 9180).toLocaleString()}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Economia Anual</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600 mb-1\">\r\n                  {proposalData.simulation?.payback || '2.1'} anos\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Payback</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-orange-600 mb-1\">\r\n                  {proposalData.simulation?.tir || '18.5'}%\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">TIR</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* Dados do Cliente */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <User className=\"h-5 w-5 text-blue-600\" />\r\n                Dados do Cliente\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              <div>\r\n                <span className=\"font-medium\">Nome:</span>\r\n                <span className=\"ml-2\">{proposalData.lead?.name || proposal.lead_name}</span>\r\n              </div>\r\n              {proposalData.lead?.email && (\r\n                <div>\r\n                  <span className=\"font-medium\">Email:</span>\r\n                  <span className=\"ml-2\">{proposalData.lead.email}</span>\r\n                </div>\r\n              )}\r\n              {proposalData.lead?.phone && (\r\n                <div>\r\n                  <span className=\"font-medium\">Telefone:</span>\r\n                  <span className=\"ml-2\">{proposalData.lead.phone}</span>\r\n                </div>\r\n              )}\r\n              {proposalData.lead?.consumoMedio && (\r\n                <div>\r\n                  <span className=\"font-medium\">Consumo Médio:</span>\r\n                  <span className=\"ml-2\">{proposalData.lead.consumoMedio} kWh/mês</span>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Sistema Proposto */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-5 w-5 text-blue-600\" />\r\n                Sistema Proposto\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              {proposalData.kit && (\r\n                <div>\r\n                  <span className=\"font-medium\">Kit:</span>\r\n                  <span className=\"ml-2\">{proposalData.kit.nome}</span>\r\n                </div>\r\n              )}\r\n              <div>\r\n                <span className=\"font-medium\">Potência:</span>\r\n                <span className=\"ml-2\">{proposalData.simulation?.potencia || '7.2'} kWp</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"font-medium\">Geração Anual:</span>\r\n                <span className=\"ml-2\">{(proposalData.simulation?.geracaoAnual || 10800).toLocaleString()} kWh</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"font-medium\">Valor do Sistema:</span>\r\n                <span className=\"ml-2 font-bold text-green-600\">\r\n                  R$ {(proposalData.financial?.valorFinal || 20150).toLocaleString()}\r\n                </span>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Análise Financeira */}\r\n        <Card className=\"mt-6\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <DollarSign className=\"h-5 w-5 text-blue-600\" />\r\n              Análise Financeira\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n              <div className=\"bg-green-50 p-4 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-green-600 mb-1\">\r\n                  R$ {(proposalData.financial?.economiaAnual || 9180).toLocaleString()}\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Economia Anual</div>\r\n              </div>\r\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-blue-600 mb-1\">\r\n                  {proposalData.simulation?.payback || '2.1'} anos\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Tempo de Retorno</div>\r\n              </div>\r\n              <div className=\"bg-purple-50 p-4 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-purple-600 mb-1\">\r\n                  {proposalData.simulation?.tir || '18.5'}%\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Taxa Interna de Retorno</div>\r\n              </div>\r\n              <div className=\"bg-orange-50 p-4 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-orange-600 mb-1\">\r\n                  R$ {((proposalData.financial?.economia25Anos || 275400) / 1000).toFixed(0)}k\r\n                </div>\r\n                <div className=\"text-sm text-gray-600\">Economia em 25 anos</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Benefícios */}\r\n        <Card className=\"mt-6\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Leaf className=\"h-5 w-5 text-green-600\" />\r\n              Benefícios da Energia Solar\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div className=\"flex items-start gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <TrendingUp className=\"h-4 w-4 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <div className=\"font-medium\">Economia Garantida</div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    Redução de até 95% na conta de energia elétrica\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-start gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <Shield className=\"h-4 w-4 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <div className=\"font-medium\">Proteção contra Inflação</div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    Proteção contra aumentos na tarifa elétrica\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-start gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <Leaf className=\"h-4 w-4 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <div className=\"font-medium\">Energia Limpa</div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    100% renovável e sustentável\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-start gap-3\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <DollarSign className=\"h-4 w-4 text-purple-600\" />\r\n                </div>\r\n                <div>\r\n                  <div className=\"font-medium\">Valorização do Imóvel</div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    Valorização de até 8% no valor do imóvel\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Footer */}\r\n        <Card className=\"mt-6\">\r\n          <CardContent className=\"py-4\">\r\n            <div className=\"flex items-center justify-between text-sm text-gray-600\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Calendar className=\"h-4 w-4\" />\r\n                <span>\r\n                  Proposta válida até {expirationDate.toLocaleDateString('pt-BR')}\r\n                </span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Eye className=\"h-4 w-4\" />\r\n                <span>{proposal.view_count} visualizações</span>\r\n              </div>\r\n            </div>\r\n            <Separator className=\"my-3\" />\r\n            <div className=\"text-center text-xs text-gray-500\">\r\n              Esta proposta foi gerada pelo SolarCalc Pro - Sistema de Gestão para Energia Solar\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SolarDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentLead'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [currentLead]","fix":{"range":[2801,2803],"text":"[currentLead]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ResponsiveText } from \"@/components/ui/responsive-text\";\r\nimport { useAuth } from \"@/contexts/AuthContext\";\r\nimport { SecurityAlert } from \"./SecurityAlert\";\r\nimport { useSecurityAudit } from \"@/hooks/useSecurityAudit\";\r\nimport { \r\n  Sun, \r\n  Calculator, \r\n  Database, \r\n  FileText, \r\n  TrendingUp, \r\n  Zap,\r\n  Users,\r\n  BarChart3,\r\n  Settings,\r\n  Download,\r\n  LogOut,\r\n  User,\r\n  CheckCircle,\r\n  Building2,\r\n  Upload,\r\n  Bell,\r\n  Monitor,\r\n  ArrowLeft\r\n} from \"lucide-react\";\r\nimport { LeadDataEntry } from \"./LeadDataEntry\";\r\nimport { ConsumptionCalculator } from \"./ConsumptionCalculator\";\r\nimport { TechnicalSimulation } from \"./TechnicalSimulation\";\r\nimport { FinancialAnalysis } from \"./FinancialAnalysis\";\r\nimport FinancialCalculator from \"./FinancialCalculator\";\r\nimport { ProposalGenerator } from \"./ProposalGenerator\";\r\nimport { SettingsModal } from \"./SettingsModal\";\r\nimport { SelectedLeadBreadcrumb } from \"./SelectedLeadBreadcrumb\";\r\nimport { DemoDataIndicator } from \"./DemoDataIndicator\";\r\nimport VersionDisplay from \"./VersionDisplay\";\r\nimport PDFImporter from \"./PDFImporter\";\r\nimport ExcelImporterV2 from \"./ExcelImporterV2\";\r\nimport FinancialInstitutionManager from \"./FinancialInstitutionManager\";\r\nimport { AuditLogViewer } from \"./AuditLogViewer\";\r\nimport { BackupManager } from \"./BackupManager\";\r\nimport NotificationCenter from \"./NotificationCenter\";\r\nimport { PerformanceMonitor } from \"./PerformanceMonitor\";\r\nimport { ReportsManager } from \"./ReportsManager\";\r\nimport { useNotifications } from \"@/hooks/useNotifications\";\r\nimport { useEffect } from \"react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface SolarDashboardProps {\r\n  onBackToMenu?: () => void;\r\n}\r\n\r\nexport function SolarDashboard({ onBackToMenu }: SolarDashboardProps = {}) {\r\n  const [currentLead, setCurrentLead] = useState<Record<string, unknown> | null>(null);\r\n  const [activeTab, setActiveTab] = useState(() => {\r\n    // Configuração da aba padrão com persistência\r\n    return localStorage.getItem('activeTab') || 'lead-data';\r\n  });\r\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\r\n  const { stats } = useNotifications();\r\n\r\n  // Verificar se há um lead selecionado ao carregar o dashboard\r\n  useEffect(() => {\r\n    const savedLeadId = localStorage.getItem('selectedLeadId');\r\n    if (savedLeadId && !currentLead) {\r\n      loadSelectedLead(savedLeadId);\r\n    }\r\n  }, []);\r\n\r\n  // Persistir a aba ativa no localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('activeTab', activeTab);\r\n  }, [activeTab]);\r\n\r\n  const loadSelectedLead = async (leadId: string) => {\r\n    try {\r\n      const { data: lead, error } = await supabase\r\n        .from('leads')\r\n        .select('*')\r\n        .eq('id', leadId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      if (lead) {\r\n        setCurrentLead(lead);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading selected lead:', error);\r\n      localStorage.removeItem('selectedLeadId');\r\n    }\r\n  };\r\n\r\n  const handleClearLeadSelection = () => {\r\n    setCurrentLead(null);\r\n    localStorage.removeItem('selectedLeadId');\r\n    setActiveTab(\"lead-data\");\r\n  };\r\n  const { profile, company, signOut, hasPermission } = useAuth();\r\n  const { logSuspiciousActivity } = useSecurityAudit();\r\n  const navigate = useNavigate();\r\n\r\n  const getAccessTypeLabel = (type: string) => {\r\n    const labels = {\r\n      vendedor: 'Vendedor',\r\n      engenheiro: 'Engenheiro', \r\n      admin: 'Administrador',\r\n      super_admin: 'Super Admin'\r\n    };\r\n    return labels[type as keyof typeof labels] || type;\r\n  };\r\n\r\n  const getAccessTypeVariant = (type: string) => {\r\n    const variants = {\r\n      vendedor: 'default',\r\n      engenheiro: 'secondary',\r\n      admin: 'outline',\r\n      super_admin: 'destructive'\r\n    };\r\n    return (variants[type as keyof typeof variants] as 'default' | 'secondary' | 'outline' | 'destructive') || 'default';\r\n  };\r\n\r\n  const dashboardStats = [\r\n    {\r\n      title: \"Propostas Geradas\",\r\n      value: \"47\",\r\n      change: \"+12%\",\r\n      icon: FileText,\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"Taxa de Conversão\",\r\n      value: \"68%\",\r\n      change: \"+5%\",\r\n      icon: TrendingUp,\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"Potência Total\",\r\n      value: \"2.4 MW\",\r\n      change: \"+18%\",\r\n      icon: Zap,\r\n      trend: \"up\"\r\n    },\r\n    {\r\n      title: \"Economia Estimada\",\r\n      value: \"R$ 1.2M\",\r\n      change: \"+23%\",\r\n      icon: BarChart3,\r\n      trend: \"up\"\r\n    }\r\n  ];\r\n\r\n  const navigationTabs = [\r\n    { \r\n      id: \"lead-data\", \r\n      label: \"Dados do Lead\", \r\n      icon: Users, \r\n      description: \"Importar e gerenciar dados dos leads\",\r\n      permission: \"view_leads\"\r\n    },\r\n    { \r\n      id: \"consumption\", \r\n      label: \"Calculadora\", \r\n      icon: Calculator, \r\n      description: \"Calcular incremento de consumo\",\r\n      permission: null\r\n    },\r\n    { \r\n      id: \"simulation\", \r\n      label: \"Simulação\", \r\n      icon: Sun, \r\n      description: \"Análise técnica do sistema\",\r\n      permission: \"technical_simulations\"\r\n    },\r\n    { \r\n      id: \"financial\", \r\n      label: \"Financeiro\", \r\n      icon: TrendingUp, \r\n      description: \"Análise de retorno e financiamento\",\r\n      permission: null\r\n    },\r\n    { \r\n      id: \"proposal\", \r\n      label: \"Proposta\", \r\n      icon: FileText, \r\n      description: \"Gerar proposta comercial\",\r\n      permission: \"generate_proposals\"\r\n    },\r\n    // Aba \"Gerenciamento\" removida - funcionalidades realocadas para outras abas\r\n  ].filter(tab => !tab.permission || hasPermission(tab.permission));\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/30\">\r\n      {/* Header */}\r\n      <header className=\"border-b border-border/50 bg-card/90 backdrop-blur-md sticky top-0 z-50\">\r\n        <div className=\"container mx-auto px-4 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              {onBackToMenu && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={onBackToMenu}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  <ArrowLeft className=\"h-4 w-4\" />\r\n                  <span className=\"hidden sm:inline\">Voltar</span>\r\n                </Button>\r\n              )}\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"p-2 bg-gradient-solar rounded-lg shadow-glow\">\r\n                  <Sun className=\"h-6 w-6 text-white\" />\r\n                </div>\r\n                <div>\r\n                  <h1 className=\"text-2xl font-bold bg-gradient-solar bg-clip-text text-transparent\">\r\n                    SolarCalc Pro\r\n                  </h1>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Sistema de Gestão para Energia Solar\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center gap-2 sm:gap-4\">\r\n              <div className=\"text-right hidden sm:block\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <User className=\"h-4 w-4\" />\r\n                  <span className=\"font-medium\">{profile?.name}</span>\r\n                  <Badge variant={getAccessTypeVariant(profile?.access_type || '')}>\r\n                    {getAccessTypeLabel(profile?.access_type || '')}\r\n                  </Badge>\r\n                </div>\r\n                {company && (\r\n                  <p className=\"text-sm text-muted-foreground\">{company.name}</p>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Mobile user info - simplified */}\r\n              <div className=\"sm:hidden\">\r\n                <Badge variant={getAccessTypeVariant(profile?.access_type || '')}>\r\n                  {profile?.name?.split(' ')[0]}\r\n                </Badge>\r\n              </div>\r\n              \r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\" \r\n                onClick={() => navigate('/validation')}\r\n                className=\"bg-green-50 hover:bg-green-100 border-green-200 text-green-700\"\r\n              >\r\n                <CheckCircle className=\"h-4 w-4\" />\r\n                <span className=\"hidden sm:inline\">Validação</span>\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setIsNotificationCenterOpen(true)}\r\n                className=\"flex items-center gap-2 relative\"\r\n              >\r\n                <Bell className=\"h-4 w-4\" />\r\n                <span className=\"hidden sm:inline\">Notificações</span>\r\n                {stats.unread > 0 && (\r\n                  <Badge \r\n                    variant=\"destructive\" \r\n                    className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center text-xs\"\r\n                  >\r\n                    {stats.unread > 99 ? '99+' : stats.unread}\r\n                  </Badge>\r\n                )}\r\n              </Button>\r\n              <SettingsModal />\r\n              <Button variant=\"outline\" size=\"sm\" onClick={signOut}>\r\n                <LogOut className=\"h-4 w-4\" />\r\n                <span className=\"hidden sm:inline\">Sair</span>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Dashboard Stats */}\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <SecurityAlert onSecurityIssue={(issue) => logSuspiciousActivity('security_alert', { issue })} />\r\n        \r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\r\n          {dashboardStats.map((stat, index) => (\r\n            <Card key={index} className=\"shadow-card hover:shadow-solar transition-smooth\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-muted-foreground\">\r\n                      {stat.title}\r\n                    </p>\r\n                    <p className=\"text-3xl font-bold text-foreground\">\r\n                      {stat.value}\r\n                    </p>\r\n                    <Badge \r\n                      variant={stat.trend === \"up\" ? \"default\" : \"secondary\"}\r\n                      className=\"mt-1 bg-success/10 text-success border-success/20\"\r\n                    >\r\n                      {stat.change}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"p-3 bg-gradient-solar rounded-lg shadow-glow\">\r\n                    <stat.icon className=\"h-6 w-6 text-white\" />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Lead selecionado - breadcrumb global */}\r\n        {currentLead && activeTab !== \"lead-data\" && (\r\n          <SelectedLeadBreadcrumb \r\n            leadName={currentLead.name}\r\n            onClearSelection={handleClearLeadSelection}\r\n          />\r\n        )}\r\n\r\n        {/* Main Navigation Tabs */}\r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\r\n          <div className=\"bg-card rounded-lg p-4 shadow-card\">\r\n            <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 bg-muted/50 h-auto gap-2\">\r\n              {navigationTabs.map((tab) => (\r\n                <TabsTrigger \r\n                    key={tab.id} \r\n                    value={tab.id}\r\n                    className=\"flex flex-col items-center gap-2 py-4 px-3 h-auto min-h-[80px] data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-solar transition-all duration-200 hover:bg-muted/80 relative group\"\r\n                  >\r\n                    <tab.icon className=\"h-5 w-5 flex-shrink-0\" />\r\n                    <div className=\"text-center w-full\">\r\n                      <div className=\"font-medium text-sm leading-tight mb-1\">{tab.label}</div>\r\n                      <div className=\"text-xs leading-tight text-muted-foreground group-data-[state=active]:text-primary-foreground/90 group-data-[state=active]:font-medium hidden sm:block\">\r\n                        {tab.description}\r\n                      </div>\r\n                    </div>\r\n                  </TabsTrigger>\r\n              ))}\r\n            </TabsList>\r\n          </div>\r\n\r\n          {/* Tab Contents */}\r\n          {hasPermission('view_leads') && (\r\n            <TabsContent value=\"lead-data\">\r\n              <LeadDataEntry currentLead={currentLead} onLeadUpdate={setCurrentLead} />\r\n            </TabsContent>\r\n          )}\r\n\r\n          <TabsContent value=\"consumption\">\r\n            {!currentLead ? (\r\n              <Card>\r\n                <CardContent className=\"py-12 text-center\">\r\n                  <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\r\n                  <h3 className=\"text-lg font-semibold mb-2\">Nenhum lead selecionado</h3>\r\n                  <p className=\"text-muted-foreground mb-4\">\r\n                    Selecione um lead na aba \"Dados do Lead\" para usar a calculadora\r\n                  </p>\r\n                  <Button onClick={() => setActiveTab(\"lead-data\")}>\r\n                    Ir para Dados do Lead\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            ) : (\r\n              <ConsumptionCalculator currentLead={currentLead} />\r\n            )}\r\n          </TabsContent>\r\n\r\n          {hasPermission('technical_simulations') && (\r\n            <TabsContent value=\"simulation\">\r\n              {!currentLead ? (\r\n                <Card>\r\n                  <CardContent className=\"py-12 text-center\">\r\n                    <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\r\n                    <h3 className=\"text-lg font-semibold mb-2\">Nenhum lead selecionado</h3>\r\n                    <p className=\"text-muted-foreground mb-4\">\r\n                      Selecione um lead na aba \"Dados do Lead\" para fazer a simulação\r\n                    </p>\r\n                    <Button onClick={() => setActiveTab(\"lead-data\")}>\r\n                      Ir para Dados do Lead\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              ) : (\r\n                <TechnicalSimulation currentLead={currentLead} />\r\n              )}\r\n            </TabsContent>\r\n          )}\r\n\r\n          <TabsContent value=\"financial\">\r\n            <div className=\"space-y-6\">\r\n              {/* Funcionalidades administrativas - Realocadas do menu Gerenciamento */}\r\n              {hasPermission('admin') && (\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Upload className=\"h-6 w-6\" />\r\n                        Importação Excel\r\n                      </CardTitle>\r\n                      <CardDescription>\r\n                        Importe kits e valores financeiros via Excel\r\n                      </CardDescription>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <ExcelImporterV2 />\r\n                    </CardContent>\r\n                  </Card>\r\n                  \r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Building2 className=\"h-6 w-6\" />\r\n                        Instituições Financeiras\r\n                      </CardTitle>\r\n                      <CardDescription>\r\n                        Gerencie bancos e opções de financiamento\r\n                      </CardDescription>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <FinancialInstitutionManager />\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Análise Financeira */}\r\n              {!currentLead ? (\r\n                <Card>\r\n                  <CardContent className=\"py-12 text-center\">\r\n                    <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\r\n                    <h3 className=\"text-lg font-semibold mb-2\">Nenhum lead selecionado</h3>\r\n                    <p className=\"text-muted-foreground mb-4\">\r\n                      Selecione um lead na aba \"Dados do Lead\" para fazer a análise financeira\r\n                    </p>\r\n                    <Button onClick={() => setActiveTab(\"lead-data\")}>\r\n                      Ir para Dados do Lead\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              ) : (\r\n                <div className=\"space-y-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <TrendingUp className=\"h-6 w-6\" />\r\n                        Análise Financeira\r\n                      </CardTitle>\r\n                      <CardDescription>\r\n                        Análise completa de viabilidade e opções de financiamento\r\n                      </CardDescription>\r\n                    </CardHeader>\r\n                  </Card>\r\n\r\n                  <Tabs defaultValue=\"analysis\" className=\"space-y-4\">\r\n                    <TabsList className=\"grid w-full grid-cols-2\">\r\n                      <TabsTrigger value=\"analysis\" className=\"flex items-center gap-2\">\r\n                        <BarChart3 className=\"h-4 w-4\" />\r\n                        Análise de Viabilidade\r\n                      </TabsTrigger>\r\n                      <TabsTrigger value=\"financing\" className=\"flex items-center gap-2\">\r\n                        <Calculator className=\"h-4 w-4\" />\r\n                        Simulador de Financiamento\r\n                      </TabsTrigger>\r\n                    </TabsList>\r\n\r\n                    <TabsContent value=\"analysis\">\r\n                      <FinancialAnalysis currentLead={currentLead} />\r\n                    </TabsContent>\r\n\r\n                    <TabsContent value=\"financing\">\r\n                      <FinancialCalculator currentLead={currentLead} />\r\n                    </TabsContent>\r\n                  </Tabs>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {hasPermission('generate_proposals') && (\r\n            <TabsContent value=\"proposal\">\r\n              <div className=\"space-y-6\">\r\n                {/* Importação PDF - Realocada do menu Gerenciamento */}\r\n                {hasPermission('admin') && (\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <FileText className=\"h-6 w-6\" />\r\n                        Importação de Datasheets PDF\r\n                      </CardTitle>\r\n                      <CardDescription>\r\n                        Importe datasheets de equipamentos em formato PDF\r\n                      </CardDescription>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <PDFImporter />\r\n                    </CardContent>\r\n                  </Card>\r\n                )}\r\n                \r\n                {/* Geração de Propostas */}\r\n                {!currentLead ? (\r\n                  <Card>\r\n                    <CardContent className=\"py-12 text-center\">\r\n                      <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\r\n                      <h3 className=\"text-lg font-semibold mb-2\">Nenhum lead selecionado</h3>\r\n                      <p className=\"text-muted-foreground mb-4\">\r\n                        Selecione um lead na aba \"Dados do Lead\" para gerar uma proposta\r\n                      </p>\r\n                      <Button onClick={() => setActiveTab(\"lead-data\")}>\r\n                        Ir para Dados do Lead\r\n                      </Button>\r\n                    </CardContent>\r\n                  </Card>\r\n                ) : (\r\n                  <ProposalGenerator currentLead={currentLead} />\r\n                )}\r\n              </div>\r\n            </TabsContent>\r\n          )}\r\n\r\n          {/* Aba \"Gerenciamento\" removida - funcionalidades realocadas:\r\n             - PDF Import → Aba \"Proposta\"\r\n             - Excel Import → Aba \"Financeiro\" \r\n             - Instituições → Aba \"Financeiro\"\r\n             - Audit Logs, Backup, Performance, Reports → SettingsModal\r\n          */}\r\n        </Tabs>\r\n      </div>\r\n      \r\n      {/* Demo Data Indicator */}\r\n      <DemoDataIndicator />\r\n      \r\n      {/* Version Display */}\r\n      <div className=\"fixed bottom-4 left-4 z-40\">\r\n        <VersionDisplay />\r\n      </div>\r\n      \r\n      {/* Notification Center */}\r\n      <NotificationCenter\r\n        isOpen={isNotificationCenterOpen}\r\n        onClose={() => setIsNotificationCenterOpen(false)}\r\n      />\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SolarDistribution\\AutoDistribution.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\SolarDistribution\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TechnicalSimulation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TechnicalSimulator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateCustomizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\ComponentLibrary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\EditorCanvas.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\PropertiesPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\TemplateEditor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'editorState'. Either include it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [editorState, exportTemplate, onExport]","fix":{"range":[3312,3338],"text":"[editorState, exportTemplate, onExport]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { DndContext, DragEndEvent, DragStartEvent, DragOverlay } from '@dnd-kit/core';\r\nimport { Card } from '@/components/ui/card';\r\nimport { useTemplateEditor } from './hooks/useTemplateEditor';\r\nimport { ComponentLibrary } from './ComponentLibrary';\r\nimport { EditorCanvas } from './EditorCanvas';\r\nimport { PropertiesPanel } from './PropertiesPanel';\r\nimport { Toolbar } from './Toolbar';\r\nimport { TemplateRenderer } from './TemplateRenderer';\r\nexport interface TemplateComponent {\r\n  id: string;\r\n  type: ComponentType;\r\n  position: { x: number; y: number };\r\n  properties: Record<string, unknown>;\r\n  zIndex?: number;\r\n  locked?: boolean;\r\n}\r\n\r\nexport type ComponentType = 'text' | 'image' | 'shape' | 'container';\r\n\r\nexport interface DragData {\r\n  componentType: ComponentType;\r\n}\r\n\r\ninterface TemplateEditorProps {\r\n  initialTemplate?: {\r\n    id: string;\r\n    name: string;\r\n    components: TemplateComponent[];\r\n  };\r\n  onSave?: (template: unknown) => void;\r\n  onExport?: (template: unknown) => void;\r\n}\r\n\r\nexport function TemplateEditor({ initialTemplate, onSave, onExport }: TemplateEditorProps) {\r\n  const [draggedComponent, setDraggedComponent] = useState<ComponentType | null>(null);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\r\n  \r\n  const {\r\n    editorState,\r\n    addComponent,\r\n    updateComponent,\r\n    deleteComponent,\r\n    duplicateComponent,\r\n    selectComponent,\r\n    clearSelection,\r\n    undo,\r\n    redo,\r\n    canUndo,\r\n    canRedo,\r\n    setZoom,\r\n    toggleGrid,\r\n    toggleRulers,\r\n    saveTemplate,\r\n    loadTemplate,\r\n    exportTemplate,\r\n    previewTemplate\r\n  } = useTemplateEditor(initialTemplate?.id);\r\n\r\n  const selectedComponent = editorState.components.find(\r\n    comp => comp.id === editorState.selectedComponentId\r\n  );\r\n\r\n  const handleDragStart = useCallback((event: DragStartEvent) => {\r\n    setIsDragging(true);\r\n    const dragData = event.active.data.current as DragData;\r\n    if (dragData?.componentType) {\r\n      setDraggedComponent(dragData.componentType);\r\n    }\r\n  }, []);\r\n\r\n  const handleDragEnd = useCallback((event: DragEndEvent) => {\r\n    setIsDragging(false);\r\n    setDraggedComponent(null);\r\n    \r\n    if (event.over && event.active.data.current?.componentType) {\r\n      const componentType = event.active.data.current.componentType as ComponentType;\r\n      const canvasRect = event.over.rect;\r\n      \r\n      if (canvasRect) {\r\n        // Calculate position relative to canvas\r\n        const position = {\r\n          x: Math.max(0, event.delta.x),\r\n          y: Math.max(0, event.delta.y)\r\n        };\r\n        \r\naddComponent({ type: componentType as ComponentType, position });\r\n      }\r\n    }\r\n  }, [addComponent]);\r\n\r\n  const handleSave = useCallback(async () => {\r\n    try {\r\n      const template = await saveTemplate();\r\n      onSave?.(template);\r\n    } catch (error) {\r\n      console.error('Erro ao salvar template:', error);\r\n    }\r\n  }, [saveTemplate, onSave]);\r\n\r\n  const handleExport = useCallback(async () => {\r\n    try {\r\n      const exportData = await exportTemplate(editorState);\r\n      onExport?.(exportData);\r\n    } catch (error) {\r\n      console.error('Erro ao exportar template:', error);\r\n    }\r\n  }, [exportTemplate, onExport]);\r\n\r\n  const handlePreview = useCallback(() => {\r\n    setIsPreviewMode(!isPreviewMode);\r\n  }, [isPreviewMode]);\r\n\r\n  const handleCopy = useCallback(() => {\r\n    if (selectedComponent) {\r\n      duplicateComponent(selectedComponent.id);\r\n    }\r\n  }, [selectedComponent, duplicateComponent]);\r\n\r\n  const handleDelete = useCallback(() => {\r\n    if (selectedComponent) {\r\n      deleteComponent(selectedComponent.id);\r\n    }\r\n  }, [selectedComponent, deleteComponent]);\r\n\r\n  const handleAlign = useCallback((alignment: 'left' | 'center' | 'right' | 'justify') => {\r\n    if (selectedComponent) {\r\n      updateComponent(selectedComponent.id, {\r\n        properties: {\r\n          ...selectedComponent.properties,\r\n          textAlign: alignment\r\n        }\r\n      });\r\n    }\r\n  }, [selectedComponent, updateComponent]);\r\n\r\n  const handleLayerMove = useCallback((direction: 'up' | 'down') => {\r\n    if (selectedComponent) {\r\n      const newZIndex = direction === 'up' \r\n        ? (selectedComponent.zIndex || 0) + 1\r\n        : Math.max(0, (selectedComponent.zIndex || 0) - 1);\r\n      \r\n      updateComponent(selectedComponent.id, { zIndex: newZIndex });\r\n    }\r\n  }, [selectedComponent, updateComponent]);\r\n\r\n  const handleLockToggle = useCallback(() => {\r\n    if (selectedComponent) {\r\n      updateComponent(selectedComponent.id, {\r\n        locked: !selectedComponent.locked\r\n      });\r\n    }\r\n  }, [selectedComponent, updateComponent]);\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.ctrlKey || e.metaKey) {\r\n        switch (e.key) {\r\n          case 'z':\r\n            e.preventDefault();\r\n            if (e.shiftKey) {\r\n              redo();\r\n            } else {\r\n              undo();\r\n            }\r\n            break;\r\n          case 'y':\r\n            e.preventDefault();\r\n            redo();\r\n            break;\r\n          case 's':\r\n            e.preventDefault();\r\n            handleSave();\r\n            break;\r\n          case 'd':\r\n            e.preventDefault();\r\n            handleCopy();\r\n            break;\r\n        }\r\n      } else {\r\n        switch (e.key) {\r\n          case 'Delete':\r\n          case 'Backspace':\r\n            if (selectedComponent && !selectedComponent.locked) {\r\n              e.preventDefault();\r\n              handleDelete();\r\n            }\r\n            break;\r\n          case 'Escape':\r\n            clearSelection();\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [undo, redo, handleSave, handleCopy, handleDelete, selectedComponent, clearSelection]);\r\n\r\n  return (\r\n    <DndContext onDragStart={handleDragStart} onDragEnd={handleDragEnd}>\r\n      <div className=\"h-screen flex flex-col bg-gray-50\">\r\n        {/* Toolbar */}\r\n        <Toolbar\r\n          editorState={editorState}\r\n          onUndo={undo}\r\n          onRedo={redo}\r\n          onSave={handleSave}\r\n          onExport={handleExport}\r\n          onPreview={handlePreview}\r\n          onZoomChange={setZoom}\r\n          onGridToggle={toggleGrid}\r\n          onRulerToggle={toggleRulers}\r\n          onCopy={handleCopy}\r\n          onDelete={handleDelete}\r\n          onAlign={handleAlign}\r\n          onLayerMove={handleLayerMove}\r\n          onLockToggle={handleLockToggle}\r\n          canUndo={canUndo}\r\n          canRedo={canRedo}\r\n          hasSelection={!!selectedComponent}\r\n          isLocked={selectedComponent?.locked || false}\r\n        />\r\n\r\n        <div className=\"flex-1 flex overflow-hidden\">\r\n          {/* Component Library */}\r\n          {!isPreviewMode && (\r\n            <div className=\"w-64 bg-white border-r border-gray-200\">\r\n              <Card className=\"h-full rounded-none border-0\">\r\n                <ComponentLibrary />\r\n              </Card>\r\n            </div>\r\n          )}\r\n\r\n          {/* Canvas Area */}\r\n          <div className=\"flex-1 flex flex-col\">\r\n            <EditorCanvas\r\n              editorState={editorState}\r\n              onComponentSelect={selectComponent}\r\n              onComponentUpdate={updateComponent}\r\n              onCanvasClick={clearSelection}\r\n              isPreviewMode={isPreviewMode}\r\n            />\r\n          </div>\r\n\r\n          {/* Properties Panel */}\r\n          {!isPreviewMode && (\r\n            <div className=\"w-80 bg-white border-l border-gray-200\">\r\n              <Card className=\"h-full rounded-none border-0\">\r\n                <PropertiesPanel\r\n                  selectedComponent={selectedComponent || null}\r\n                  onComponentUpdate={updateComponent}\r\n                />\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Drag Overlay */}\r\n      <DragOverlay>\r\n        {isDragging && draggedComponent && (\r\n          <div className=\"bg-blue-100 border-2 border-blue-300 rounded p-2 text-sm font-medium\">\r\n            {draggedComponent}\r\n          </div>\r\n        )}\r\n      </DragOverlay>\r\n    </DndContext>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\TemplateRenderer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\Toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\hooks\\useTemplateEditor.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTemplate'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [loadTemplate, templateId]","fix":{"range":[711,723],"text":"[loadTemplate, templateId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'getComponentById'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [getComponentById, updateComponent]","fix":{"range":[2345,2362],"text":"[getComponentById, updateComponent]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'getComponentById'. Either include it or remove the dependency array.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [getComponentById, state.components, addComponent]","fix":{"range":[3252,3284],"text":"[getComponentById, state.components, addComponent]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'getComponentById'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [getComponentById, updateComponent]","fix":{"range":[3802,3819],"text":"[getComponentById, updateComponent]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { TemplateComponent, EditorState, TemplateData, ComponentProperties } from '../types';\r\n\r\nconst MAX_HISTORY_SIZE = 50;\r\n\r\nexport function useTemplateEditor(templateId?: string) {\r\n  const [state, setState] = useState<EditorState>({\r\n    components: [],\r\n    selectedComponentId: null,\r\n    history: [[]],\r\n    historyIndex: 0,\r\n    zoom: 1,\r\n    showGrid: true,\r\n    showRulers: true,\r\n    snapToGrid: true,\r\n    gridSize: 20\r\n  });\r\n\r\n  const stateRef = useRef(state);\r\n  stateRef.current = state;\r\n\r\n  // Load template if templateId is provided\r\n  useEffect(() => {\r\n    if (templateId) {\r\n      loadTemplate(templateId);\r\n    }\r\n  }, [templateId]);\r\n\r\n  const addToHistory = useCallback((components: TemplateComponent[]) => {\r\n    setState(prev => {\r\n      const newHistory = prev.history.slice(0, prev.historyIndex + 1);\r\n      newHistory.push([...components]);\r\n      \r\n      // Limit history size\r\n      if (newHistory.length > MAX_HISTORY_SIZE) {\r\n        newHistory.shift();\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        history: newHistory,\r\n        historyIndex: newHistory.length - 1\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  const addComponent = useCallback((component: TemplateComponent) => {\r\n    setState(prev => {\r\n      const newComponents = [...prev.components, component];\r\n      addToHistory(newComponents);\r\n      return {\r\n        ...prev,\r\n        components: newComponents,\r\n        selectedComponentId: component.id\r\n      };\r\n    });\r\n  }, [addToHistory]);\r\n\r\n  const updateComponent = useCallback((id: string, updates: Partial<TemplateComponent>) => {\r\n    setState(prev => {\r\n      const newComponents = prev.components.map(comp => \r\n        comp.id === id ? { ...comp, ...updates } : comp\r\n      );\r\n      \r\n      // Only add to history if it's a significant change (not just selection)\r\n      if (Object.keys(updates).some(key => key !== 'selected')) {\r\n        addToHistory(newComponents);\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        components: newComponents\r\n      };\r\n    });\r\n  }, [addToHistory]);\r\n\r\n  const updateComponentProperties = useCallback((id: string, properties: Partial<ComponentProperties>) => {\r\n    updateComponent(id, { properties: { ...getComponentById(id)?.properties, ...properties } });\r\n  }, [updateComponent]);\r\n\r\n  const deleteComponent = useCallback((id: string) => {\r\n    setState(prev => {\r\n      const newComponents = prev.components.filter(comp => comp.id !== id);\r\n      addToHistory(newComponents);\r\n      return {\r\n        ...prev,\r\n        components: newComponents,\r\n        selectedComponentId: prev.selectedComponentId === id ? null : prev.selectedComponentId\r\n      };\r\n    });\r\n  }, [addToHistory]);\r\n\r\n  const duplicateComponent = useCallback((id: string) => {\r\n    const component = getComponentById(id);\r\n    if (component) {\r\n      const newComponent: TemplateComponent = {\r\n        ...component,\r\n        id: `component-${Date.now()}`,\r\n        position: {\r\n          x: component.position.x + 20,\r\n          y: component.position.y + 20\r\n        },\r\n        zIndex: Math.max(...state.components.map(c => c.zIndex)) + 1\r\n      };\r\n      addComponent(newComponent);\r\n    }\r\n  }, [state.components, addComponent]);\r\n\r\n  const selectComponent = useCallback((id: string | null) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      selectedComponentId: id\r\n    }));\r\n  }, []);\r\n\r\n  const moveComponent = useCallback((id: string, deltaX: number, deltaY: number) => {\r\n    const component = getComponentById(id);\r\n    if (component) {\r\n      updateComponent(id, {\r\n        position: {\r\n          x: Math.max(0, component.position.x + deltaX),\r\n          y: Math.max(0, component.position.y + deltaY)\r\n        }\r\n      });\r\n    }\r\n  }, [updateComponent]);\r\n\r\n  const resizeComponent = useCallback((id: string, width: number, height: number) => {\r\n    updateComponent(id, {\r\n      size: {\r\n        width: Math.max(10, width),\r\n        height: Math.max(10, height)\r\n      }\r\n    });\r\n  }, [updateComponent]);\r\n\r\n  const bringToFront = useCallback((id: string) => {\r\n    const maxZIndex = Math.max(...state.components.map(c => c.zIndex));\r\n    updateComponent(id, { zIndex: maxZIndex + 1 });\r\n  }, [state.components, updateComponent]);\r\n\r\n  const sendToBack = useCallback((id: string) => {\r\n    const minZIndex = Math.min(...state.components.map(c => c.zIndex));\r\n    updateComponent(id, { zIndex: minZIndex - 1 });\r\n  }, [state.components, updateComponent]);\r\n\r\n  const undo = useCallback(() => {\r\n    setState(prev => {\r\n      if (prev.historyIndex > 0) {\r\n        const newIndex = prev.historyIndex - 1;\r\n        return {\r\n          ...prev,\r\n          components: [...prev.history[newIndex]],\r\n          historyIndex: newIndex,\r\n          selectedComponentId: null\r\n        };\r\n      }\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  const redo = useCallback(() => {\r\n    setState(prev => {\r\n      if (prev.historyIndex < prev.history.length - 1) {\r\n        const newIndex = prev.historyIndex + 1;\r\n        return {\r\n          ...prev,\r\n          components: [...prev.history[newIndex]],\r\n          historyIndex: newIndex,\r\n          selectedComponentId: null\r\n        };\r\n      }\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  const setZoom = useCallback((zoom: number) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      zoom: Math.max(0.1, Math.min(5, zoom))\r\n    }));\r\n  }, []);\r\n\r\n  const toggleGrid = useCallback(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      showGrid: !prev.showGrid\r\n    }));\r\n  }, []);\r\n\r\n  const toggleRulers = useCallback(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      showRulers: !prev.showRulers\r\n    }));\r\n  }, []);\r\n\r\n  const toggleSnapToGrid = useCallback(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      snapToGrid: !prev.snapToGrid\r\n    }));\r\n  }, []);\r\n\r\n  const clearSelection = useCallback(() => {\r\n    selectComponent(null);\r\n  }, [selectComponent]);\r\n\r\n  const selectAll = useCallback(() => {\r\n    // Implementation for selecting all components\r\n    console.log('Select all components');\r\n  }, []);\r\n\r\n  const deleteSelected = useCallback(() => {\r\n    if (state.selectedComponentId) {\r\n      deleteComponent(state.selectedComponentId);\r\n    }\r\n  }, [state.selectedComponentId, deleteComponent]);\r\n\r\n  const getComponentById = useCallback((id: string): TemplateComponent | undefined => {\r\n    return stateRef.current.components.find(comp => comp.id === id);\r\n  }, []);\r\n\r\n  const getSelectedComponent = useCallback((): TemplateComponent | null => {\r\n    return state.selectedComponentId ? getComponentById(state.selectedComponentId) || null : null;\r\n  }, [state.selectedComponentId, getComponentById]);\r\n\r\n  const saveTemplate = useCallback((): TemplateData => {\r\n    const template: TemplateData = {\r\n      id: templateId || `template-${Date.now()}`,\r\n      name: 'Novo Template',\r\n      category: 'custom',\r\n      components: state.components,\r\n      pageSize: 'A4',\r\n      orientation: 'portrait',\r\n      margins: {\r\n        top: 20,\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 20\r\n      },\r\n      metadata: {\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n        version: '1.0.0'\r\n      }\r\n    };\r\n    \r\n    // Save to localStorage or send to server\r\n    localStorage.setItem(`template-${template.id}`, JSON.stringify(template));\r\n    \r\n    return template;\r\n  }, [templateId, state.components]);\r\n\r\n  const loadTemplate = useCallback((id: string) => {\r\n    try {\r\n      const saved = localStorage.getItem(`template-${id}`);\r\n      if (saved) {\r\n        const template: TemplateData = JSON.parse(saved);\r\n        setState(prev => ({\r\n          ...prev,\r\n          components: template.components,\r\n          history: [template.components],\r\n          historyIndex: 0,\r\n          selectedComponentId: null\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading template:', error);\r\n    }\r\n  }, []);\r\n\r\n  const previewTemplate = useCallback(() => {\r\n    return {\r\n      components: state.components,\r\n      zoom: state.zoom\r\n    };\r\n  }, [state.components, state.zoom]);\r\n\r\n  const exportTemplate = useCallback((format: 'json' | 'pdf' | 'png') => {\r\n    const template = saveTemplate();\r\n    \r\n    switch (format) {\r\n      case 'json': {\r\n        const blob = new Blob([JSON.stringify(template, null, 2)], { type: 'application/json' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `${template.name}.json`;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        break;\r\n      }\r\n      case 'pdf':\r\n        // Implementation for PDF export\r\n        console.log('PDF export not implemented yet');\r\n        break;\r\n      case 'png':\r\n        // Implementation for PNG export\r\n        console.log('PNG export not implemented yet');\r\n        break;\r\n    }\r\n  }, [saveTemplate]);\r\n\r\n  return {\r\n    // State\r\n    components: state.components,\r\n    selectedComponent: getSelectedComponent(),\r\n    selectedComponentId: state.selectedComponentId,\r\n    canUndo: state.historyIndex > 0,\r\n    canRedo: state.historyIndex < state.history.length - 1,\r\n    zoom: state.zoom,\r\n    showGrid: state.showGrid,\r\n    showRulers: state.showRulers,\r\n    snapToGrid: state.snapToGrid,\r\n    gridSize: state.gridSize,\r\n    \r\n    // Actions\r\n    addComponent,\r\n    updateComponent,\r\n    updateComponentProperties,\r\n    deleteComponent,\r\n    duplicateComponent,\r\n    selectComponent,\r\n    moveComponent,\r\n    resizeComponent,\r\n    bringToFront,\r\n    sendToBack,\r\n    undo,\r\n    redo,\r\n    setZoom,\r\n    toggleGrid,\r\n    toggleRulers,\r\n    toggleSnapToGrid,\r\n    clearSelection,\r\n    selectAll,\r\n    deleteSelected,\r\n    \r\n    // Utilities\r\n    getComponentById,\r\n    getSelectedComponent,\r\n    saveTemplate,\r\n    loadTemplate,\r\n    previewTemplate,\r\n    exportTemplate\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TemplateEditor\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\TrainingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\VersionDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\sidebar\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\sidebar\\SidebarItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\sidebar\\SidebarSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\sidebar\\SidebarToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\sidebar\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\button-group.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":125,"column":45,"nodeType":"Identifier","messageId":"namedExport","endLine":125,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst buttonGroupVariants = cva(\n  \"inline-flex items-center\",\n  {\n    variants: {\n      orientation: {\n        horizontal: \"flex-row\",\n        vertical: \"flex-col\",\n      },\n      spacing: {\n        none: \"gap-0\",\n        sm: \"gap-1\",\n        default: \"gap-2\",\n        md: \"gap-3\",\n        lg: \"gap-4\",\n      },\n      alignment: {\n        start: \"justify-start\",\n        center: \"justify-center\",\n        end: \"justify-end\",\n        between: \"justify-between\",\n        around: \"justify-around\",\n        evenly: \"justify-evenly\",\n      },\n      wrap: {\n        true: \"flex-wrap\",\n        false: \"flex-nowrap\",\n      },\n      fullWidth: {\n        true: \"w-full\",\n        false: \"w-auto\",\n      },\n    },\n    defaultVariants: {\n      orientation: \"horizontal\",\n      spacing: \"default\",\n      alignment: \"start\",\n      wrap: false,\n      fullWidth: false,\n    },\n  }\n);\n\nexport interface ButtonGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof buttonGroupVariants> {\n  children: React.ReactNode;\n}\n\nconst ButtonGroup = React.forwardRef<HTMLDivElement, ButtonGroupProps>(\n  ({ className, orientation, spacing, alignment, wrap, fullWidth, children, ...props }, ref) => {\n    return (\n      <div\n        className={cn(\n          buttonGroupVariants({ orientation, spacing, alignment, wrap, fullWidth }),\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nButtonGroup.displayName = \"ButtonGroup\";\n\n// Componente para grupos de botões conectados (sem espaçamento)\nconst ConnectedButtonGroup = React.forwardRef<HTMLDivElement, ButtonGroupProps>(\n  ({ className, orientation = \"horizontal\", children, ...props }, ref) => {\n    const childrenArray = React.Children.toArray(children);\n    \n    return (\n      <div\n        className={cn(\n          \"inline-flex\",\n          orientation === \"horizontal\" ? \"flex-row\" : \"flex-col\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {childrenArray.map((child, index) => {\n          if (React.isValidElement(child)) {\n            const isFirst = index === 0;\n            const isLast = index === childrenArray.length - 1;\n            const isMiddle = !isFirst && !isLast;\n            \n            let additionalClasses = \"\";\n            \n            if (orientation === \"horizontal\") {\n              if (isFirst) {\n                additionalClasses = \"rounded-r-none border-r-0\";\n              } else if (isLast) {\n                additionalClasses = \"rounded-l-none\";\n              } else if (isMiddle) {\n                additionalClasses = \"rounded-none border-r-0\";\n              }\n            } else {\n              if (isFirst) {\n                additionalClasses = \"rounded-b-none border-b-0\";\n              } else if (isLast) {\n                additionalClasses = \"rounded-t-none\";\n              } else if (isMiddle) {\n                additionalClasses = \"rounded-none border-b-0\";\n              }\n            }\n            \n            return React.cloneElement(child, {\n              className: cn(child.props.className, additionalClasses),\n              key: index,\n            });\n          }\n          return child;\n        })}\n      </div>\n    );\n  }\n);\nConnectedButtonGroup.displayName = \"ConnectedButtonGroup\";\n\nexport { ButtonGroup, ConnectedButtonGroup, buttonGroupVariants };","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":60,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":60,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-smooth focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-solar\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-energy\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n        gradient: \"bg-gradient-solar text-primary-foreground hover:opacity-90 shadow-glow\",\r\n        success: \"bg-success text-success-foreground hover:bg-success/90\",\r\n        warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n        xl: \"h-12 rounded-lg px-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\cep-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\date-range-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\file-upload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n))\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\r\n)\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\r\n    {...props}\r\n  >\r\n    {children}{\" \"}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n))\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nNavigationMenuViewport.displayName =\r\n  NavigationMenuPrimitive.Viewport.displayName\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n))\r\nNavigationMenuIndicator.displayName =\r\n  NavigationMenuPrimitive.Indicator.displayName\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\responsive-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\responsive-text.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { PanelLeft } from \"lucide-react\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\r\nimport { Skeleton } from \"@/components/ui/skeleton\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\"\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\r\nconst SIDEBAR_WIDTH = \"16rem\"\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\"\r\n  open: boolean\r\n  setOpen: (open: boolean) => void\r\n  openMobile: boolean\r\n  setOpenMobile: (open: boolean) => void\r\n  isMobile: boolean\r\n  toggleSidebar: () => void\r\n}\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext)\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean\r\n    open?: boolean\r\n    onOpenChange?: (open: boolean) => void\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const isMobile = useIsMobile()\r\n    const [openMobile, setOpenMobile] = React.useState(false)\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen)\r\n    const open = openProp ?? _open\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === \"function\" ? value(open) : value\r\n        if (setOpenProp) {\r\n          setOpenProp(openState)\r\n        } else {\r\n          _setOpen(openState)\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\r\n      },\r\n      [setOpenProp, open]\r\n    )\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile\r\n        ? setOpenMobile((open) => !open)\r\n        : setOpen((open) => !open)\r\n    }, [isMobile, setOpen, setOpenMobile])\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (\r\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)\r\n        ) {\r\n          event.preventDefault()\r\n          toggleSidebar()\r\n        }\r\n      }\r\n\r\n      window.addEventListener(\"keydown\", handleKeyDown)\r\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\r\n    }, [toggleSidebar])\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? \"expanded\" : \"collapsed\"\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\r\n    )\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH,\r\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\r\n              className\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    )\r\n  }\r\n)\r\nSidebarProvider.displayName = \"SidebarProvider\"\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\"\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = \"left\",\r\n      variant = \"sidebar\",\r\n      collapsible = \"offcanvas\",\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\r\n\r\n    if (collapsible === \"none\") {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\r\n            className\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\r\n            \"group-data-[collapsible=offcanvas]:w-0\",\r\n            \"group-data-[side=right]:rotate-180\",\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\r\n            side === \"left\"\r\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nSidebar.displayName = \"Sidebar\"\r\n\r\nconst SidebarTrigger = React.forwardRef<\r\n  React.ElementRef<typeof Button>,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, onClick, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      data-sidebar=\"trigger\"\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      className={cn(\"h-7 w-7\", className)}\r\n      onClick={(event) => {\r\n        onClick?.(event)\r\n        toggleSidebar()\r\n      }}\r\n      {...props}\r\n    >\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>\r\n  )\r\n})\r\nSidebarTrigger.displayName = \"SidebarTrigger\"\r\n\r\nconst SidebarRail = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\">\r\n>(({ className, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      data-sidebar=\"rail\"\r\n      aria-label=\"Toggle Sidebar\"\r\n      tabIndex={-1}\r\n      onClick={toggleSidebar}\r\n      title=\"Toggle Sidebar\"\r\n      className={cn(\r\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\r\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarRail.displayName = \"SidebarRail\"\r\n\r\nconst SidebarInset = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"main\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInset.displayName = \"SidebarInset\"\r\n\r\nconst SidebarInput = React.forwardRef<\r\n  React.ElementRef<typeof Input>,\r\n  React.ComponentProps<typeof Input>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Input\r\n      ref={ref}\r\n      data-sidebar=\"input\"\r\n      className={cn(\r\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInput.displayName = \"SidebarInput\"\r\n\r\nconst SidebarHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"header\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarHeader.displayName = \"SidebarHeader\"\r\n\r\nconst SidebarFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"footer\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarFooter.displayName = \"SidebarFooter\"\r\n\r\nconst SidebarSeparator = React.forwardRef<\r\n  React.ElementRef<typeof Separator>,\r\n  React.ComponentProps<typeof Separator>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarSeparator.displayName = \"SidebarSeparator\"\r\n\r\nconst SidebarContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarContent.displayName = \"SidebarContent\"\r\n\r\nconst SidebarGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroup.displayName = \"SidebarGroup\"\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"div\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\r\n\r\nconst SidebarGroupContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"group-content\"\r\n    className={cn(\"w-full text-sm\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\r\n\r\nconst SidebarMenu = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu\"\r\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenu.displayName = \"SidebarMenu\"\r\n\r\nconst SidebarMenuItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li\r\n    ref={ref}\r\n    data-sidebar=\"menu-item\"\r\n    className={cn(\"group/menu-item relative\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    isActive?: boolean\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const { isMobile, state } = useSidebar()\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    )\r\n\r\n    if (!tooltip) {\r\n      return button\r\n    }\r\n\r\n    if (typeof tooltip === \"string\") {\r\n      tooltip = {\r\n        children: tooltip,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== \"collapsed\" || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }\r\n)\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    showOnHover?: boolean\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\r\n\r\nconst SidebarMenuBadge = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"menu-badge\"\r\n    className={cn(\r\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\r\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n      \"peer-data-[size=sm]/menu-button:top-1\",\r\n      \"peer-data-[size=default]/menu-button:top-1.5\",\r\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && (\r\n        <Skeleton\r\n          className=\"size-4 rounded-md\"\r\n          data-sidebar=\"menu-skeleton-icon\"\r\n        />\r\n      )}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n})\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\r\n\r\nconst SidebarMenuSub = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu-sub\"\r\n    className={cn(\r\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean\r\n    size?: \"sm\" | \"md\"\r\n    isActive?: boolean\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\r\nimport { Toaster as Sonner, toast } from \"sonner\"\r\n\r\ntype ToasterProps = React.ComponentProps<typeof Sonner>\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme()\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      toastOptions={{\r\n        classNames: {\r\n          toast:\r\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\r\n          description: \"group-[.toast]:text-muted-foreground\",\r\n          actionButton:\r\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\r\n          cancelButton:\r\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Toaster, toast }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root\r\n    ref={ref}\r\n    className={cn(toggleVariants({ variant, size, className }))}\r\n    {...props}\r\n  />\r\n))\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName\r\n\r\nexport { Toggle, toggleVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":42,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":42,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { User, Session } from '@supabase/supabase-js';\r\nimport { supabase } from '../integrations/supabase/client';\r\nimport { useToast } from '../hooks/use-toast';\r\nimport { PERMISSIONS, validateEmail, validatePassword, sanitizeEmail } from './authUtils';\r\n\r\n\r\nexport type UserAccessType = 'vendedor' | 'engenheiro' | 'admin' | 'super_admin';\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  access_type: UserAccessType;\r\n  company_id: string | null;\r\n  last_login: string | null;\r\n}\r\n\r\nexport interface Company {\r\n  id: string;\r\n  name: string;\r\n  cnpj: string;\r\n  address: string | null;\r\n  num_employees: number;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  profile: UserProfile | null;\r\n  company: Company | null;\r\n  loading: boolean;\r\n  signIn: (email: string, password: string) => Promise<{ error: Error | null }>;\r\n  signUp: (email: string, password: string, name: string) => Promise<{ error: Error | null }>;\r\n  signOut: () => Promise<void>;\r\n  hasPermission: (action: string) => boolean;\r\n  isSubscriptionActive: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [company, setCompany] = useState<Company | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isSubscriptionActive, setIsSubscriptionActive] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const fetchProfile = async (userId: string) => {\r\n    try {\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', userId)\r\n        .maybeSingle();\r\n\r\n      if (profileError) throw profileError;\r\n      \r\n      if (!profileData) {\r\n        console.warn('Perfil não encontrado para o usuário');\r\n        setProfile(null);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setProfile(profileData);\r\n\r\n      if (profileData.company_id) {\r\n        const { data: companyData } = await supabase\r\n          .from('companies')\r\n          .select('*')\r\n          .eq('id', profileData.company_id)\r\n          .maybeSingle();\r\n        \r\n        setCompany(companyData);\r\n\r\n        // Check subscription status\r\n        const { data: subscriptionData } = await supabase\r\n          .from('subscriptions')\r\n          .select('status, end_date')\r\n          .eq('company_id', profileData.company_id)\r\n          .maybeSingle();\r\n\r\n        if (subscriptionData) {\r\n          const isActive = (subscriptionData.status === 'ativa' || subscriptionData.status === 'gratuita') &&\r\n                          (!subscriptionData.end_date || new Date(subscriptionData.end_date) > new Date());\r\n          setIsSubscriptionActive(isActive);\r\n        }\r\n      }\r\n\r\n      // Update last login\r\n      await supabase\r\n        .from('profiles')\r\n        .update({ last_login: new Date().toISOString() })\r\n        .eq('id', userId);\r\n\r\n      // Log login action\r\n      await supabase\r\n        .from('audit_logs')\r\n        .insert({\r\n          user_id: userId,\r\n          action: 'login',\r\n          details: { timestamp: new Date().toISOString() }\r\n         });\r\n\r\n      // Sempre define loading como false ao final\r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao buscar perfil:', error);\r\n      // Se falhar, ainda assim define loading como false para evitar tela branca\r\n      setProfile(null);\r\n      setCompany(null);\r\n      setIsSubscriptionActive(false);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Set up auth state listener\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        setSession(session);\r\n        setUser(session?.user ?? null);\r\n        \r\n        if (session?.user) {\r\n          // Usar setTimeout para evitar problemas de recursão\r\n          setTimeout(() => {\r\n            fetchProfile(session.user.id);\r\n          }, 0);\r\n        } else {\r\n          setProfile(null);\r\n          setCompany(null);\r\n          setIsSubscriptionActive(false);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    );\r\n\r\n    // Check for existing session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      if (session?.user) {\r\n        setTimeout(() => {\r\n          fetchProfile(session.user.id);\r\n        }, 0);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      // Basic input validation\r\n      if (!email || !password) {\r\n        const error = new Error('Email e senha são obrigatórios');\r\n        return { error };\r\n      }\r\n\r\n      // Validate email format\r\n      if (!validateEmail(email)) {\r\n        const error = new Error('Formato de email inválido');\r\n        return { error };\r\n      }\r\n\r\n      const { error } = await supabase.auth.signInWithPassword({\r\n        email: sanitizeEmail(email),\r\n        password,\r\n      });\r\n      \r\n      if (error) {\r\n        // Security: Use generic error messages to prevent user enumeration\r\n        const secureMessage = \"Credenciais inválidas\";\r\n        \r\n        // Log failed login attempt - simplified for now\r\n        try {\r\n          await supabase\r\n            .from('audit_logs')\r\n            .insert({\r\n              user_id: user?.id || 'anonymous',\r\n              action: 'failed_login',\r\n              details: { \r\n                email: sanitizeEmail(email),\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            });\r\n        } catch {\r\n          // Fail silently for security logging\r\n        }\r\n\r\n        toast({\r\n          title: \"Erro no login\",\r\n          description: secureMessage,\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n      \r\n      return { error };\r\n    } catch (error) {\r\n      // Secure error handling - avoid console logging in production\r\n      return { error: new Error('Erro interno. Tente novamente.') };\r\n    }\r\n  };\r\n\r\n  const signUp = async (email: string, password: string, name: string) => {\r\n    try {\r\n      // Input validation\r\n      if (!email || !password || !name) {\r\n        const error = new Error('Todos os campos são obrigatórios');\r\n        return { error };\r\n      }\r\n\r\n      // Validate email format\r\n      if (!validateEmail(email)) {\r\n        const error = new Error('Formato de email inválido');\r\n        return { error };\r\n      }\r\n\r\n      // Validate password strength\r\n      const passwordValidation = validatePassword(password);\r\n      if (!passwordValidation.isValid) {\r\n        const error = new Error(passwordValidation.message || 'Senha inválida');\r\n        return { error };\r\n      }\r\n\r\n      // Validate name\r\n      if (!name.trim() || name.trim().length < 2) {\r\n        const error = new Error('Nome deve ter pelo menos 2 caracteres');\r\n        return { error };\r\n      }\r\n\r\n      const { error } = await supabase.auth.signUp({\r\n        email: sanitizeEmail(email),\r\n        password,\r\n        options: {\r\n          emailRedirectTo: `${window.location.origin}/`,\r\n          data: {\r\n            name: name.trim(),\r\n          },\r\n        },\r\n      });\r\n      \r\n      if (error) {\r\n        // Security: Use generic error messages\r\n        let secureMessage = \"Erro ao criar conta. Tente novamente.\";\r\n        \r\n        // Some specific errors we can show\r\n        if (error.message.includes('User already registered')) {\r\n          secureMessage = \"Este email já está cadastrado\";\r\n        }\r\n\r\n        toast({\r\n          title: \"Erro no cadastro\",\r\n          description: secureMessage,\r\n          variant: \"destructive\",\r\n        });\r\n      } else {\r\n        // Log successful signup attempt\r\n        try {\r\n          await supabase\r\n            .from('audit_logs')\r\n            .insert({\r\n              user_id: user?.id || 'pending',\r\n              action: 'signup_attempt',\r\n              details: { \r\n                email: sanitizeEmail(email),\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            });\r\n        } catch {\r\n          // Fail silently for security logging\r\n        }\r\n      }\r\n      \r\n      return { error };\r\n    } catch (error) {\r\n      // Secure error handling - avoid console logging in production\r\n      return { error: new Error('Erro interno. Tente novamente.') };\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    try {\r\n      if (user) {\r\n        await supabase\r\n          .from('audit_logs')\r\n          .insert({\r\n            user_id: user.id,\r\n            action: 'logout',\r\n            details: { timestamp: new Date().toISOString() }\r\n          });\r\n      }\r\n      \r\n      await supabase.auth.signOut();\r\n      setProfile(null);\r\n      setCompany(null);\r\n      setIsSubscriptionActive(false);\r\n    } catch (error) {\r\n      // Secure error handling - avoid console logging in production\r\n    }\r\n  };\r\n\r\n  const hasPermission = (action: string): boolean => {\r\n    if (!profile) return false;\r\n    \r\n    const userPermissions = PERMISSIONS[profile.access_type];\r\n    return userPermissions.includes('all') || userPermissions.includes(action);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    profile,\r\n    company,\r\n    loading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n    hasPermission,\r\n    isSubscriptionActive,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\contexts\\authUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useAuditLogs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useCEP.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useEquipmentWithRetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useFileCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useFinancialIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useFinancialKitsWithRetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useNotifications.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'getErrorMessage' and 'loadFromCache'. Either include them or remove the dependency array.","line":189,"column":6,"nodeType":"ArrayExpression","endLine":189,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [getErrorMessage, loadFromCache, profile, toast]","fix":{"range":[6267,6283],"text":"[getErrorMessage, loadFromCache, profile, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { connectivityService } from '@/services/connectivityService';\nimport type { Notification, NotificationType, NotificationPriority } from '@/components/NotificationCenter';\n\ninterface CreateNotificationParams {\n  title: string;\n  message: string;\n  type?: NotificationType;\n  priority?: NotificationPriority;\n  userId?: string;\n  companyId?: string;\n  actionUrl?: string;\n  actionLabel?: string;\n  expiresAt?: Date;\n  metadata?: Record<string, unknown>;\n}\n\ninterface NotificationStats {\n  total: number;\n  unread: number;\n  urgent: number;\n  byType: Record<NotificationType, number>;\n  byPriority: Record<NotificationPriority, number>;\n  todayCount: number;\n  weekCount: number;\n}\n\ninterface NotificationGroup {\n  type: NotificationType;\n  count: number;\n  latestNotification: Notification;\n  notifications: Notification[];\n}\n\ninterface NotificationFilters {\n  type?: NotificationType[];\n  priority?: NotificationPriority[];\n  read?: boolean;\n  dateRange?: { start: Date; end: Date };\n  searchTerm?: string;\n}\n\nexport function useNotifications() {\n  const { profile } = useAuth();\n  const { toast } = useToast();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Referência para markAsRead para uso em callbacks\n  const markAsReadRef = useRef<((id: string) => Promise<void>) | null>(null);\n  const [stats, setStats] = useState<NotificationStats>({\n    total: 0,\n    unread: 0,\n    urgent: 0,\n    byType: {\n      info: 0,\n      success: 0,\n      warning: 0,\n      error: 0,\n      system: 0\n    },\n    byPriority: {\n      low: 0,\n      medium: 0,\n      high: 0,\n      urgent: 0\n    },\n    todayCount: 0,\n    weekCount: 0\n  });\n  const [filters, setFilters] = useState<NotificationFilters>({});\n  const [groupedNotifications, setGroupedNotifications] = useState<NotificationGroup[]>([]);\n\n  // Carregar notificações com retry automático e fallback melhorado\n  const loadNotifications = useCallback(async () => {\n    if (!profile) return;\n\n    setIsLoading(true);\n    console.log('🔄 Carregando notificações...');\n\n    try {\n      // Usar o serviço de conectividade com retry automático\n      const result = await connectivityService.withRetry(async () => {\n        const { data, error } = await supabase\n          .from('notifications')\n          .select('*')\n          .or(`user_id.eq.${profile.id},company_id.eq.${profile.company_id}`)\n          .order('created_at', { ascending: false })\n          .limit(100);\n\n        if (error) {\n          console.error('❌ Erro na query de notificações:', error);\n          throw error;\n        }\n\n        return data || [];\n      }, {\n        maxRetries: 2,\n        baseDelay: 1000\n      });\n\n      console.log(`✅ Notificações carregadas: ${result.length}`);\n      setNotifications(result);\n      \n      // Salvar no cache local para fallback\n      try {\n        const cacheData = {\n          notifications: result,\n          timestamp: Date.now(),\n          profileId: profile.id\n        };\n        localStorage.setItem('notifications_cache', JSON.stringify(cacheData));\n        console.log('💾 Notificações salvas no cache local');\n      } catch (cacheError) {\n        console.warn('⚠️ Erro ao salvar cache:', cacheError);\n      }\n      \n      // Calcular estatísticas\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      \n      const newStats: NotificationStats = {\n        total: notificationData.length,\n        unread: notificationData.filter(n => !n.read).length,\n        urgent: notificationData.filter(n => n.priority === 'urgent' || n.priority === 'high').length,\n        byType: {\n          info: notificationData.filter(n => n.type === 'info').length,\n          success: notificationData.filter(n => n.type === 'success').length,\n          warning: notificationData.filter(n => n.type === 'warning').length,\n          error: notificationData.filter(n => n.type === 'error').length,\n          system: notificationData.filter(n => n.type === 'system').length\n        },\n        byPriority: {\n          low: notificationData.filter(n => n.priority === 'low').length,\n          medium: notificationData.filter(n => n.priority === 'medium').length,\n          high: notificationData.filter(n => n.priority === 'high').length,\n          urgent: notificationData.filter(n => n.priority === 'urgent').length\n        },\n        todayCount: notificationData.filter(n => new Date(n.created_at) >= today).length,\n        weekCount: notificationData.filter(n => new Date(n.created_at) >= weekAgo).length\n      };\n      setStats(newStats);\n\n    } catch (error) {\n      console.error('❌ Erro ao carregar notificações após tentativas:', error);\n      \n      // Verificar se deve usar fallback\n      const shouldFallback = connectivityService.shouldUseFallback(error);\n      \n      if (shouldFallback) {\n        // Tentar carregar do cache local melhorado\n        const fallbackResult = await loadFromCache();\n        \n        if (fallbackResult.success) {\n          setNotifications(fallbackResult.data);\n          \n          const connectivityStatus = connectivityService.getStatus();\n          const isStale = fallbackResult.isStale;\n          \n          toast({\n            title: connectivityStatus.isOnline ? 'Dados em Cache' : 'Modo Offline',\n            description: isStale \n              ? 'Exibindo notificações em cache. Dados podem estar desatualizados.'\n              : 'Exibindo notificações em cache.',\n            variant: 'default'\n          });\n          return;\n        }\n      }\n      \n      // Se chegou aqui, não conseguiu carregar nem do cache\n      setNotifications([]);\n      \n      // Determinar mensagem de erro específica\n      const errorMessage = getErrorMessage(error);\n      \n      toast({\n        title: 'Erro de Conexão',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [profile, toast]);\n\n  // Função auxiliar para carregar do cache\n  const loadFromCache = useCallback(async (): Promise<{\n    success: boolean;\n    data: Notification[];\n    isStale: boolean;\n  }> => {\n    try {\n      const cachedData = localStorage.getItem('notifications_cache');\n      if (!cachedData) {\n        console.log('📭 Nenhuma notificação em cache');\n        return { success: false, data: [], isStale: false };\n      }\n\n      const parsed = JSON.parse(cachedData);\n      \n      // Verificar se o cache é do usuário atual\n      if (parsed.profileId !== profile?.id) {\n        console.log('🔄 Cache de usuário diferente, ignorando');\n        return { success: false, data: [], isStale: false };\n      }\n\n      const notifications = parsed.notifications || [];\n      const cacheAge = Date.now() - (parsed.timestamp || 0);\n      const isStale = cacheAge > 5 * 60 * 1000; // 5 minutos\n      \n      console.log(`📦 Carregando ${notifications.length} notificações do cache (${Math.round(cacheAge / 1000)}s atrás)`);\n      \n      return {\n        success: true,\n        data: notifications,\n        isStale\n      };\n    } catch (cacheError) {\n      console.error('❌ Erro ao carregar cache:', cacheError);\n      return { success: false, data: [], isStale: false };\n    }\n  }, [profile?.id]);\n\n  // Função auxiliar para determinar mensagem de erro\n  const getErrorMessage = useCallback((error: unknown): string => {\n    if (!error || typeof error !== 'object') {\n      return 'Erro desconhecido ao carregar notificações.';\n    }\n\n    const errorObj = error as { code?: string; message?: string };\n    \n    switch (errorObj.code) {\n      case 'PGRST116':\n        return 'Tabela de notificações não encontrada. Entre em contato com o suporte.';\n      case '42501':\n        return 'Permissão negada para acessar notificações. Faça login novamente.';\n      case 'PGRST301':\n        return 'Erro de autenticação. Faça login novamente.';\n      default:\n        if (errorObj.message?.includes('connection') || errorObj.message?.includes('network')) {\n          return 'Erro de conexão com o servidor. Verifique sua internet.';\n        }\n        return 'Não foi possível carregar as notificações. Tente novamente.';\n    }\n  }, []);\n\n  // Solicitar permissão para notificações push\n  const requestNotificationPermission = useCallback(async (): Promise<boolean> => {\n    if (!('Notification' in window)) {\n      console.warn('Este navegador não suporta notificações push');\n      return false;\n    }\n    \n    if (Notification.permission === 'granted') {\n      return true;\n    }\n    \n    if (Notification.permission === 'denied') {\n      return false;\n    }\n    \n    const permission = await Notification.requestPermission();\n    return permission === 'granted';\n  }, []);\n\n  // Enviar notificação push\n  const sendPushNotification = useCallback(async (notification: Notification) => {\n    const hasPermission = await requestNotificationPermission();\n    \n    if (!hasPermission) {\n      return;\n    }\n    \n    try {\n      const pushNotification = new Notification(notification.title, {\n        body: notification.message,\n        icon: '/favicon.ico',\n        badge: '/favicon.ico',\n        tag: notification.id,\n        requireInteraction: notification.priority === 'urgent',\n        silent: notification.priority === 'low'\n      });\n      \n      pushNotification.onclick = () => {\n         window.focus();\n         // markAsRead será definido mais tarde, então vamos usar uma referência\n         if (markAsReadRef.current) {\n           markAsReadRef.current(notification.id);\n         }\n         pushNotification.close();\n       };\n      \n      // Auto-fechar após 5 segundos para notificações não urgentes\n      if (notification.priority !== 'urgent') {\n        setTimeout(() => {\n          pushNotification.close();\n        }, 5000);\n      }\n      \n    } catch (error) {\n      console.error('Erro ao enviar notificação push:', error);\n    }\n  }, [requestNotificationPermission]);\n\n  // Criar nova notificação\n  const createNotification = useCallback(async (params: CreateNotificationParams) => {\n    if (!profile) return null;\n\n    try {\n      const notificationData = {\n        title: params.title,\n        message: params.message,\n        type: params.type || 'info',\n        priority: params.priority || 'medium',\n        user_id: params.userId || profile.id,\n        company_id: params.companyId || profile.company_id,\n        action_url: params.actionUrl,\n        action_label: params.actionLabel,\n        expires_at: params.expiresAt?.toISOString(),\n        metadata: params.metadata,\n        read: false\n      };\n\n      const { data, error } = await supabase\n        .from('notifications')\n        .insert(notificationData)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Atualizar lista local\n      setNotifications(prev => [data, ...prev]);\n      \n      // Atualizar estatísticas\n      setStats(prev => ({\n        ...prev,\n        total: prev.total + 1,\n        unread: prev.unread + 1,\n        byType: {\n          ...prev.byType,\n          [data.type]: prev.byType[data.type as NotificationType] + 1\n        },\n        byPriority: {\n          ...prev.byPriority,\n          [data.priority]: prev.byPriority[data.priority as NotificationPriority] + 1\n        }\n      }));\n\n      // Enviar notificação push para notificações urgentes ou de erro\n      if (data.priority === 'urgent' || data.priority === 'high' || data.type === 'error') {\n        await sendPushNotification(data);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro ao criar notificação:', error);\n      toast({\n        title: 'Erro',\n        description: 'Não foi possível criar a notificação',\n        variant: 'destructive'\n      });\n      return null;\n    }\n  }, [profile, toast, sendPushNotification]);\n\n  // Marcar como lida\n  const markAsRead = useCallback(async (notificationId: string) => {\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .update({ read: true })\n        .eq('id', notificationId);\n\n      if (error) throw error;\n\n      setNotifications(prev => \n        prev.map(n => n.id === notificationId ? { ...n, read: true } : n)\n      );\n      \n      setStats(prev => ({\n        ...prev,\n        unread: Math.max(0, prev.unread - 1)\n      }));\n\n    } catch (error) {\n      console.error('Erro ao marcar como lida:', error);\n    }\n  }, []);\n  \n  // Atualizar referência para markAsRead\n  useEffect(() => {\n    markAsReadRef.current = markAsRead;\n  }, [markAsRead]);\n\n  // Marcar como não lida\n  const markAsUnread = useCallback(async (notificationId: string) => {\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .update({ read: false })\n        .eq('id', notificationId);\n\n      if (error) throw error;\n\n      setNotifications(prev => \n        prev.map(n => n.id === notificationId ? { ...n, read: false } : n)\n      );\n      \n      setStats(prev => ({\n        ...prev,\n        unread: prev.unread + 1\n      }));\n\n    } catch (error) {\n      console.error('Erro ao marcar como não lida:', error);\n    }\n  }, []);\n\n  // Deletar notificação\n  const deleteNotification = useCallback(async (notificationId: string) => {\n    try {\n      const notification = notifications.find(n => n.id === notificationId);\n      if (!notification) return;\n\n      const { error } = await supabase\n        .from('notifications')\n        .delete()\n        .eq('id', notificationId);\n\n      if (error) throw error;\n\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\n      \n      setStats(prev => ({\n        ...prev,\n        total: Math.max(0, prev.total - 1),\n        unread: notification.read ? prev.unread : Math.max(0, prev.unread - 1),\n        urgent: (notification.priority === 'urgent' || notification.priority === 'high') \n          ? Math.max(0, prev.urgent - 1) \n          : prev.urgent,\n        byType: {\n          ...prev.byType,\n          [notification.type]: Math.max(0, prev.byType[notification.type] - 1)\n        }\n      }));\n\n      toast({\n        title: 'Sucesso',\n        description: 'Notificação removida'\n      });\n\n    } catch (error) {\n      console.error('Erro ao deletar notificação:', error);\n      toast({\n        title: 'Erro',\n        description: 'Não foi possível remover a notificação',\n        variant: 'destructive'\n      });\n    }\n  }, [notifications, toast]);\n\n  // Marcar todas como lidas\n  const markAllAsRead = useCallback(async () => {\n    if (!profile) return;\n\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .update({ read: true })\n        .or(`user_id.eq.${profile.id},company_id.eq.${profile.company_id}`)\n        .eq('read', false);\n\n      if (error) throw error;\n\n      setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n      setStats(prev => ({ ...prev, unread: 0 }));\n      \n      toast({\n        title: 'Sucesso',\n        description: 'Todas as notificações foram marcadas como lidas'\n      });\n\n    } catch (error) {\n      console.error('Erro ao marcar todas como lidas:', error);\n      toast({\n        title: 'Erro',\n        description: 'Não foi possível marcar todas as notificações como lidas',\n        variant: 'destructive'\n      });\n    }\n  }, [profile, toast]);\n\n  // Limpar notificações expiradas\n  const clearExpiredNotifications = useCallback(async () => {\n    if (!profile) return;\n\n    try {\n      const now = new Date().toISOString();\n      const { error } = await supabase\n        .from('notifications')\n        .delete()\n        .or(`user_id.eq.${profile.id},company_id.eq.${profile.company_id}`)\n        .lt('expires_at', now);\n\n      if (error) throw error;\n\n      // Recarregar notificações\n      await loadNotifications();\n\n    } catch (error) {\n      console.error('Erro ao limpar notificações expiradas:', error);\n    }\n  }, [profile, loadNotifications]);\n\n  // Configurar real-time subscriptions\n  useEffect(() => {\n    if (!profile) return;\n\n    const channel = supabase\n      .channel('notifications')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'notifications',\n          filter: `user_id=eq.${profile.id}`\n        },\n        (payload) => {\n          console.log('Notificação em tempo real:', payload);\n          loadNotifications();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [profile, loadNotifications]);\n\n  // Filtrar notificações\n  const filterNotifications = useCallback((notifications: Notification[], filters: NotificationFilters): Notification[] => {\n    return notifications.filter(notification => {\n      // Filtro por tipo\n      if (filters.type && filters.type.length > 0 && !filters.type.includes(notification.type)) {\n        return false;\n      }\n      \n      // Filtro por prioridade\n      if (filters.priority && filters.priority.length > 0 && !filters.priority.includes(notification.priority)) {\n        return false;\n      }\n      \n      // Filtro por status de leitura\n      if (filters.read !== undefined && notification.read !== filters.read) {\n        return false;\n      }\n      \n      // Filtro por data\n      if (filters.dateRange) {\n        const notificationDate = new Date(notification.created_at);\n        if (notificationDate < filters.dateRange.start || notificationDate > filters.dateRange.end) {\n          return false;\n        }\n      }\n      \n      // Filtro por termo de busca\n      if (filters.searchTerm) {\n        const searchTerm = filters.searchTerm.toLowerCase();\n        const searchableText = `${notification.title} ${notification.message}`.toLowerCase();\n        if (!searchableText.includes(searchTerm)) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  }, []);\n\n  // Agrupar notificações por tipo\n  const groupNotificationsByType = useCallback((notifications: Notification[]): NotificationGroup[] => {\n    const groups: Record<NotificationType, NotificationGroup> = {} as Record<NotificationType, NotificationGroup>;\n    \n    notifications.forEach(notification => {\n      if (!groups[notification.type]) {\n        groups[notification.type] = {\n          type: notification.type,\n          count: 0,\n          latestNotification: notification,\n          notifications: []\n        };\n      }\n      \n      groups[notification.type].count++;\n      groups[notification.type].notifications.push(notification);\n      \n      // Manter a notificação mais recente como latest\n      if (new Date(notification.created_at) > new Date(groups[notification.type].latestNotification.created_at)) {\n        groups[notification.type].latestNotification = notification;\n      }\n    });\n    \n    return Object.values(groups).sort((a, b) => \n      new Date(b.latestNotification.created_at).getTime() - new Date(a.latestNotification.created_at).getTime()\n    );\n  }, []);\n\n  // Aplicar filtros e atualizar notificações agrupadas\n  const applyFilters = useCallback((newFilters: NotificationFilters) => {\n    setFilters(newFilters);\n    const filtered = filterNotifications(notifications, newFilters);\n    const grouped = groupNotificationsByType(filtered);\n    setGroupedNotifications(grouped);\n  }, [notifications, filterNotifications, groupNotificationsByType]);\n\n  // Limpar filtros\n  const clearFilters = useCallback(() => {\n    setFilters({});\n    const grouped = groupNotificationsByType(notifications);\n    setGroupedNotifications(grouped);\n  }, [notifications, groupNotificationsByType]);\n\n\n\n  // Atualizar agrupamentos quando as notificações mudarem\n  useEffect(() => {\n    const filtered = filterNotifications(notifications, filters);\n    const grouped = groupNotificationsByType(filtered);\n    setGroupedNotifications(grouped);\n  }, [notifications, filters, filterNotifications, groupNotificationsByType]);\n\n  // Carregar notificações na inicialização\n  useEffect(() => {\n    if (profile) {\n      loadNotifications();\n      clearExpiredNotifications();\n    }\n  }, [profile, loadNotifications, clearExpiredNotifications]);\n\n  // Métodos de conveniência para criar notificações específicas\n  const notifySuccess = useCallback((title: string, message: string, options?: Partial<CreateNotificationParams>) => {\n    return createNotification({\n      title,\n      message,\n      type: 'success',\n      priority: 'medium',\n      ...options\n    });\n  }, [createNotification]);\n\n  const notifyError = useCallback((title: string, message: string, options?: Partial<CreateNotificationParams>) => {\n    return createNotification({\n      title,\n      message,\n      type: 'error',\n      priority: 'high',\n      ...options\n    });\n  }, [createNotification]);\n\n  const notifyWarning = useCallback((title: string, message: string, options?: Partial<CreateNotificationParams>) => {\n    return createNotification({\n      title,\n      message,\n      type: 'warning',\n      priority: 'medium',\n      ...options\n    });\n  }, [createNotification]);\n\n  const notifyInfo = useCallback((title: string, message: string, options?: Partial<CreateNotificationParams>) => {\n    return createNotification({\n      title,\n      message,\n      type: 'info',\n      priority: 'low',\n      ...options\n    });\n  }, [createNotification]);\n\n  const notifySystem = useCallback((title: string, message: string, options?: Partial<CreateNotificationParams>) => {\n    return createNotification({\n      title,\n      message,\n      type: 'system',\n      priority: 'medium',\n      ...options\n    });\n  }, [createNotification]);\n\n  return {\n    notifications,\n    stats,\n    isLoading,\n    filters,\n    groupedNotifications,\n    loadNotifications,\n    createNotification,\n    markAsRead,\n    markAsUnread,\n    deleteNotification,\n    markAllAsRead,\n    clearExpiredNotifications,\n    // Filtros e agrupamento\n    filterNotifications,\n    groupNotificationsByType,\n    applyFilters,\n    clearFilters,\n    // Notificações push\n    requestNotificationPermission,\n    sendPushNotification,\n    // Métodos de conveniência\n    notifySuccess,\n    notifyError,\n    notifyWarning,\n    notifyInfo,\n    notifySystem\n  };\n}\n\nexport default useNotifications;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useSecureRoleManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useSecurityAudit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\hooks\\useSidebar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\lib\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\pages\\Auth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\pages\\EquipmentManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\DemoDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\cepService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\connectivityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\ocrService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\proposalPDFGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\proposalSharingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\proposalTemplateManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\proposalTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\AidaTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\DataFocusedTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\PremiumCorporateTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\Presentation16x9Template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\ProfessionalA4Template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\PrototypeReplicaTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\StandardTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\services\\templates\\StorytellingTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\types\\utility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\utils\\EnvironmentDetector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\supabase\\functions\\sync-google-sheets\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vinic\\OneDrive\\Documentos\\01 - Profissional\\08- Plataformas\\atualizacao nova energia plataforma\\solara-nova-energia\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]