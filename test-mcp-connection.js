#!/usr/bin/env node

/**
 * Script de teste para verificar a conex√£o MCP com Supabase Self-Hosted
 * 
 * Este script testa se a configura√ß√£o MCP est√° funcionando corretamente
 * e se consegue conectar ao banco PostgreSQL do Supabase.
 */

import pg from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const { Client } = pg;

// Configura√ß√£o baseada no .env
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://supabasekong-s88048sg48wo40soogsgk0o8.plexus.tec.br';
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente n√£o encontradas');
  console.log('Certifique-se de que VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas no .env');
  process.exit(1);
}

// Extrair informa√ß√µes da URL
const url = new URL(supabaseUrl);
const host = url.hostname;
const port = url.port || 5432;

// String de conex√£o para MCP (mesma usada no .mcp.json)
const connectionString = `postgresql://postgres:${serviceKey}@${host}:${port}/postgres?sslmode=require`;

console.log('üîß Testando conex√£o MCP com Supabase Self-Hosted...');
console.log(`üìç Host: ${host}:${port}`);
console.log(`üîó Connection String: postgresql://postgres:***@${host}:${port}/postgres?sslmode=require`);

async function testMCPConnection() {
  const client = new Client({
    connectionString: connectionString
  });

  try {
    console.log('\nüîå Conectando...');
    await client.connect();
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');

    // Teste b√°sico: listar tabelas
    console.log('\nüìã Testando consulta b√°sica...');
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);
    
    console.log(`‚úÖ Encontradas ${tablesResult.rows.length} tabelas p√∫blicas:`);
    tablesResult.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });

    // Teste espec√≠fico: verificar tabela leads
    console.log('\nüéØ Verificando tabela leads...');
    try {
      const leadsResult = await client.query('SELECT COUNT(*) as total FROM leads LIMIT 1');
      console.log(`‚úÖ Tabela leads encontrada com ${leadsResult.rows[0].total} registros`);
    } catch (leadsError) {
      console.log('‚ö†Ô∏è  Tabela leads n√£o encontrada ou sem permiss√£o');
    }

    // Teste de estrutura da tabela leads
    console.log('\nüîç Verificando estrutura da tabela leads...');
    try {
      const structureResult = await client.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'leads' 
        ORDER BY ordinal_position;
      `);
      
      if (structureResult.rows.length > 0) {
        console.log('‚úÖ Estrutura da tabela leads:');
        structureResult.rows.forEach(col => {
          console.log(`   - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
        });
      } else {
        console.log('‚ö†Ô∏è  N√£o foi poss√≠vel obter a estrutura da tabela leads');
      }
    } catch (structError) {
      console.log('‚ö†Ô∏è  Erro ao verificar estrutura da tabela leads:', structError.message);
    }

    console.log('\nüéâ Teste de conex√£o MCP conclu√≠do com sucesso!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Configure sua ferramenta de IA (VS Code, Claude Code, etc.)');
    console.log('2. Use a string de conex√£o testada acima');
    console.log('3. Teste comandos como "Mostre todas as tabelas" na sua IA');

  } catch (error) {
    console.error('‚ùå Erro na conex√£o:', error.message);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Verifique se o Supabase est√° rodando');
    console.log('2. Confirme as credenciais no arquivo .env');
    console.log('3. Teste a conectividade de rede');
    console.log('4. Verifique as configura√ß√µes de SSL/TLS');
  } finally {
    try {
      await client.end();
      console.log('\nüîå Conex√£o fechada.');
    } catch (e) {
      // Ignorar erros ao fechar
    }
  }
}

// Executar teste
testMCPConnection().catch(console.error);