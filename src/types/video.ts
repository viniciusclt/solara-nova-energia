// ============================================================================
// Video Upload System Types
// ============================================================================

/**
 * Status do upload de vídeo
 */
export type UploadStatus = 
  | 'idle'
  | 'uploading'
  | 'processing'
  | 'completed'
  | 'error'
  | 'cancelled';

/**
 * Qualidade de vídeo disponível
 */
export type VideoQuality = '240p' | '360p' | '480p' | '720p' | '1080p' | '1440p' | '2160p';

/**
 * Formato de vídeo suportado
 */
export type VideoFormat = 'mp4' | 'webm' | 'avi' | 'mov' | 'mkv';

/**
 * Tipo de conteúdo do vídeo
 */
export type VideoContentType = 
  | 'training'
  | 'presentation'
  | 'demo'
  | 'tutorial'
  | 'meeting'
  | 'webinar'
  | 'other';

/**
 * Nível de privacidade do vídeo
 */
export type VideoPrivacyLevel = 
  | 'public'
  | 'unlisted'
  | 'private'
  | 'company_only'
  | 'team_only';

/**
 * Status de processamento do vídeo
 */
export type ProcessingStatus = 
  | 'pending'
  | 'transcoding'
  | 'generating_thumbnails'
  | 'applying_watermark'
  | 'uploading_to_cdn'
  | 'completed'
  | 'failed';

/**
 * Configurações de marca d'água
 */
export interface WatermarkSettings {
  enabled: boolean;
  text?: string;
  image?: string;
  position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';
  opacity: number; // 0-1
  size: 'small' | 'medium' | 'large';
  color?: string;
  font?: string;
}

/**
 * Variante de qualidade do vídeo
 */
export interface QualityVariant {
  quality: VideoQuality;
  url: string;
  fileSize: number;
  bitrate: number;
  resolution: {
    width: number;
    height: number;
  };
  format: VideoFormat;
  isReady: boolean;
}

/**
 * URL de streaming segura
 */
export interface StreamingUrl {
  url: string;
  expiresAt: string;
  quality: VideoQuality;
  isSecure: boolean;
  token?: string;
}

/**
 * Metadados do vídeo
 */
export interface VideoMetadata {
  duration: number; // em segundos
  fileSize: number; // em bytes
  format: VideoFormat;
  resolution: {
    width: number;
    height: number;
  };
  bitrate: number;
  frameRate: number;
  hasAudio: boolean;
  audioCodec?: string;
  videoCodec: string;
  aspectRatio: string;
}

/**
 * Configurações de upload
 */
export interface UploadConfig {
  maxFileSize: number; // em bytes
  allowedFormats: VideoFormat[];
  chunkSize: number; // em bytes
  maxConcurrentUploads: number;
  autoProcess: boolean;
  generateThumbnails: boolean;
  watermark?: WatermarkSettings;
  privacy: VideoPrivacyLevel;
  contentType: VideoContentType;
}

/**
 * Progresso do upload
 */
export interface UploadProgress {
  uploadedBytes: number;
  totalBytes: number;
  percentage: number;
  speed: number; // bytes por segundo
  estimatedTimeRemaining: number; // em segundos
  currentChunk: number;
  totalChunks: number;
}

/**
 * Progresso do processamento
 */
export interface ProcessingProgress {
  status: ProcessingStatus;
  percentage: number;
  currentStep: string;
  estimatedTimeRemaining?: number;
  qualitiesProcessed: VideoQuality[];
  qualitiesRemaining: VideoQuality[];
}

/**
 * Thumbnail do vídeo
 */
export interface VideoThumbnail {
  id: string;
  url: string;
  timestamp: number; // em segundos
  width: number;
  height: number;
  isDefault: boolean;
}

/**
 * Legenda/Subtitle do vídeo
 */
export interface VideoSubtitle {
  id: string;
  language: string;
  languageCode: string;
  url: string;
  isDefault: boolean;
  isAutoGenerated: boolean;
}

/**
 * Capítulo do vídeo
 */
export interface VideoChapter {
  id: string;
  title: string;
  startTime: number; // em segundos
  endTime: number; // em segundos
  description?: string;
  thumbnailUrl?: string;
}

/**
 * Estatísticas de visualização
 */
export interface VideoAnalytics {
  views: number;
  uniqueViews: number;
  totalWatchTime: number; // em segundos
  averageWatchTime: number; // em segundos
  completionRate: number; // 0-1
  engagementRate: number; // 0-1
  likes: number;
  dislikes: number;
  shares: number;
  comments: number;
  downloadCount: number;
}

/**
 * Comentário do vídeo
 */
export interface VideoComment {
  id: string;
  userId: string;
  userName: string;
  userAvatar?: string;
  content: string;
  timestamp: number; // timestamp do vídeo em segundos
  createdAt: string;
  updatedAt?: string;
  replies?: VideoComment[];
  likes: number;
  isEdited: boolean;
}

/**
 * Configurações de player
 */
export interface PlayerSettings {
  autoplay: boolean;
  controls: boolean;
  loop: boolean;
  muted: boolean;
  volume: number; // 0-1
  playbackRate: number;
  quality: VideoQuality | 'auto';
  subtitles: boolean;
  subtitleLanguage?: string;
  fullscreen: boolean;
  pip: boolean; // Picture-in-Picture
  seekPreview: boolean;
  chapters: boolean;
  analytics: boolean;
}

/**
 * Configurações de segurança
 */
export interface SecuritySettings {
  domainRestriction: string[]; // domínios permitidos
  ipRestriction: string[]; // IPs permitidos
  passwordProtection?: string;
  expirationDate?: string;
  downloadAllowed: boolean;
  embedAllowed: boolean;
  rightClickDisabled: boolean;
  watermarkRequired: boolean;
}

/**
 * Upload de vídeo principal
 */
export interface VideoUpload {
  id: string;
  title: string;
  description?: string;
  file?: File;
  fileName: string;
  contentType: VideoContentType;
  privacy: VideoPrivacyLevel;
  
  // Status e progresso
  status: UploadStatus;
  uploadProgress?: UploadProgress;
  processingProgress?: ProcessingProgress;
  
  // Metadados
  metadata?: VideoMetadata;
  thumbnails: VideoThumbnail[];
  subtitles: VideoSubtitle[];
  chapters: VideoChapter[];
  
  // Qualidades e URLs
  qualities: QualityVariant[];
  streamingUrls: StreamingUrl[];
  
  // Configurações
  watermark?: WatermarkSettings;
  security?: SecuritySettings;
  
  // Analytics
  analytics?: VideoAnalytics;
  comments: VideoComment[];
  
  // Metadados do sistema
  uploadedBy: string;
  createdAt: string;
  updatedAt: string;
  publishedAt?: string;
  
  // Tags e categorização
  tags: string[];
  category?: string;
  language?: string;
  
  // Relacionamentos
  playlistIds: string[];
  relatedVideoIds: string[];
  
  // Configurações de acesso
  allowedUsers: string[];
  allowedRoles: string[];
  
  // URLs e CDN
  originalUrl?: string;
  cdnUrl?: string;
  embedUrl?: string;
  
  // Erro (se houver)
  error?: {
    code: string;
    message: string;
    details?: Record<string, unknown>;
  };
}

/**
 * Playlist de vídeos
 */
export interface VideoPlaylist {
  id: string;
  title: string;
  description?: string;
  thumbnailUrl?: string;
  videoIds: string[];
  privacy: VideoPrivacyLevel;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
  tags: string[];
  category?: string;
  isPublic: boolean;
  allowComments: boolean;
  analytics?: {
    views: number;
    totalWatchTime: number;
    videosCompleted: number;
  };
}

/**
 * Configurações do sistema de vídeo
 */
export interface VideoSystemConfig {
  upload: UploadConfig;
  processing: {
    enabledQualities: VideoQuality[];
    defaultQuality: VideoQuality;
    generateThumbnailCount: number;
    thumbnailInterval: number; // em segundos
    enableAutoSubtitles: boolean;
    enableChapterDetection: boolean;
  };
  storage: {
    provider: 'aws' | 'gcp' | 'azure' | 'local';
    bucket: string;
    region: string;
    cdnUrl: string;
    enableCdn: boolean;
  };
  security: {
    enableDomainRestriction: boolean;
    enableIpRestriction: boolean;
    enablePasswordProtection: boolean;
    enableWatermark: boolean;
    defaultWatermark: WatermarkSettings;
    tokenExpirationTime: number; // em segundos
  };
  player: {
    defaultSettings: PlayerSettings;
    enableAnalytics: boolean;
    enableComments: boolean;
    enableChapters: boolean;
    enableSubtitles: boolean;
  };
}

// ============================================================================
// Hook Return Types
// ============================================================================

/**
 * Retorno do hook useVideoUpload
 */
export interface UseVideoUploadReturn {
  uploads: VideoUpload[];
  currentUpload: VideoUpload | null;
  isUploading: boolean;
  uploadFile: (file: File, config?: Partial<UploadConfig>) => Promise<string>;
  pauseUpload: (uploadId: string) => void;
  resumeUpload: (uploadId: string) => void;
  cancelUpload: (uploadId: string) => void;
  retryUpload: (uploadId: string) => void;
  clearCompleted: () => void;
  getUploadById: (uploadId: string) => VideoUpload | undefined;
}

/**
 * Retorno do hook useVideoPlayer
 */
export interface UseVideoPlayerReturn {
  isPlaying: boolean;
  currentTime: number;
  duration: number;
  volume: number;
  quality: VideoQuality | 'auto';
  isFullscreen: boolean;
  isLoading: boolean;
  error: string | null;
  play: () => void;
  pause: () => void;
  seek: (time: number) => void;
  setVolume: (volume: number) => void;
  setQuality: (quality: VideoQuality | 'auto') => void;
  toggleFullscreen: () => void;
  toggleMute: () => void;
}

/**
 * Retorno do hook useVideoAnalytics
 */
export interface UseVideoAnalyticsReturn {
  analytics: VideoAnalytics | null;
  isLoading: boolean;
  error: string | null;
  trackView: () => void;
  trackProgress: (currentTime: number, duration: number) => void;
  trackCompletion: () => void;
  trackInteraction: (type: 'like' | 'dislike' | 'share' | 'comment') => void;
}

// ============================================================================
// Service Types
// ============================================================================

/**
 * Configuração do serviço de vídeo
 */
export interface VideoServiceConfig {
  apiUrl: string;
  uploadUrl: string;
  cdnUrl: string;
  apiKey?: string;
  timeout: number;
  retryAttempts: number;
}

/**
 * API de vídeo
 */
export interface VideoAPI {
  upload: (file: File, config: UploadConfig) => Promise<VideoUpload>;
  getVideo: (id: string) => Promise<VideoUpload>;
  updateVideo: (id: string, updates: Partial<VideoUpload>) => Promise<VideoUpload>;
  deleteVideo: (id: string) => Promise<void>;
  getVideos: (filters?: VideoFilters) => Promise<VideoUpload[]>;
  getStreamingUrl: (id: string, quality: VideoQuality) => Promise<StreamingUrl>;
  getAnalytics: (id: string) => Promise<VideoAnalytics>;
  addComment: (videoId: string, comment: Omit<VideoComment, 'id' | 'createdAt'>) => Promise<VideoComment>;
  getComments: (videoId: string) => Promise<VideoComment[]>;
}

/**
 * Filtros para busca de vídeos
 */
export interface VideoFilters {
  contentType?: VideoContentType;
  privacy?: VideoPrivacyLevel;
  status?: UploadStatus;
  uploadedBy?: string;
  tags?: string[];
  category?: string;
  dateRange?: {
    start: string;
    end: string;
  };
  search?: string;
  sortBy?: 'createdAt' | 'updatedAt' | 'title' | 'views' | 'duration';
  sortOrder?: 'asc' | 'desc';
  limit?: number;
  offset?: number;
}

// ============================================================================
// Component Props Types
// ============================================================================

/**
 * Props do componente VideoUploader
 */
export interface VideoUploaderProps {
  config?: Partial<UploadConfig>;
  onUploadStart?: (upload: VideoUpload) => void;
  onUploadProgress?: (upload: VideoUpload) => void;
  onUploadComplete?: (upload: VideoUpload) => void;
  onUploadError?: (upload: VideoUpload, error: Error) => void;
  className?: string;
  multiple?: boolean;
  dragAndDrop?: boolean;
  showProgress?: boolean;
  showPreview?: boolean;
}

/**
 * Props do componente VideoPlayer
 */
export interface VideoPlayerProps {
  videoId?: string;
  src?: string;
  poster?: string;
  settings?: Partial<PlayerSettings>;
  security?: Partial<SecuritySettings>;
  onPlay?: () => void;
  onPause?: () => void;
  onEnded?: () => void;
  onProgress?: (currentTime: number, duration: number) => void;
  onError?: (error: Error) => void;
  className?: string;
  width?: number | string;
  height?: number | string;
}

/**
 * Props do componente VideoLibrary
 */
export interface VideoLibraryProps {
  filters?: VideoFilters;
  onVideoSelect?: (video: VideoUpload) => void;
  onVideoDelete?: (video: VideoUpload) => void;
  onVideoEdit?: (video: VideoUpload) => void;
  showUploader?: boolean;
  showFilters?: boolean;
  showSearch?: boolean;
  viewMode?: 'grid' | 'list';
  className?: string;
}

/**
 * Props do componente VideoCard
 */
export interface VideoCardProps {
  video: VideoUpload;
  onClick?: (video: VideoUpload) => void;
  onEdit?: (video: VideoUpload) => void;
  onDelete?: (video: VideoUpload) => void;
  onShare?: (video: VideoUpload) => void;
  showActions?: boolean;
  showAnalytics?: boolean;
  className?: string;
}

// ============================================================================
// Utility Types
// ============================================================================

/**
 * Tipo para formatação de duração
 */
export type DurationFormat = 'short' | 'long' | 'precise';

/**
 * Tipo para formatação de tamanho de arquivo
 */
export type FileSizeFormat = 'bytes' | 'kb' | 'mb' | 'gb' | 'auto';

/**
 * Constantes do sistema
 */
export const VIDEO_CONSTANTS = {
  MAX_FILE_SIZE: 5 * 1024 * 1024 * 1024, // 5GB
  CHUNK_SIZE: 5 * 1024 * 1024, // 5MB
  SUPPORTED_FORMATS: ['mp4', 'webm', 'avi', 'mov', 'mkv'] as VideoFormat[],
  DEFAULT_QUALITIES: ['240p', '360p', '480p', '720p', '1080p'] as VideoQuality[],
  THUMBNAIL_COUNT: 10,
  THUMBNAIL_INTERVAL: 30, // segundos
  TOKEN_EXPIRATION: 24 * 60 * 60, // 24 horas em segundos
  MAX_CONCURRENT_UPLOADS: 3,
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000, // ms
} as const;

/**
 * Funções utilitárias de tipo
 */
export type VideoUploadWithoutFile = Omit<VideoUpload, 'file'>;
export type VideoUploadCreate = Pick<VideoUpload, 'title' | 'description' | 'contentType' | 'privacy'> & {
  file: File;
};
export type VideoUploadUpdate = Partial<Pick<VideoUpload, 'title' | 'description' | 'privacy' | 'tags' | 'category'>>;

export default VideoUpload;